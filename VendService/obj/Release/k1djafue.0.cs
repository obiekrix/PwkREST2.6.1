#if _DYNAMIC_XMLSERIALIZER_COMPILATION
[assembly:System.Security.AllowPartiallyTrustedCallers()]
[assembly:System.Security.SecurityTransparent()]
[assembly:System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1)]
#endif
[assembly:System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly:System.Xml.Serialization.XmlSerializerVersionAttribute(ParentAssemblyId=@"0ff80005-9e77-4f83-bf2e-bdb8be1eaab6,", Version=@"4.0.0.0")]
namespace Microsoft.Xml.Serialization.GeneratedAssembly {

    public class XmlSerializationWriterXMLVendService : System.Xml.Serialization.XmlSerializationWriter {

        public void Write359_ConfirmCustomerRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write163_ConfirmCustomerReq(@"confirmCustomerReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.ConfirmCustomerReq)p[0]), false, false);
            }
        }

        public void Write360_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write361_ReprintRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write162_ReprintReq(@"reprintReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.ReprintReq)p[0]), false, false);
            }
        }

        public void Write362_ReprintRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write363_CancelVendRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write109_CancelVendReq(@"cancelVendReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.CancelVendReq)p[0]), false, false);
            }
        }

        public void Write364_CancelVendRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write365_VerifyRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write153_VerifyReq(@"verifyReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VerifyReq)p[0]), false, false);
            }
        }

        public void Write366_VerifyRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write367_PayAccountRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write161_PayAccReq(@"payAccReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PayAccReq)p[0]), false, false);
            }
        }

        public void Write368_PayAccountRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write369_CustReportFaultRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write91_CustReportFaultReq(@"custReportFaultReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.CustReportFaultReq)p[0]), false, false);
            }
        }

        public void Write370_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write371_UpdateMeterKeyRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write179_UpdateMeterKeyReq(@"updateMeterKeyReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.UpdateMeterKeyReq)p[0]), false, false);
            }
        }

        public void Write372_UpdateMeterKeyRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write373_VendorStatementRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write137_VendorStatementReq(@"vendorStatementReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendorStatementReq)p[0]), false, false);
            }
        }

        public void Write374_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write375_DepositSlipRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write136_DepositReq(@"depositReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DepositReq)p[0]), false, false);
            }
        }

        public void Write376_DepositSlipRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write377_ReprintDepositSlipRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write147_ReprintDepositReq(@"reprintDepReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.ReprintDepositReq)p[0]), false, false);
            }
        }

        public void Write378_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write379_ReprintEndBatchRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write141_ReprintEndBatchReq(@"reprintEndBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.ReprintEndBatchReq)p[0]), false, false);
            }
        }

        public void Write380_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write381_NonMeterSpecificEngRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write178_NonMeterSpecificEngReq(@"nonMeterSpecificEngReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq)p[0]), false, false);
            }
        }

        public void Write382_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write383_MeterSpecificEngRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write107_MeterSpecificEngReq(@"meterSpecificEngReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterSpecificEngReq)p[0]), false, false);
            }
        }

        public void Write384_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write385_AdviceRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write133_AdviceReq(@"adviceReq", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AdviceReq)p[0]), false, false);
            }
        }

        public void Write386_AdviceRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write387_StartBatchRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write146_StartBatchReq(@"startBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.StartBatchReq)p[0]), false, false);
            }
        }

        public void Write388_StartBatchRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write389_EndBatchRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write95_EndBatchReq(@"endBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.EndBatchReq)p[0]), false, false);
            }
        }

        public void Write390_EndBatchRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write391_TotalBatchRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write152_TotalBatchReq(@"totalBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TotalBatchReq)p[0]), false, false);
            }
        }

        public void Write392_TotalBatchRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write393_GetVendingServerStateRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write134_GetVendingServerStateReq(@"vendingServerStateReq", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.GetVendingServerStateReq)p[0]), false, false);
            }
        }

        public void Write394_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write395_MakeMerchantDeposit(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write135_MakeMerchantDepositReq(@"makeMerchantDepositReq", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MakeMerchantDepositReq)p[0]), false, false);
            }
        }

        public void Write396_MakeMerchantDepositInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write397_ReverseMerchantDeposit(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write97_ReverseMerchantDepositReq(@"reverseMerchantDepositReq", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq)p[0]), false, false);
            }
        }

        public void Write398_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write399_ConfirmMeterRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write180_ConfirmMeterReq(@"confirmMeterReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.ConfirmMeterReq)p[0]), false, false);
            }
        }

        public void Write400_ConfirmMeterRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write401_CreditVendRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write124_CreditVendReq(@"creditVendReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.CreditVendReq)p[0]), false, false);
            }
        }

        public void Write402_CreditVendRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write403_FBERequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write110_FBEReq(@"fbeReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.FBEReq)p[0]), false, false);
            }
        }

        public void Write404_FBERequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write405_TrialCreditVendRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write123_TrialCreditVendReq(@"trialCreditVendReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TrialCreditVendReq)p[0]), false, false);
            }
        }

        public void Write406_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write407_MeterCreditTransferRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write128_MeterCreditTransferReq(@"meterCreditTransferReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterCreditTransferReq)p[0]), false, false);
            }
        }

        public void Write408_Item(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write409_FreeIssueRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write126_FreeIssueReq(@"freeIssueReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.FreeIssueReq)p[0]), false, false);
            }
        }

        public void Write410_FreeIssueRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        public void Write411_CancelPendingRequest(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
            if (pLength > 0) {
                Write108_CancelPendingReq(@"cancelPendingReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.CancelPendingReq)p[0]), false, false);
            }
        }

        public void Write412_CancelPendingRequestInHeaders(object[] p) {
            WriteStartDocument();
            TopLevelElement();
            int pLength = p.Length;
        }

        void Write108_CancelPendingReq(string n, string ns, global::PwkApi.com.conlog.val.phb.CancelPendingReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CancelPendingReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CancelPendingReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            WriteElementString(@"TransactionNumber", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@TransactionNumber));
            Write57_EANDeviceID(@"CDUID", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.EANDeviceID)o.@CDUID), false, false);
            WriteElementString(@"CancellationReasonCode", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@CancellationReasonCode));
            Write21_STS1Token(@"token", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.STS1Token)o.@token), false, false);
            WriteElementString(@"DocumentNumber", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@DocumentNumber));
            WriteElementStringRaw(@"AutoCancel", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@AutoCancel)));
            WriteElementString(@"OriginalUniqueNumber", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@OriginalUniqueNumber));
            Write60_MsgID(@"adviceReqMsgID", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@adviceReqMsgID), false, false);
            WriteEndElement(o);
        }

        void Write60_MsgID(string n, string ns, global::PwkApi.com.conlog.val.phb.MsgID o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MsgID)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MsgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"dateTime", @"", ((global::System.String)o.@dateTime));
            WriteAttribute(@"uniqueNumber", @"", ((global::System.String)o.@uniqueNumber));
            WriteAttribute(@"sequenceNumber", @"", ((global::System.String)o.@sequenceNumber));
            WriteEndElement(o);
        }

        void Write21_STS1Token(string n, string ns, global::PwkApi.com.conlog.val.phb.STS1Token o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.STS1Token)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"STS1Token", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteElementString(@"stsCipher", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@stsCipher));
            WriteEndElement(o);
        }

        void Write57_EANDeviceID(string n, string ns, global::PwkApi.com.conlog.val.phb.EANDeviceID o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.EANDeviceID)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"EANDeviceID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"ean", @"", ((global::System.String)o.@ean));
            WriteEndElement(o);
        }

        void Write99_TokenDeliveryMethod(string n, string ns, global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.AMRTokenDeliveryMethod)) {
                    Write98_AMRTokenDeliveryMethod(n, ns,(global::PwkApi.com.conlog.val.phb.AMRTokenDeliveryMethod)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write98_AMRTokenDeliveryMethod(string n, string ns, global::PwkApi.com.conlog.val.phb.AMRTokenDeliveryMethod o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.AMRTokenDeliveryMethod)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"AMRTokenDeliveryMethod", @"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema");
            WriteEndElement(o);
        }

        void Write71_VendIDMethod(string n, string ns, global::PwkApi.com.conlog.val.phb.VendIDMethod o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.VendIDMethod)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"VendIDMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write17_MeterIdentifier(@"meterIdentifier", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterIdentifier)o.@meterIdentifier), false, false);
            WriteEndElement(o);
        }

        void Write17_MeterIdentifier(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterIdentifier o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterIdentifier)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterConfig)) {
                    Write18_MeterConfig(n, ns,(global::PwkApi.com.conlog.val.phb.MeterConfig)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterDetail)) {
                    Write20_MeterDetail(n, ns,(global::PwkApi.com.conlog.val.phb.MeterDetail)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ExtMeterDetail)) {
                    Write14_ExtMeterDetail(n, ns,(global::PwkApi.com.conlog.val.phb.ExtMeterDetail)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterCard)) {
                    Write13_MeterCard(n, ns,(global::PwkApi.com.conlog.val.phb.MeterCard)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterAccount)) {
                    Write16_MeterAccount(n, ns,(global::PwkApi.com.conlog.val.phb.MeterAccount)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterNumber)) {
                    Write15_MeterNumber(n, ns,(global::PwkApi.com.conlog.val.phb.MeterNumber)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write15_MeterNumber(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterNumber o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterNumber)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MeterNumber", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"msno", @"", ((global::System.String)o.@msno));
            WriteEndElement(o);
        }

        void Write16_MeterAccount(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterAccount o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterAccount)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MeterAccount", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteElementString(@"AccNo", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@AccNo));
            WriteElementStringRaw(@"isSmartCard", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@isSmartCard)));
            WriteEndElement(o);
        }

        void Write13_MeterCard(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterCard o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterCard)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MeterCard", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteElementString(@"track2Data", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@track2Data));
            WriteEndElement(o);
        }

        void Write14_ExtMeterDetail(string n, string ns, global::PwkApi.com.conlog.val.phb.ExtMeterDetail o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ExtMeterDetail)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ExtMeterDetail", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"msno", @"", ((global::System.String)o.@msno));
            WriteAttribute(@"sgc", @"", ((global::System.String)o.@sgc));
            WriteAttribute(@"krn", @"", ((global::System.String)o.@krn));
            WriteAttribute(@"ti", @"", ((global::System.String)o.@ti));
            if (o.@useSTTSpecified) {
                WriteAttribute(@"useSTT", @"", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@useSTT)));
            }
            WriteAttribute(@"track2Data", @"", ((global::System.String)o.@track2Data));
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            if (o.@useSTTSpecified) {
            }
            WriteEndElement(o);
        }

        void Write19_MeterType(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterType o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterType)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MeterType", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"at", @"", ((global::System.String)o.@at));
            WriteAttribute(@"tt", @"", ((global::System.String)o.@tt));
            WriteEndElement(o);
        }

        void Write20_MeterDetail(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterDetail o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterDetail)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ExtMeterDetail)) {
                    Write14_ExtMeterDetail(n, ns,(global::PwkApi.com.conlog.val.phb.ExtMeterDetail)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MeterDetail", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"msno", @"", ((global::System.String)o.@msno));
            WriteAttribute(@"sgc", @"", ((global::System.String)o.@sgc));
            WriteAttribute(@"krn", @"", ((global::System.String)o.@krn));
            WriteAttribute(@"ti", @"", ((global::System.String)o.@ti));
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteEndElement(o);
        }

        void Write18_MeterConfig(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterConfig o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterConfig)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterDetail)) {
                    Write20_MeterDetail(n, ns,(global::PwkApi.com.conlog.val.phb.MeterDetail)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ExtMeterDetail)) {
                    Write14_ExtMeterDetail(n, ns,(global::PwkApi.com.conlog.val.phb.ExtMeterDetail)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterCard)) {
                    Write13_MeterCard(n, ns,(global::PwkApi.com.conlog.val.phb.MeterCard)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write45_Resource(string n, string ns, global::PwkApi.com.conlog.val.phb.Resource o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Resource)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Gas)) {
                    Write44_Gas(n, ns,(global::PwkApi.com.conlog.val.phb.Gas)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ConnectionTime)) {
                    Write43_ConnectionTime(n, ns,(global::PwkApi.com.conlog.val.phb.ConnectionTime)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Electricity)) {
                    Write42_Electricity(n, ns,(global::PwkApi.com.conlog.val.phb.Electricity)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.CurrencyResource)) {
                    Write41_CurrencyResource(n, ns,(global::PwkApi.com.conlog.val.phb.CurrencyResource)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Water)) {
                    Write40_Water(n, ns,(global::PwkApi.com.conlog.val.phb.Water)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write40_Water(string n, string ns, global::PwkApi.com.conlog.val.phb.Water o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Water)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Water", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteEndElement(o);
        }

        void Write41_CurrencyResource(string n, string ns, global::PwkApi.com.conlog.val.phb.CurrencyResource o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CurrencyResource)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CurrencyResource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteEndElement(o);
        }

        void Write42_Electricity(string n, string ns, global::PwkApi.com.conlog.val.phb.Electricity o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Electricity)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Electricity", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteEndElement(o);
        }

        void Write43_ConnectionTime(string n, string ns, global::PwkApi.com.conlog.val.phb.ConnectionTime o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ConnectionTime)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ConnectionTime", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteEndElement(o);
        }

        void Write44_Gas(string n, string ns, global::PwkApi.com.conlog.val.phb.Gas o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Gas)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Gas", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteEndElement(o);
        }

        void Write61_AuthCred(string n, string ns, global::PwkApi.com.conlog.val.phb.AuthCred o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.AuthCred)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"AuthCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteElementString(@"opName", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@opName));
            WriteElementString(@"password", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@password));
            WriteElementString(@"newPassword", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@newPassword));
            WriteEndElement(o);
        }

        void Write59_DeviceID(string n, string ns, global::PwkApi.com.conlog.val.phb.DeviceID o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DeviceID)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.GenericDeviceID)) {
                    Write58_GenericDeviceID(n, ns,(global::PwkApi.com.conlog.val.phb.GenericDeviceID)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.EANDeviceID)) {
                    Write57_EANDeviceID(n, ns,(global::PwkApi.com.conlog.val.phb.EANDeviceID)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write58_GenericDeviceID(string n, string ns, global::PwkApi.com.conlog.val.phb.GenericDeviceID o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.GenericDeviceID)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"GenericDeviceID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"id", @"", ((global::System.String)o.@id));
            WriteEndElement(o);
        }

        void Write126_FreeIssueReq(string n, string ns, global::PwkApi.com.conlog.val.phb.FreeIssueReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.FreeIssueReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"FreeIssueReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            WriteElementString(@"DocumentNumber", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@DocumentNumber));
            WriteElementString(@"ReasonCode", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@ReasonCode));
            Write39_Units(@"Units", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Units)o.@Units), false, false);
            WriteEndElement(o);
        }

        void Write39_Units(string n, string ns, global::PwkApi.com.conlog.val.phb.Units o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Units)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Units", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"value", @"", System.Xml.XmlConvert.ToString((global::System.Decimal)((global::System.Decimal)o.@value)));
            WriteAttribute(@"siUnit", @"", ((global::System.String)o.@siUnit));
            WriteEndElement(o);
        }

        void Write128_MeterCreditTransferReq(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterCreditTransferReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterCreditTransferReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MeterCreditTransferReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            Write111_PurchaseValueUnits(@"chgOutUnits", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PurchaseValueUnits)o.@chgOutUnits), false, false);
            Write127_CreditTransferDetail(@"creditTransferDetail", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.CreditTransferDetail)o.@creditTransferDetail), false, false);
            WriteEndElement(o);
        }

        void Write127_CreditTransferDetail(string n, string ns, global::PwkApi.com.conlog.val.phb.CreditTransferDetail o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CreditTransferDetail)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CreditTransferDetail", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            WriteElementString(@"oldMSNO", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@oldMSNO));
            WriteElementString(@"refNo", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@refNo));
            WriteEndElement(o);
        }

        void Write111_PurchaseValueUnits(string n, string ns, global::PwkApi.com.conlog.val.phb.PurchaseValueUnits o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.PurchaseValueUnits)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"PurchaseValueUnits", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write39_Units(@"units", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Units)o.@units), false, false);
            WriteEndElement(o);
        }

        void Write123_TrialCreditVendReq(string n, string ns, global::PwkApi.com.conlog.val.phb.TrialCreditVendReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TrialCreditVendReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"TrialCreditVendReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            Write113_PurchaseValue(@"purchaseValue", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PurchaseValue)o.@purchaseValue), false, false);
            Write122_PayType(@"payType", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PayType)o.@payType), false, false);
            WriteEndElement(o);
        }

        void Write122_PayType(string n, string ns, global::PwkApi.com.conlog.val.phb.PayType o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.PayType)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.PinVoucher)) {
                    Write121_PinVoucher(n, ns,(global::PwkApi.com.conlog.val.phb.PinVoucher)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Unknown)) {
                    Write120_Unknown(n, ns,(global::PwkApi.com.conlog.val.phb.Unknown)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Cash)) {
                    Write119_Cash(n, ns,(global::PwkApi.com.conlog.val.phb.Cash)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Cheque)) {
                    Write118_Cheque(n, ns,(global::PwkApi.com.conlog.val.phb.Cheque)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Card)) {
                    Write115_Card(n, ns,(global::PwkApi.com.conlog.val.phb.Card)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DebitCard)) {
                    Write116_DebitCard(n, ns,(global::PwkApi.com.conlog.val.phb.DebitCard)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.CreditCard)) {
                    Write114_CreditCard(n, ns,(global::PwkApi.com.conlog.val.phb.CreditCard)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write114_CreditCard(string n, string ns, global::PwkApi.com.conlog.val.phb.CreditCard o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CreditCard)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CreditCard", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write2_Currency(@"cardAmt", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Currency)o.@cardAmt), false, false);
            WriteElementString(@"accHolderName", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@accHolderName));
            WriteElementString(@"pan", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@pan));
            WriteElementString(@"expDate", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@expDate));
            WriteElementString(@"cvNum", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@cvNum));
            WriteElementString(@"clearingHouse", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@clearingHouse));
            WriteEndElement(o);
        }

        void Write2_Currency(string n, string ns, global::PwkApi.com.conlog.val.phb.Currency o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Currency)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Currency", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"value", @"", System.Xml.XmlConvert.ToString((global::System.Decimal)((global::System.Decimal)o.@value)));
            WriteAttribute(@"symbol", @"", ((global::System.String)o.@symbol));
            WriteEndElement(o);
        }

        void Write116_DebitCard(string n, string ns, global::PwkApi.com.conlog.val.phb.DebitCard o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DebitCard)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DebitCard", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write2_Currency(@"cardAmt", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Currency)o.@cardAmt), false, false);
            WriteElementString(@"accHolderName", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@accHolderName));
            WriteElementString(@"pan", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@pan));
            WriteElementString(@"expDate", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@expDate));
            WriteElementString(@"cvNum", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@cvNum));
            WriteElementString(@"clearingHouse", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@clearingHouse));
            WriteEndElement(o);
        }

        void Write115_Card(string n, string ns, global::PwkApi.com.conlog.val.phb.Card o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Card)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DebitCard)) {
                    Write116_DebitCard(n, ns,(global::PwkApi.com.conlog.val.phb.DebitCard)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.CreditCard)) {
                    Write114_CreditCard(n, ns,(global::PwkApi.com.conlog.val.phb.CreditCard)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write118_Cheque(string n, string ns, global::PwkApi.com.conlog.val.phb.Cheque o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Cheque)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Cheque", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write2_Currency(@"cheqAmt", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Currency)o.@cheqAmt), false, false);
            WriteElementString(@"accHolderName", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@accHolderName));
            WriteElementString(@"accHolderIDNo", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@accHolderIDNo));
            WriteElementString(@"accNo", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@accNo));
            WriteElementString(@"bankName", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@bankName));
            WriteElementString(@"branchCode", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@branchCode));
            WriteElementString(@"cheqNo", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@cheqNo));
            WriteElementString(@"cheqType", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", Write117_ChequeType(((global::PwkApi.com.conlog.val.phb.ChequeType)o.@cheqType)));
            WriteElementString(@"micr", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@micr));
            WriteEndElement(o);
        }

        string Write117_ChequeType(global::PwkApi.com.conlog.val.phb.ChequeType v) {
            string s = null;
            switch (v) {
                case global::PwkApi.com.conlog.val.phb.ChequeType.@Personal: s = @"Personal"; break;
                case global::PwkApi.com.conlog.val.phb.ChequeType.@Company: s = @"Company"; break;
                case global::PwkApi.com.conlog.val.phb.ChequeType.@Government: s = @"Government"; break;
                default: throw CreateInvalidEnumValueException(((System.Int64)v).ToString(System.Globalization.CultureInfo.InvariantCulture), @"PwkApi.com.conlog.val.phb.ChequeType");
            }
            return s;
        }

        void Write119_Cash(string n, string ns, global::PwkApi.com.conlog.val.phb.Cash o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Cash)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Cash", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write2_Currency(@"tenderAmt", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Currency)o.@tenderAmt), false, false);
            WriteEndElement(o);
        }

        void Write120_Unknown(string n, string ns, global::PwkApi.com.conlog.val.phb.Unknown o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Unknown)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Unknown", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteEndElement(o);
        }

        void Write121_PinVoucher(string n, string ns, global::PwkApi.com.conlog.val.phb.PinVoucher o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.PinVoucher)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"PinVoucher", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteElementString(@"voucherSerialNumber", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@voucherSerialNumber));
            WriteElementString(@"voucherPin", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@voucherPin));
            Write2_Currency(@"voucherAmount", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Currency)o.@voucherAmount), false, false);
            WriteEndElement(o);
        }

        void Write113_PurchaseValue(string n, string ns, global::PwkApi.com.conlog.val.phb.PurchaseValue o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.PurchaseValue)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.PurchaseValueCurrency)) {
                    Write112_PurchaseValueCurrency(n, ns,(global::PwkApi.com.conlog.val.phb.PurchaseValueCurrency)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.PurchaseValueUnits)) {
                    Write111_PurchaseValueUnits(n, ns,(global::PwkApi.com.conlog.val.phb.PurchaseValueUnits)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write112_PurchaseValueCurrency(string n, string ns, global::PwkApi.com.conlog.val.phb.PurchaseValueCurrency o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.PurchaseValueCurrency)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"PurchaseValueCurrency", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write2_Currency(@"amt", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Currency)o.@amt), false, false);
            WriteEndElement(o);
        }

        void Write110_FBEReq(string n, string ns, global::PwkApi.com.conlog.val.phb.FBEReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.FBEReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"FBEReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            WriteEndElement(o);
        }

        void Write124_CreditVendReq(string n, string ns, global::PwkApi.com.conlog.val.phb.CreditVendReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CreditVendReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CreditVendReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            Write113_PurchaseValue(@"purchaseValue", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PurchaseValue)o.@purchaseValue), false, false);
            Write122_PayType(@"payType", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PayType)o.@payType), false, false);
            WriteEndElement(o);
        }

        void Write180_ConfirmMeterReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ConfirmMeterReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ConfirmMeterReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ConfirmMeterReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write97_ReverseMerchantDepositReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ReverseMerchantDepositReq", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteElementString(@"DepositReferenceNumber", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@DepositReferenceNumber));
            WriteEndElement(o);
        }

        void Write135_MakeMerchantDepositReq(string n, string ns, global::PwkApi.com.conlog.val.phb.MakeMerchantDepositReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MakeMerchantDepositReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MakeMerchantDepositReq", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteElementString(@"AccountHolderName", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@AccountHolderName));
            WriteElementString(@"AccountNo", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@AccountNo));
            WriteElementStringRaw(@"AmountDeposited", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Decimal)((global::System.Decimal)o.@AmountDeposited)));
            WriteElementString(@"BankName", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@BankName));
            WriteElementString(@"DateDeposited", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@DateDeposited));
            WriteElementString(@"DepositReferenceNumber", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@DepositReferenceNumber));
            WriteElementString(@"Notes", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@Notes));
            WriteElementString(@"BankBranchCode", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@BankBranchCode));
            WriteEndElement(o);
        }

        void Write134_GetVendingServerStateReq(string n, string ns, global::PwkApi.com.conlog.val.phb.GetVendingServerStateReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.GetVendingServerStateReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"GetVendingServerStateReq", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write59_DeviceID(@"serverID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@serverID), false, false);
            WriteEndElement(o);
        }

        void Write152_TotalBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.TotalBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TotalBatchReq)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TotalSalesBatchReq)) {
                    Write151_TotalSalesBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.TotalSalesBatchReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TotalAllBatchesReq)) {
                    Write150_TotalAllBatchesReq(n, ns,(global::PwkApi.com.conlog.val.phb.TotalAllBatchesReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TotalShiftBatchReq)) {
                    Write149_TotalShiftBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.TotalShiftBatchReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TotalBankBatchReq)) {
                    Write148_TotalBankBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.TotalBankBatchReq)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write148_TotalBankBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.TotalBankBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TotalBankBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"TotalBankBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write149_TotalShiftBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.TotalShiftBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TotalShiftBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"TotalShiftBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write150_TotalAllBatchesReq(string n, string ns, global::PwkApi.com.conlog.val.phb.TotalAllBatchesReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TotalAllBatchesReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"TotalAllBatchesReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write151_TotalSalesBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.TotalSalesBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TotalSalesBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"TotalSalesBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write95_EndBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.EndBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.EndBatchReq)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.EndBankBatchReq)) {
                    Write96_EndBankBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.EndBankBatchReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.EndAllBatchesReq)) {
                    Write94_EndAllBatchesReq(n, ns,(global::PwkApi.com.conlog.val.phb.EndAllBatchesReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.EndShiftBatchReq)) {
                    Write93_EndShiftBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.EndShiftBatchReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.EndSalesBatchReq)) {
                    Write92_EndSalesBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.EndSalesBatchReq)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write92_EndSalesBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.EndSalesBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.EndSalesBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"EndSalesBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write93_EndShiftBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.EndShiftBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.EndShiftBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"EndShiftBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write94_EndAllBatchesReq(string n, string ns, global::PwkApi.com.conlog.val.phb.EndAllBatchesReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.EndAllBatchesReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"EndAllBatchesReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write96_EndBankBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.EndBankBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.EndBankBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"EndBankBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write146_StartBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.StartBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.StartBatchReq)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.StartShiftBatchReq)) {
                    Write145_StartShiftBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.StartShiftBatchReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.StartAllBatchesReq)) {
                    Write144_StartAllBatchesReq(n, ns,(global::PwkApi.com.conlog.val.phb.StartAllBatchesReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.StartSalesBatchReq)) {
                    Write143_StartSalesBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.StartSalesBatchReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.StartBankBatchReq)) {
                    Write142_StartBankBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.StartBankBatchReq)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write142_StartBankBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.StartBankBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.StartBankBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"StartBankBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write143_StartSalesBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.StartSalesBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.StartSalesBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"StartSalesBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write144_StartAllBatchesReq(string n, string ns, global::PwkApi.com.conlog.val.phb.StartAllBatchesReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.StartAllBatchesReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"StartAllBatchesReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write145_StartShiftBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.StartShiftBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.StartShiftBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"StartShiftBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write133_AdviceReq(string n, string ns, global::PwkApi.com.conlog.val.phb.AdviceReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.AdviceReq)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ConfirmationAdviceReq)) {
                    Write132_ConfirmationAdviceReq(n, ns,(global::PwkApi.com.conlog.val.phb.ConfirmationAdviceReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.LastRespAdviceReq)) {
                    Write131_LastRespAdviceReq(n, ns,(global::PwkApi.com.conlog.val.phb.LastRespAdviceReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ReversalAdviceReq)) {
                    Write130_ReversalAdviceReq(n, ns,(global::PwkApi.com.conlog.val.phb.ReversalAdviceReq)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write130_ReversalAdviceReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ReversalAdviceReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ReversalAdviceReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ReversalAdviceReq", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write60_MsgID(@"adviceReqMsgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@adviceReqMsgID), false, false);
            WriteEndElement(o);
        }

        void Write131_LastRespAdviceReq(string n, string ns, global::PwkApi.com.conlog.val.phb.LastRespAdviceReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.LastRespAdviceReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"LastRespAdviceReq", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write60_MsgID(@"adviceReqMsgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@adviceReqMsgID), false, false);
            WriteEndElement(o);
        }

        void Write132_ConfirmationAdviceReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ConfirmationAdviceReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ConfirmationAdviceReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ConfirmationAdviceReq", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write60_MsgID(@"adviceReqMsgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@adviceReqMsgID), false, false);
            Write122_PayType(@"payType", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PayType)o.@payType), false, false);
            WriteEndElement(o);
        }

        void Write107_MeterSpecificEngReq(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterSpecificEngReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterSpecificEngReq)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.PwrLmtReq)) {
                    Write106_PwrLmtReq(n, ns,(global::PwkApi.com.conlog.val.phb.PwrLmtReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ClearTamperReq)) {
                    Write105_ClearTamperReq(n, ns,(global::PwkApi.com.conlog.val.phb.ClearTamperReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.EngKCTReq)) {
                    Write104_EngKCTReq(n, ns,(global::PwkApi.com.conlog.val.phb.EngKCTReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.PhUnbalReq)) {
                    Write103_PhUnbalReq(n, ns,(global::PwkApi.com.conlog.val.phb.PhUnbalReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DefCreditReq)) {
                    Write102_DefCreditReq(n, ns,(global::PwkApi.com.conlog.val.phb.DefCreditReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ClearCreditReq)) {
                    Write101_ClearCreditReq(n, ns,(global::PwkApi.com.conlog.val.phb.ClearCreditReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.SetWaterFactorReq)) {
                    Write100_SetWaterFactorReq(n, ns,(global::PwkApi.com.conlog.val.phb.SetWaterFactorReq)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write100_SetWaterFactorReq(string n, string ns, global::PwkApi.com.conlog.val.phb.SetWaterFactorReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.SetWaterFactorReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"SetWaterFactorReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            WriteElementString(@"waterFactor", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@waterFactor));
            WriteEndElement(o);
        }

        void Write101_ClearCreditReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ClearCreditReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ClearCreditReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ClearCreditReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            WriteEndElement(o);
        }

        void Write102_DefCreditReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DefCreditReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DefCreditReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DefCreditReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            WriteEndElement(o);
        }

        void Write103_PhUnbalReq(string n, string ns, global::PwkApi.com.conlog.val.phb.PhUnbalReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.PhUnbalReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"PhUnbalReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            Write26_PwrLmt(@"pwrLmt", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PwrLmt)o.@pwrLmt), false, false);
            WriteEndElement(o);
        }

        void Write26_PwrLmt(string n, string ns, global::PwkApi.com.conlog.val.phb.PwrLmt o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.PwrLmt)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"PwrLmt", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"value", @"", ((global::System.String)o.@value));
            WriteAttribute(@"siUnit", @"", ((global::System.String)o.@siUnit));
            WriteEndElement(o);
        }

        void Write104_EngKCTReq(string n, string ns, global::PwkApi.com.conlog.val.phb.EngKCTReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.EngKCTReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"EngKCTReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            Write29_KCTData(@"kctData", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.KCTData)o.@kctData), false, false);
            WriteEndElement(o);
        }

        void Write29_KCTData(string n, string ns, global::PwkApi.com.conlog.val.phb.KCTData o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.KCTData)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"KCTData", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"fromSGC", @"", ((global::System.String)o.@fromSGC));
            WriteAttribute(@"fromKRN", @"", ((global::System.String)o.@fromKRN));
            WriteAttribute(@"fromTI", @"", ((global::System.String)o.@fromTI));
            WriteAttribute(@"toSGC", @"", ((global::System.String)o.@toSGC));
            WriteAttribute(@"toKRN", @"", ((global::System.String)o.@toKRN));
            WriteAttribute(@"toTI", @"", ((global::System.String)o.@toTI));
            WriteEndElement(o);
        }

        void Write105_ClearTamperReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ClearTamperReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ClearTamperReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ClearTamperReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            WriteEndElement(o);
        }

        void Write106_PwrLmtReq(string n, string ns, global::PwkApi.com.conlog.val.phb.PwrLmtReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.PwrLmtReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"PwrLmtReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            Write26_PwrLmt(@"pwrLmt", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PwrLmt)o.@pwrLmt), false, false);
            WriteEndElement(o);
        }

        void Write178_NonMeterSpecificEngReq(string n, string ns, global::PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DispInstPwrReq)) {
                    Write177_DispInstPwrReq(n, ns,(global::PwkApi.com.conlog.val.phb.DispInstPwrReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DispConsTotReq)) {
                    Write176_DispConsTotReq(n, ns,(global::PwkApi.com.conlog.val.phb.DispConsTotReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DispPhUnbalanceReq)) {
                    Write175_DispPhUnbalanceReq(n, ns,(global::PwkApi.com.conlog.val.phb.DispPhUnbalanceReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TestDispenserReq)) {
                    Write174_TestDispenserReq(n, ns,(global::PwkApi.com.conlog.val.phb.TestDispenserReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TestAllReq)) {
                    Write173_TestAllReq(n, ns,(global::PwkApi.com.conlog.val.phb.TestAllReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TestBreakerReq)) {
                    Write172_TestBreakerReq(n, ns,(global::PwkApi.com.conlog.val.phb.TestBreakerReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TestDisplayReq)) {
                    Write171_TestDisplayReq(n, ns,(global::PwkApi.com.conlog.val.phb.TestDisplayReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DispVerReq)) {
                    Write170_DispVerReq(n, ns,(global::PwkApi.com.conlog.val.phb.DispVerReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MenuAccessReq)) {
                    Write169_MenuAccessReq(n, ns,(global::PwkApi.com.conlog.val.phb.MenuAccessReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DispPwrLmtReq)) {
                    Write168_DispPwrLmtReq(n, ns,(global::PwkApi.com.conlog.val.phb.DispPwrLmtReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DispTIReq)) {
                    Write167_DispTIReq(n, ns,(global::PwkApi.com.conlog.val.phb.DispTIReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DispTamperReq)) {
                    Write166_DispTamperReq(n, ns,(global::PwkApi.com.conlog.val.phb.DispTamperReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DispKRNReq)) {
                    Write165_DispKRNReq(n, ns,(global::PwkApi.com.conlog.val.phb.DispKRNReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DispRegistersReq)) {
                    Write164_DispRegistersReq(n, ns,(global::PwkApi.com.conlog.val.phb.DispRegistersReq)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write164_DispRegistersReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DispRegistersReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DispRegistersReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DispRegistersReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write165_DispKRNReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DispKRNReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DispKRNReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DispKRNReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write166_DispTamperReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DispTamperReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DispTamperReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DispTamperReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write167_DispTIReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DispTIReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DispTIReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DispTIReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write168_DispPwrLmtReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DispPwrLmtReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DispPwrLmtReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DispPwrLmtReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write169_MenuAccessReq(string n, string ns, global::PwkApi.com.conlog.val.phb.MenuAccessReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MenuAccessReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MenuAccessReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write170_DispVerReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DispVerReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DispVerReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DispVerReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write171_TestDisplayReq(string n, string ns, global::PwkApi.com.conlog.val.phb.TestDisplayReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TestDisplayReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"TestDisplayReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write172_TestBreakerReq(string n, string ns, global::PwkApi.com.conlog.val.phb.TestBreakerReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TestBreakerReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"TestBreakerReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write173_TestAllReq(string n, string ns, global::PwkApi.com.conlog.val.phb.TestAllReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TestAllReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"TestAllReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write174_TestDispenserReq(string n, string ns, global::PwkApi.com.conlog.val.phb.TestDispenserReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TestDispenserReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"TestDispenserReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write175_DispPhUnbalanceReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DispPhUnbalanceReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DispPhUnbalanceReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DispPhUnbalanceReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write176_DispConsTotReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DispConsTotReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DispConsTotReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DispConsTotReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write177_DispInstPwrReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DispInstPwrReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DispInstPwrReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DispInstPwrReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write19_MeterType(@"meterType", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterType)o.@meterType), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write141_ReprintEndBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ReprintEndBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ReprintEndBatchReq)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ReprintEndBankingBatchReq)) {
                    Write140_ReprintEndBankingBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.ReprintEndBankingBatchReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ReprintEndSalesBatchReq)) {
                    Write139_ReprintEndSalesBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.ReprintEndSalesBatchReq)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ReprintEndShiftBatchReq)) {
                    Write138_ReprintEndShiftBatchReq(n, ns,(global::PwkApi.com.conlog.val.phb.ReprintEndShiftBatchReq)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write138_ReprintEndShiftBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ReprintEndShiftBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ReprintEndShiftBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ReprintEndShiftBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteElementString(@"seqNo", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@seqNo));
            WriteEndElement(o);
        }

        void Write139_ReprintEndSalesBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ReprintEndSalesBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ReprintEndSalesBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ReprintEndSalesBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteElementString(@"seqNo", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@seqNo));
            if (((global::System.Boolean)o.@all) != true) {
                WriteElementStringRaw(@"all", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@all)));
            }
            WriteEndElement(o);
        }

        void Write140_ReprintEndBankingBatchReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ReprintEndBankingBatchReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ReprintEndBankingBatchReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ReprintEndBankingBatchReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteElementString(@"seqNo", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@seqNo));
            if (((global::System.Boolean)o.@all) != true) {
                WriteElementStringRaw(@"all", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@all)));
            }
            WriteEndElement(o);
        }

        void Write147_ReprintDepositReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ReprintDepositReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ReprintDepositReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ReprintDepositReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write136_DepositReq(string n, string ns, global::PwkApi.com.conlog.val.phb.DepositReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DepositReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DepositReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write137_VendorStatementReq(string n, string ns, global::PwkApi.com.conlog.val.phb.VendorStatementReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.VendorStatementReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"VendorStatementReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            WriteEndElement(o);
        }

        void Write179_UpdateMeterKeyReq(string n, string ns, global::PwkApi.com.conlog.val.phb.UpdateMeterKeyReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.UpdateMeterKeyReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"UpdateMeterKeyReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write18_MeterConfig(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MeterConfig)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write91_CustReportFaultReq(string n, string ns, global::PwkApi.com.conlog.val.phb.CustReportFaultReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CustReportFaultReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CustReportFaultReq", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write63_CustDetail(@"custDetail", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.CustDetail)o.@custDetail), false, false);
            Write90_CustFaultReport(@"custFaultReport", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.CustFaultReport)o.@custFaultReport), false, false);
            WriteEndElement(o);
        }

        void Write90_CustFaultReport(string n, string ns, global::PwkApi.com.conlog.val.phb.CustFaultReport o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CustFaultReport)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.NetworkFaultReport)) {
                    Write89_NetworkFaultReport(n, ns,(global::PwkApi.com.conlog.val.phb.NetworkFaultReport)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterFaultReport)) {
                    Write86_MeterFaultReport(n, ns,(global::PwkApi.com.conlog.val.phb.MeterFaultReport)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DeviceFault)) {
                    Write87_DeviceFault(n, ns,(global::PwkApi.com.conlog.val.phb.DeviceFault)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.NoTrip)) {
                    Write88_NoTrip(n, ns,(global::PwkApi.com.conlog.val.phb.NoTrip)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.KeepsTripping)) {
                    Write85_KeepsTripping(n, ns,(global::PwkApi.com.conlog.val.phb.KeepsTripping)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TokensNotWorking)) {
                    Write84_TokensNotWorking(n, ns,(global::PwkApi.com.conlog.val.phb.TokensNotWorking)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.SeriousBoxDamage)) {
                    Write83_SeriousBoxDamage(n, ns,(global::PwkApi.com.conlog.val.phb.SeriousBoxDamage)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.FireWaterDamage)) {
                    Write82_FireWaterDamage(n, ns,(global::PwkApi.com.conlog.val.phb.FireWaterDamage)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterDead)) {
                    Write81_MeterDead(n, ns,(global::PwkApi.com.conlog.val.phb.MeterDead)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DisplayLightsButtons)) {
                    Write80_DisplayLightsButtons(n, ns,(global::PwkApi.com.conlog.val.phb.DisplayLightsButtons)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DataFault)) {
                    Write74_DataFault(n, ns,(global::PwkApi.com.conlog.val.phb.DataFault)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.RecordMissing)) {
                    Write79_RecordMissing(n, ns,(global::PwkApi.com.conlog.val.phb.RecordMissing)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.IncorrectSGC)) {
                    Write73_IncorrectSGC(n, ns,(global::PwkApi.com.conlog.val.phb.IncorrectSGC)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.IncorrectTI)) {
                    Write72_IncorrectTI(n, ns,(global::PwkApi.com.conlog.val.phb.IncorrectTI)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CustFaultReport", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            WriteEndElement(o);
        }

        void Write72_IncorrectTI(string n, string ns, global::PwkApi.com.conlog.val.phb.IncorrectTI o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.IncorrectTI)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"IncorrectTI", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            WriteEndElement(o);
        }

        void Write73_IncorrectSGC(string n, string ns, global::PwkApi.com.conlog.val.phb.IncorrectSGC o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.IncorrectSGC)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"IncorrectSGC", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            WriteEndElement(o);
        }

        void Write79_RecordMissing(string n, string ns, global::PwkApi.com.conlog.val.phb.RecordMissing o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.RecordMissing)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"RecordMissing", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            Write78_RecordMissingReason(@"reason", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema", ((global::PwkApi.com.conlog.val.phb.RecordMissingReason)o.@reason), false, false);
            WriteEndElement(o);
        }

        void Write78_RecordMissingReason(string n, string ns, global::PwkApi.com.conlog.val.phb.RecordMissingReason o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.RecordMissingReason)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.NewInstallation)) {
                    Write77_NewInstallation(n, ns,(global::PwkApi.com.conlog.val.phb.NewInstallation)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ConvertedFrmConventional)) {
                    Write76_ConvertedFrmConventional(n, ns,(global::PwkApi.com.conlog.val.phb.ConvertedFrmConventional)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterChangedOut)) {
                    Write75_MeterChangedOut(n, ns,(global::PwkApi.com.conlog.val.phb.MeterChangedOut)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write75_MeterChangedOut(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterChangedOut o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterChangedOut)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MeterChangedOut", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteEndElement(o);
        }

        void Write76_ConvertedFrmConventional(string n, string ns, global::PwkApi.com.conlog.val.phb.ConvertedFrmConventional o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ConvertedFrmConventional)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ConvertedFrmConventional", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteEndElement(o);
        }

        void Write77_NewInstallation(string n, string ns, global::PwkApi.com.conlog.val.phb.NewInstallation o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.NewInstallation)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"NewInstallation", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteEndElement(o);
        }

        void Write74_DataFault(string n, string ns, global::PwkApi.com.conlog.val.phb.DataFault o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DataFault)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.RecordMissing)) {
                    Write79_RecordMissing(n, ns,(global::PwkApi.com.conlog.val.phb.RecordMissing)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.IncorrectSGC)) {
                    Write73_IncorrectSGC(n, ns,(global::PwkApi.com.conlog.val.phb.IncorrectSGC)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.IncorrectTI)) {
                    Write72_IncorrectTI(n, ns,(global::PwkApi.com.conlog.val.phb.IncorrectTI)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write80_DisplayLightsButtons(string n, string ns, global::PwkApi.com.conlog.val.phb.DisplayLightsButtons o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DisplayLightsButtons)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DisplayLightsButtons", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            WriteEndElement(o);
        }

        void Write81_MeterDead(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterDead o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterDead)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MeterDead", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            WriteEndElement(o);
        }

        void Write82_FireWaterDamage(string n, string ns, global::PwkApi.com.conlog.val.phb.FireWaterDamage o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.FireWaterDamage)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"FireWaterDamage", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            WriteEndElement(o);
        }

        void Write83_SeriousBoxDamage(string n, string ns, global::PwkApi.com.conlog.val.phb.SeriousBoxDamage o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.SeriousBoxDamage)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"SeriousBoxDamage", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            WriteEndElement(o);
        }

        void Write84_TokensNotWorking(string n, string ns, global::PwkApi.com.conlog.val.phb.TokensNotWorking o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.TokensNotWorking)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"TokensNotWorking", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            WriteEndElement(o);
        }

        void Write85_KeepsTripping(string n, string ns, global::PwkApi.com.conlog.val.phb.KeepsTripping o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.KeepsTripping)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"KeepsTripping", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            WriteEndElement(o);
        }

        void Write88_NoTrip(string n, string ns, global::PwkApi.com.conlog.val.phb.NoTrip o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.NoTrip)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"NoTrip", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            WriteEndElement(o);
        }

        void Write87_DeviceFault(string n, string ns, global::PwkApi.com.conlog.val.phb.DeviceFault o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DeviceFault)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.NoTrip)) {
                    Write88_NoTrip(n, ns,(global::PwkApi.com.conlog.val.phb.NoTrip)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.KeepsTripping)) {
                    Write85_KeepsTripping(n, ns,(global::PwkApi.com.conlog.val.phb.KeepsTripping)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TokensNotWorking)) {
                    Write84_TokensNotWorking(n, ns,(global::PwkApi.com.conlog.val.phb.TokensNotWorking)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.SeriousBoxDamage)) {
                    Write83_SeriousBoxDamage(n, ns,(global::PwkApi.com.conlog.val.phb.SeriousBoxDamage)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.FireWaterDamage)) {
                    Write82_FireWaterDamage(n, ns,(global::PwkApi.com.conlog.val.phb.FireWaterDamage)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterDead)) {
                    Write81_MeterDead(n, ns,(global::PwkApi.com.conlog.val.phb.MeterDead)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DisplayLightsButtons)) {
                    Write80_DisplayLightsButtons(n, ns,(global::PwkApi.com.conlog.val.phb.DisplayLightsButtons)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write86_MeterFaultReport(string n, string ns, global::PwkApi.com.conlog.val.phb.MeterFaultReport o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterFaultReport)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DeviceFault)) {
                    Write87_DeviceFault(n, ns,(global::PwkApi.com.conlog.val.phb.DeviceFault)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.NoTrip)) {
                    Write88_NoTrip(n, ns,(global::PwkApi.com.conlog.val.phb.NoTrip)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.KeepsTripping)) {
                    Write85_KeepsTripping(n, ns,(global::PwkApi.com.conlog.val.phb.KeepsTripping)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.TokensNotWorking)) {
                    Write84_TokensNotWorking(n, ns,(global::PwkApi.com.conlog.val.phb.TokensNotWorking)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.SeriousBoxDamage)) {
                    Write83_SeriousBoxDamage(n, ns,(global::PwkApi.com.conlog.val.phb.SeriousBoxDamage)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.FireWaterDamage)) {
                    Write82_FireWaterDamage(n, ns,(global::PwkApi.com.conlog.val.phb.FireWaterDamage)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.MeterDead)) {
                    Write81_MeterDead(n, ns,(global::PwkApi.com.conlog.val.phb.MeterDead)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DisplayLightsButtons)) {
                    Write80_DisplayLightsButtons(n, ns,(global::PwkApi.com.conlog.val.phb.DisplayLightsButtons)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DataFault)) {
                    Write74_DataFault(n, ns,(global::PwkApi.com.conlog.val.phb.DataFault)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.RecordMissing)) {
                    Write79_RecordMissing(n, ns,(global::PwkApi.com.conlog.val.phb.RecordMissing)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.IncorrectSGC)) {
                    Write73_IncorrectSGC(n, ns,(global::PwkApi.com.conlog.val.phb.IncorrectSGC)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.IncorrectTI)) {
                    Write72_IncorrectTI(n, ns,(global::PwkApi.com.conlog.val.phb.IncorrectTI)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"MeterFaultReport", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            Write71_VendIDMethod(@"meterInfo", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@meterInfo), false, false);
            WriteEndElement(o);
        }

        void Write89_NetworkFaultReport(string n, string ns, global::PwkApi.com.conlog.val.phb.NetworkFaultReport o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.NetworkFaultReport)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"NetworkFaultReport", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema", ((global::System.String)o.@desc));
            WriteEndElement(o);
        }

        void Write63_CustDetail(string n, string ns, global::PwkApi.com.conlog.val.phb.CustDetail o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CustDetail)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.CustVendDetail)) {
                    Write62_CustVendDetail(n, ns,(global::PwkApi.com.conlog.val.phb.CustVendDetail)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CustDetail", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"name", @"", ((global::System.String)o.@name));
            WriteAttribute(@"address", @"", ((global::System.String)o.@address));
            WriteAttribute(@"contactNo", @"", ((global::System.String)o.@contactNo));
            WriteAttribute(@"accNo", @"", ((global::System.String)o.@accNo));
            WriteAttribute(@"locRef", @"", ((global::System.String)o.@locRef));
            WriteEndElement(o);
        }

        void Write62_CustVendDetail(string n, string ns, global::PwkApi.com.conlog.val.phb.CustVendDetail o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CustVendDetail)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CustVendDetail", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"name", @"", ((global::System.String)o.@name));
            WriteAttribute(@"address", @"", ((global::System.String)o.@address));
            WriteAttribute(@"contactNo", @"", ((global::System.String)o.@contactNo));
            WriteAttribute(@"accNo", @"", ((global::System.String)o.@accNo));
            WriteAttribute(@"locRef", @"", ((global::System.String)o.@locRef));
            WriteAttribute(@"daysLastPurchase", @"", ((global::System.String)o.@daysLastPurchase));
            WriteEndElement(o);
        }

        void Write161_PayAccReq(string n, string ns, global::PwkApi.com.conlog.val.phb.PayAccReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.PayAccReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"PayAccReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write2_Currency(@"reqAmt", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Currency)o.@reqAmt), false, false);
            Write122_PayType(@"payType", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PayType)o.@payType), false, false);
            Write160_PayAccount(@"payAccount", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.PayAccount)o.@payAccount), false, false);
            WriteElementStringRaw(@"vendingServerId", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@vendingServerId)));
            WriteEndElement(o);
        }

        void Write160_PayAccount(string n, string ns, global::PwkApi.com.conlog.val.phb.PayAccount o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.PayAccount)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.DebtRecovery)) {
                    Write159_DebtRecovery(n, ns,(global::PwkApi.com.conlog.val.phb.DebtRecovery)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.ServiceChrg)) {
                    Write158_ServiceChrg(n, ns,(global::PwkApi.com.conlog.val.phb.ServiceChrg)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Connection)) {
                    Write157_Connection(n, ns,(global::PwkApi.com.conlog.val.phb.Connection)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Upgrade)) {
                    Write156_Upgrade(n, ns,(global::PwkApi.com.conlog.val.phb.Upgrade)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Tamper)) {
                    Write155_Tamper(n, ns,(global::PwkApi.com.conlog.val.phb.Tamper)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.Conversion)) {
                    Write154_Conversion(n, ns,(global::PwkApi.com.conlog.val.phb.Conversion)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"PayAccount", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@desc));
            Write70_IDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.IDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write70_IDMethod(string n, string ns, global::PwkApi.com.conlog.val.phb.IDMethod o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.IDMethod)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.VendIDMethod)) {
                    Write71_VendIDMethod(n, ns,(global::PwkApi.com.conlog.val.phb.VendIDMethod)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.CustIDMethod)) {
                    Write69_CustIDMethod(n, ns,(global::PwkApi.com.conlog.val.phb.CustIDMethod)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write69_CustIDMethod(string n, string ns, global::PwkApi.com.conlog.val.phb.CustIDMethod o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CustIDMethod)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CustIDMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write68_CustIdentifier(@"custIdentifier", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.CustIdentifier)o.@custIdentifier), false, false);
            WriteEndElement(o);
        }

        void Write68_CustIdentifier(string n, string ns, global::PwkApi.com.conlog.val.phb.CustIdentifier o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CustIdentifier)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.CustAddress)) {
                    Write67_CustAddress(n, ns,(global::PwkApi.com.conlog.val.phb.CustAddress)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.CustIDNumber)) {
                    Write66_CustIDNumber(n, ns,(global::PwkApi.com.conlog.val.phb.CustIDNumber)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.CustAccountNo)) {
                    Write65_CustAccountNo(n, ns,(global::PwkApi.com.conlog.val.phb.CustAccountNo)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.CustName)) {
                    Write64_CustName(n, ns,(global::PwkApi.com.conlog.val.phb.CustName)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write64_CustName(string n, string ns, global::PwkApi.com.conlog.val.phb.CustName o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CustName)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CustName", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteElementString(@"name", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@name));
            WriteEndElement(o);
        }

        void Write65_CustAccountNo(string n, string ns, global::PwkApi.com.conlog.val.phb.CustAccountNo o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CustAccountNo)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CustAccountNo", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"accNo", @"", ((global::System.String)o.@accNo));
            WriteElementString(@"organisation", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@organisation));
            WriteEndElement(o);
        }

        void Write66_CustIDNumber(string n, string ns, global::PwkApi.com.conlog.val.phb.CustIDNumber o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CustIDNumber)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CustIDNumber", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteAttribute(@"idNo", @"", ((global::System.String)o.@idNo));
            WriteEndElement(o);
        }

        void Write67_CustAddress(string n, string ns, global::PwkApi.com.conlog.val.phb.CustAddress o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CustAddress)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CustAddress", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            WriteElementString(@"address", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::System.String)o.@address));
            WriteEndElement(o);
        }

        void Write154_Conversion(string n, string ns, global::PwkApi.com.conlog.val.phb.Conversion o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Conversion)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Conversion", @"http://www.eskom.co.za/xmlvend/revenue-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@desc));
            Write70_IDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.IDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write155_Tamper(string n, string ns, global::PwkApi.com.conlog.val.phb.Tamper o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Tamper)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Tamper", @"http://www.eskom.co.za/xmlvend/revenue-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@desc));
            Write70_IDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.IDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write156_Upgrade(string n, string ns, global::PwkApi.com.conlog.val.phb.Upgrade o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Upgrade)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Upgrade", @"http://www.eskom.co.za/xmlvend/revenue-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@desc));
            Write70_IDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.IDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write157_Connection(string n, string ns, global::PwkApi.com.conlog.val.phb.Connection o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Connection)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"Connection", @"http://www.eskom.co.za/xmlvend/revenue-ext/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@desc));
            Write70_IDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.IDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write158_ServiceChrg(string n, string ns, global::PwkApi.com.conlog.val.phb.ServiceChrg o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ServiceChrg)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ServiceChrg", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@desc));
            Write70_IDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.IDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write159_DebtRecovery(string n, string ns, global::PwkApi.com.conlog.val.phb.DebtRecovery o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.DebtRecovery)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"DebtRecovery", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            WriteElementString(@"desc", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@desc));
            Write70_IDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.IDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write153_VerifyReq(string n, string ns, global::PwkApi.com.conlog.val.phb.VerifyReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.VerifyReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"VerifyReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write23_Token(@"token", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Token)o.@token), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write23_Token(string n, string ns, global::PwkApi.com.conlog.val.phb.Token o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.Token)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.STS1Token)) {
                    Write21_STS1Token(n, ns,(global::PwkApi.com.conlog.val.phb.STS1Token)o, isNullable, true);
                    return;
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.KCToken)) {
                    Write22_KCToken(n, ns,(global::PwkApi.com.conlog.val.phb.KCToken)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
        }

        void Write22_KCToken(string n, string ns, global::PwkApi.com.conlog.val.phb.KCToken o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.KCToken)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"KCToken", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            Write21_STS1Token(@"set1stMeterKey", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.STS1Token)o.@set1stMeterKey), false, false);
            Write21_STS1Token(@"set2ndMeterKey", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.STS1Token)o.@set2ndMeterKey), false, false);
            WriteEndElement(o);
        }

        void Write109_CancelVendReq(string n, string ns, global::PwkApi.com.conlog.val.phb.CancelVendReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.CancelVendReq)) {
                }
                else if (t == typeof(global::PwkApi.com.conlog.val.phb.CancelPendingReq)) {
                    Write108_CancelPendingReq(n, ns,(global::PwkApi.com.conlog.val.phb.CancelPendingReq)o, isNullable, true);
                    return;
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"CancelVendReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write45_Resource(@"resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.Resource)o.@resource), false, false);
            Write71_VendIDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.VendIDMethod)o.@idMethod), false, false);
            Write99_TokenDeliveryMethod(@"tokenDeliveryMethod", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.TokenDeliveryMethod)o.@tokenDeliveryMethod), false, false);
            WriteElementString(@"TransactionNumber", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@TransactionNumber));
            Write57_EANDeviceID(@"CDUID", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.EANDeviceID)o.@CDUID), false, false);
            WriteElementString(@"CancellationReasonCode", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@CancellationReasonCode));
            Write21_STS1Token(@"token", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.STS1Token)o.@token), false, false);
            WriteElementString(@"DocumentNumber", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@DocumentNumber));
            WriteElementStringRaw(@"AutoCancel", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@AutoCancel)));
            WriteElementString(@"OriginalUniqueNumber", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::System.String)o.@OriginalUniqueNumber));
            WriteEndElement(o);
        }

        void Write162_ReprintReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ReprintReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ReprintReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ReprintReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write70_IDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.IDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        void Write163_ConfirmCustomerReq(string n, string ns, global::PwkApi.com.conlog.val.phb.ConfirmCustomerReq o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::PwkApi.com.conlog.val.phb.ConfirmCustomerReq)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(@"ConfirmCustomerReq", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            Write59_DeviceID(@"clientID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@clientID), false, false);
            Write59_DeviceID(@"terminalID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.DeviceID)o.@terminalID), false, false);
            Write60_MsgID(@"msgID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.MsgID)o.@msgID), false, false);
            Write61_AuthCred(@"authCred", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema", ((global::PwkApi.com.conlog.val.phb.AuthCred)o.@authCred), false, false);
            Write70_IDMethod(@"idMethod", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema", ((global::PwkApi.com.conlog.val.phb.IDMethod)o.@idMethod), false, false);
            WriteEndElement(o);
        }

        protected override void InitCallbacks() {
        }
    }

    public class XmlSerializationReaderXMLVendService : System.Xml.Serialization.XmlSerializationReader {

        public object[] Read359_ConfirmCustomerRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations0 = 0;
            int readerCount0 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id1_confirmCustomerResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read358_ConfirmCustomerResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:confirmCustomerResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:confirmCustomerResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations0, ref readerCount0);
            }
            return p;
        }

        public object[] Read360_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations1 = 0;
            int readerCount1 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations1, ref readerCount1);
            }
            return p;
        }

        public object[] Read361_ReprintRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations2 = 0;
            int readerCount2 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id3_reprintResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read255_ReprintResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:reprintResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:reprintResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations2, ref readerCount2);
            }
            return p;
        }

        public object[] Read362_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations3 = 0;
            int readerCount3 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations3, ref readerCount3);
            }
            return p;
        }

        public object[] Read363_CancelVendRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations4 = 0;
            int readerCount4 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id4_cancelVendResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read254_CancelVendResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:cancelVendResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:cancelVendResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations4, ref readerCount4);
            }
            return p;
        }

        public object[] Read364_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations5 = 0;
            int readerCount5 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations5, ref readerCount5);
            }
            return p;
        }

        public object[] Read365_VerifyRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations6 = 0;
            int readerCount6 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id5_verifyResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read272_VerifyResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:verifyResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:verifyResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations6, ref readerCount6);
            }
            return p;
        }

        public object[] Read366_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations7 = 0;
            int readerCount7 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations7, ref readerCount7);
            }
            return p;
        }

        public object[] Read367_PayAccountRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations8 = 0;
            int readerCount8 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id6_payAccResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read251_PayAccResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:payAccResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:payAccResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations8, ref readerCount8);
            }
            return p;
        }

        public object[] Read368_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations9 = 0;
            int readerCount9 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations9, ref readerCount9);
            }
            return p;
        }

        public object[] Read369_CustReportFaultRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations10 = 0;
            int readerCount10 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id7_custReportFaultResp && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        p[0] = Read350_CustReportFaultResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:custReportFaultResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:custReportFaultResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations10, ref readerCount10);
            }
            return p;
        }

        public object[] Read370_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations11 = 0;
            int readerCount11 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations11, ref readerCount11);
            }
            return p;
        }

        public object[] Read371_UpdateMeterKeyRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations12 = 0;
            int readerCount12 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id9_updateMeterKeyResp && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        p[0] = Read264_UpdateMeterKeyResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:updateMeterKeyResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:updateMeterKeyResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations12, ref readerCount12);
            }
            return p;
        }

        public object[] Read372_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations13 = 0;
            int readerCount13 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations13, ref readerCount13);
            }
            return p;
        }

        public object[] Read373_VendorStatementRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations14 = 0;
            int readerCount14 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id10_vendorStatementResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read342_VendorStatementResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:vendorStatementResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:vendorStatementResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations14, ref readerCount14);
            }
            return p;
        }

        public object[] Read374_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations15 = 0;
            int readerCount15 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations15, ref readerCount15);
            }
            return p;
        }

        public object[] Read375_DepositSlipRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations16 = 0;
            int readerCount16 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id11_depositResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read332_DepositResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:depositResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:depositResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations16, ref readerCount16);
            }
            return p;
        }

        public object[] Read376_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations17 = 0;
            int readerCount17 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations17, ref readerCount17);
            }
            return p;
        }

        public object[] Read377_Item() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations18 = 0;
            int readerCount18 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id12_reprintDepResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read333_ReprintDepositResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:reprintDepResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:reprintDepResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations18, ref readerCount18);
            }
            return p;
        }

        public object[] Read378_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations19 = 0;
            int readerCount19 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations19, ref readerCount19);
            }
            return p;
        }

        public object[] Read379_ReprintEndBatchRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations20 = 0;
            int readerCount20 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id13_reprintEndBatchResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read335_ReprintEndBatchResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:reprintEndBatchResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:reprintEndBatchResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations20, ref readerCount20);
            }
            return p;
        }

        public object[] Read380_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations21 = 0;
            int readerCount21 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations21, ref readerCount21);
            }
            return p;
        }

        public object[] Read381_Item() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations22 = 0;
            int readerCount22 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id14_nonMeterSpecificEngResp && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        p[0] = Read212_NonMeterSpecificEngResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:nonMeterSpecificEngResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:nonMeterSpecificEngResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations22, ref readerCount22);
            }
            return p;
        }

        public object[] Read382_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations23 = 0;
            int readerCount23 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations23, ref readerCount23);
            }
            return p;
        }

        public object[] Read383_Item() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations24 = 0;
            int readerCount24 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id15_meterSpecificEngResp && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        p[0] = Read263_MeterSpecificEngResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterSpecificEngResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterSpecificEngResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations24, ref readerCount24);
            }
            return p;
        }

        public object[] Read384_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations25 = 0;
            int readerCount25 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations25, ref readerCount25);
            }
            return p;
        }

        public object[] Read385_AdviceRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations26 = 0;
            int readerCount26 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id16_adviceResp && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        p[0] = Read331_AdviceResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:adviceResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:adviceResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations26, ref readerCount26);
            }
            return p;
        }

        public object[] Read386_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations27 = 0;
            int readerCount27 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations27, ref readerCount27);
            }
            return p;
        }

        public object[] Read387_StartBatchRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations28 = 0;
            int readerCount28 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id18_startBatchResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read348_StartBatchResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:startBatchResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:startBatchResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations28, ref readerCount28);
            }
            return p;
        }

        public object[] Read388_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations29 = 0;
            int readerCount29 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations29, ref readerCount29);
            }
            return p;
        }

        public object[] Read389_EndBatchRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations30 = 0;
            int readerCount30 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id19_endBatchResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read334_EndBatchResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:endBatchResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:endBatchResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations30, ref readerCount30);
            }
            return p;
        }

        public object[] Read390_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations31 = 0;
            int readerCount31 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations31, ref readerCount31);
            }
            return p;
        }

        public object[] Read391_TotalBatchRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations32 = 0;
            int readerCount32 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id20_totalBatchResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read242_TotalBatchResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:totalBatchResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:totalBatchResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations32, ref readerCount32);
            }
            return p;
        }

        public object[] Read392_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations33 = 0;
            int readerCount33 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations33, ref readerCount33);
            }
            return p;
        }

        public object[] Read393_Item() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations34 = 0;
            int readerCount34 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id21_getVendingServerStateResp && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        p[0] = Read278_GetVendingServerStateResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:getVendingServerStateResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:getVendingServerStateResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations34, ref readerCount34);
            }
            return p;
        }

        public object[] Read394_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations35 = 0;
            int readerCount35 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations35, ref readerCount35);
            }
            return p;
        }

        public object[] Read395_MakeMerchantDepositResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations36 = 0;
            int readerCount36 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id22_makeMerchantDeposit && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        p[0] = Read279_MakeMerchantDepositResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:makeMerchantDeposit");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:makeMerchantDeposit");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations36, ref readerCount36);
            }
            return p;
        }

        public object[] Read396_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations37 = 0;
            int readerCount37 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations37, ref readerCount37);
            }
            return p;
        }

        public object[] Read397_ReverseMerchantDepositResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations38 = 0;
            int readerCount38 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id23_reverseMerchantDeposit && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        p[0] = Read343_ReverseMerchantDepositResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reverseMerchantDeposit");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reverseMerchantDeposit");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations38, ref readerCount38);
            }
            return p;
        }

        public object[] Read398_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations39 = 0;
            int readerCount39 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations39, ref readerCount39);
            }
            return p;
        }

        public object[] Read399_ConfirmMeterRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations40 = 0;
            int readerCount40 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id24_confirmMeterResp && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        p[0] = Read352_ConfirmMeterResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:confirmMeterResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:confirmMeterResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations40, ref readerCount40);
            }
            return p;
        }

        public object[] Read400_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations41 = 0;
            int readerCount41 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations41, ref readerCount41);
            }
            return p;
        }

        public object[] Read401_CreditVendRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations42 = 0;
            int readerCount42 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id25_creditVendResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read249_CreditVendResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations42, ref readerCount42);
            }
            return p;
        }

        public object[] Read402_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations43 = 0;
            int readerCount43 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations43, ref readerCount43);
            }
            return p;
        }

        public object[] Read403_FBERequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations44 = 0;
            int readerCount44 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id26_fbeResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read250_FBEResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:fbeResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:fbeResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations44, ref readerCount44);
            }
            return p;
        }

        public object[] Read404_FBERequestResponseOutHeaders() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations45 = 0;
            int readerCount45 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations45, ref readerCount45);
            }
            return p;
        }

        public object[] Read405_TrialCreditVendRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations46 = 0;
            int readerCount46 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id27_trialCreditVendResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read248_TrialCreditVendResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:trialCreditVendResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:trialCreditVendResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations46, ref readerCount46);
            }
            return p;
        }

        public object[] Read406_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations47 = 0;
            int readerCount47 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations47, ref readerCount47);
            }
            return p;
        }

        public object[] Read407_Item() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations48 = 0;
            int readerCount48 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id28_meterCreditTransferResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read252_MeterCreditTransferResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:meterCreditTransferResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:meterCreditTransferResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations48, ref readerCount48);
            }
            return p;
        }

        public object[] Read408_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations49 = 0;
            int readerCount49 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations49, ref readerCount49);
            }
            return p;
        }

        public object[] Read409_FreeIssueRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations50 = 0;
            int readerCount50 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id29_freeIssueResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read247_FreeIssueResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:freeIssueResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:freeIssueResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations50, ref readerCount50);
            }
            return p;
        }

        public object[] Read410_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations51 = 0;
            int readerCount51 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations51, ref readerCount51);
            }
            return p;
        }

        public object[] Read411_CancelPendingRequestResponse() {
            Reader.MoveToContent();
            object[] p = new object[1];
            bool[] paramsRead = new bool[1];
            Reader.MoveToContent();
            int whileIterations52 = 0;
            int readerCount52 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id30_cancelPendingResp && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        p[0] = Read253_CancelPendingResp(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:cancelPendingResp");
                    }
                }
                else {
                    UnknownNode((object)p, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:cancelPendingResp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations52, ref readerCount52);
            }
            return p;
        }

        public object[] Read412_Item() {
            Reader.MoveToContent();
            object[] p = new object[0];
            bool[] paramsRead = new bool[0];
            Reader.MoveToContent();
            int whileIterations53 = 0;
            int readerCount53 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)p, @"");
                }
                else {
                    UnknownNode((object)p, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations53, ref readerCount53);
            }
            return p;
        }

        global::PwkApi.com.conlog.val.phb.CancelPendingResp Read253_CancelPendingResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id31_CancelPendingResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CancelPendingResp o;
            o = new global::PwkApi.com.conlog.val.phb.CancelPendingResp();
            bool[] paramsRead = new bool[14];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[13] && ((object) Reader.LocalName == (object)id32_cancelRefNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@cancelRefNo = Reader.Value;
                    paramsRead[13] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":cancelRefNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations54 = 0;
            int readerCount54 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id46_origTx && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@origTx = Read51_CreditVendTx(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:origTx");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:origTx");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations54, ref readerCount54);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CreditVendTx Read51_CreditVendTx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id47_CreditVendTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CreditVendTx o;
            o = new global::PwkApi.com.conlog.val.phb.CreditVendTx();
            global::PwkApi.com.conlog.val.phb.Tax[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[6];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id48_receiptNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@receiptNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":receiptNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations55 = 0;
            int readerCount55 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id50_tax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.Tax[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax));a_1[ca_1++] = Read4_Tax(false, true);
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id51_creditTokenIssue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@creditTokenIssue = Read46_CreditTokenIssue(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id52_tariff && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tariff = Read5_Tariff(false, true);
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id53_tariffBreakdown && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tariffBreakdown = Read50_TariffBreakdown(false, true);
                        paramsRead[5] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditTokenIssue, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariffBreakdown");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditTokenIssue, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariffBreakdown");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations55, ref readerCount55);
            }
            o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TariffBreakdown Read50_TariffBreakdown(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id54_TariffBreakdown && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id55_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id56_StraightTariffBreakdown && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id55_Item))
                return Read49_StraightTariffBreakdown(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id57_StepTariffBreakdown && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id55_Item))
                return Read48_StepTariffBreakdown(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"TariffBreakdown", @"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.StepTariffBreakdown Read48_StepTariffBreakdown(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id57_StepTariffBreakdown && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id55_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.StepTariffBreakdown o;
            o = new global::PwkApi.com.conlog.val.phb.StepTariffBreakdown();
            global::PwkApi.com.conlog.val.phb.Step[] a_0 = null;
            int ca_0 = 0;
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations56 = 0;
            int readerCount56 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id58_steps && (object) Reader.NamespaceURI == (object)id55_Item)) {
                        if (!ReadNull()) {
                            global::PwkApi.com.conlog.val.phb.Step[] a_0_0 = null;
                            int ca_0_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations57 = 0;
                                int readerCount57 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id59_Step && (object) Reader.NamespaceURI == (object)id55_Item)) {
                                            a_0_0 = (global::PwkApi.com.conlog.val.phb.Step[])EnsureArrayIndex(a_0_0, ca_0_0, typeof(global::PwkApi.com.conlog.val.phb.Step));a_0_0[ca_0_0++] = Read47_Step(true, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema:Step");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema:Step");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations57, ref readerCount57);
                                }
                            ReadEndElement();
                            }
                            o.@steps = (global::PwkApi.com.conlog.val.phb.Step[])ShrinkArray(a_0_0, ca_0_0, typeof(global::PwkApi.com.conlog.val.phb.Step), false);
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema:steps");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema:steps");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations56, ref readerCount56);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Step Read47_Step(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id59_Step && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id55_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.Step o;
            o = new global::PwkApi.com.conlog.val.phb.Step();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations58 = 0;
            int readerCount58 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id55_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id61_rate && (object) Reader.NamespaceURI == (object)id55_Item)) {
                        o.@rate = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema:units, http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema:rate");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema:units, http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema:rate");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations58, ref readerCount58);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Currency Read2_Currency(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id62_Currency && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.Currency o;
            o = new global::PwkApi.com.conlog.val.phb.Currency();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id63_value && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@value = System.Xml.XmlConvert.ToDecimal(Reader.Value);
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id64_symbol && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@symbol = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":value, :symbol");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations59 = 0;
            int readerCount59 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations59, ref readerCount59);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Units Read39_Units(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id65_Units && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.Units o;
            o = new global::PwkApi.com.conlog.val.phb.Units();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id63_value && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@value = System.Xml.XmlConvert.ToDecimal(Reader.Value);
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id66_siUnit && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@siUnit = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":value, :siUnit");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations60 = 0;
            int readerCount60 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations60, ref readerCount60);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.StraightTariffBreakdown Read49_StraightTariffBreakdown(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id56_StraightTariffBreakdown && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id55_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.StraightTariffBreakdown o;
            o = new global::PwkApi.com.conlog.val.phb.StraightTariffBreakdown();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations61 = 0;
            int readerCount61 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id61_rate && (object) Reader.NamespaceURI == (object)id55_Item)) {
                        o.@rate = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema:rate");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema:rate");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations61, ref readerCount61);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Tariff Read5_Tariff(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id67_Tariff && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.Tariff o;
            o = new global::PwkApi.com.conlog.val.phb.Tariff();
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations62 = 0;
            int readerCount62 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id68_name && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@name = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id70_TariffSetID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@TariffSetID = Reader.ReadElementString();
                        }
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id71_SGC && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@SGC = Reader.ReadElementString();
                        }
                        paramsRead[3] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:name, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:TariffSetID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:SGC");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:name, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:TariffSetID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:SGC");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations62, ref readerCount62);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CreditTokenIssue Read46_CreditTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id72_CreditTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id73_SaleCredTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read37_SaleCredTokenIssue(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id74_FreeCredTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read36_FreeCredTokenIssue(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id75_MCTCredTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read35_MCTCredTokenIssue(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id76_FBECredTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read34_FBECredTokenIssue(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id77_OverRecCredTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read33_OverRecCredTokenIssue(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CreditTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.CreditTokenIssue();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations63 = 0;
            int readerCount63 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id81_resource && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@resource = Read45_Resource(false, true);
                        paramsRead[4] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations63, ref readerCount63);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Resource Read45_Resource(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id82_Resource && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id83_Gas && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read44_Gas(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id84_ConnectionTime && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read43_ConnectionTime(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id85_Electricity && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read42_Electricity(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id86_CurrencyResource && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read41_CurrencyResource(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id87_Water && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read40_Water(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"Resource", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.Water Read40_Water(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id87_Water && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.Water o;
            o = new global::PwkApi.com.conlog.val.phb.Water();
            bool[] paramsRead = new bool[0];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations64 = 0;
            int readerCount64 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations64, ref readerCount64);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CurrencyResource Read41_CurrencyResource(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id86_CurrencyResource && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CurrencyResource o;
            o = new global::PwkApi.com.conlog.val.phb.CurrencyResource();
            bool[] paramsRead = new bool[0];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations65 = 0;
            int readerCount65 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations65, ref readerCount65);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Electricity Read42_Electricity(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id85_Electricity && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.Electricity o;
            o = new global::PwkApi.com.conlog.val.phb.Electricity();
            bool[] paramsRead = new bool[0];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations66 = 0;
            int readerCount66 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations66, ref readerCount66);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConnectionTime Read43_ConnectionTime(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id84_ConnectionTime && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConnectionTime o;
            o = new global::PwkApi.com.conlog.val.phb.ConnectionTime();
            bool[] paramsRead = new bool[0];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations67 = 0;
            int readerCount67 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations67, ref readerCount67);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Gas Read44_Gas(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id83_Gas && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.Gas o;
            o = new global::PwkApi.com.conlog.val.phb.Gas();
            bool[] paramsRead = new bool[0];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations68 = 0;
            int readerCount68 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations68, ref readerCount68);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Token Read23_Token(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id88_Token && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id89_STS1Token && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read21_STS1Token(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id90_KCToken && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read22_KCToken(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"Token", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.KCToken Read22_KCToken(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id90_KCToken && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.KCToken o;
            o = new global::PwkApi.com.conlog.val.phb.KCToken();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations69 = 0;
            int readerCount69 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id91_set1stMeterKey && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@set1stMeterKey = Read21_STS1Token(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id92_set2ndMeterKey && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@set2ndMeterKey = Read21_STS1Token(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:set1stMeterKey, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:set2ndMeterKey");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:set1stMeterKey, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:set2ndMeterKey");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations69, ref readerCount69);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.STS1Token Read21_STS1Token(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id89_STS1Token && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.STS1Token o;
            o = new global::PwkApi.com.conlog.val.phb.STS1Token();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations70 = 0;
            int readerCount70 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id93_stsCipher && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@stsCipher = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:stsCipher");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:stsCipher");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations70, ref readerCount70);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterDetail Read20_MeterDetail(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id94_MeterDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id95_ExtMeterDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read14_ExtMeterDetail(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterDetail o;
            o = new global::PwkApi.com.conlog.val.phb.MeterDetail();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id96_msno && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@msno = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id97_sgc && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@sgc = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id98_krn && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@krn = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id99_ti && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@ti = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":msno, :sgc, :krn, :ti");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations71 = 0;
            int readerCount71 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterType");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterType");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations71, ref readerCount71);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterType Read19_MeterType(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id101_MeterType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterType o;
            o = new global::PwkApi.com.conlog.val.phb.MeterType();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id102_at && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@at = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id103_tt && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@tt = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":at, :tt");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations72 = 0;
            int readerCount72 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations72, ref readerCount72);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ExtMeterDetail Read14_ExtMeterDetail(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id95_ExtMeterDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ExtMeterDetail o;
            o = new global::PwkApi.com.conlog.val.phb.ExtMeterDetail();
            bool[] paramsRead = new bool[7];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id96_msno && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@msno = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id97_sgc && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@sgc = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id98_krn && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@krn = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id99_ti && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@ti = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id104_useSTT && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@useSTT = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    o.@useSTTSpecified = true;
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id105_track2Data && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@track2Data = Reader.Value;
                    paramsRead[6] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":msno, :sgc, :krn, :ti, :useSTT, :track2Data");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations73 = 0;
            int readerCount73 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterType");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterType");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations73, ref readerCount73);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.OverRecCredTokenIssue Read33_OverRecCredTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id77_OverRecCredTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.OverRecCredTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.OverRecCredTokenIssue();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations74 = 0;
            int readerCount74 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id81_resource && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@resource = Read45_Resource(false, true);
                        paramsRead[4] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations74, ref readerCount74);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.FBECredTokenIssue Read34_FBECredTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id76_FBECredTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.FBECredTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.FBECredTokenIssue();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations75 = 0;
            int readerCount75 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id81_resource && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@resource = Read45_Resource(false, true);
                        paramsRead[4] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations75, ref readerCount75);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MCTCredTokenIssue Read35_MCTCredTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id75_MCTCredTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MCTCredTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.MCTCredTokenIssue();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations76 = 0;
            int readerCount76 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id81_resource && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@resource = Read45_Resource(false, true);
                        paramsRead[4] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations76, ref readerCount76);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.FreeCredTokenIssue Read36_FreeCredTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id74_FreeCredTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.FreeCredTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.FreeCredTokenIssue();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations77 = 0;
            int readerCount77 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id81_resource && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@resource = Read45_Resource(false, true);
                        paramsRead[4] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations77, ref readerCount77);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.SaleCredTokenIssue Read37_SaleCredTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id73_SaleCredTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.SaleCredTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.SaleCredTokenIssue();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations78 = 0;
            int readerCount78 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id81_resource && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@resource = Read45_Resource(false, true);
                        paramsRead[4] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:units, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:resource");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations78, ref readerCount78);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Tax Read4_Tax(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id106_Tax && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id107_VAT && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read3_VAT(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"Tax", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.VAT Read3_VAT(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id107_VAT && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.VAT o;
            o = new global::PwkApi.com.conlog.val.phb.VAT();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id61_rate && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@rate = System.Xml.XmlConvert.ToDecimal(Reader.Value);
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":rate");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations79 = 0;
            int readerCount79 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations79, ref readerCount79);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CustVendDetail Read62_CustVendDetail(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id108_CustVendDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CustVendDetail o;
            o = new global::PwkApi.com.conlog.val.phb.CustVendDetail();
            bool[] paramsRead = new bool[6];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id68_name && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@name = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id109_address && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@address = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id110_contactNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@contactNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@accNo = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id112_locRef && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@locRef = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id113_daysLastPurchase && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@daysLastPurchase = CollapseWhitespace(Reader.Value);
                    paramsRead[5] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":name, :address, :contactNo, :accNo, :locRef, :daysLastPurchase");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations80 = 0;
            int readerCount80 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations80, ref readerCount80);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.VendorDetail Read246_VendorDetail(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id114_VendorDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.VendorDetail o;
            o = new global::PwkApi.com.conlog.val.phb.VendorDetail();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id68_name && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@name = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id109_address && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@address = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":name, :address");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations81 = 0;
            int readerCount81 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations81, ref readerCount81);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ClientStatus Read245_ClientStatus(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id115_ClientStatus && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ClientStatus o;
            o = new global::PwkApi.com.conlog.val.phb.ClientStatus();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations82 = 0;
            int readerCount82 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id116_availCredit && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@availCredit = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id117_batchStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@batchStatus = Read244_BatchStatus(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:availCredit, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:batchStatus");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:availCredit, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:batchStatus");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations82, ref readerCount82);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.BatchStatus Read244_BatchStatus(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id118_BatchStatus && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.BatchStatus o;
            o = new global::PwkApi.com.conlog.val.phb.BatchStatus();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id119_banking && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@banking = Read243_BatchStatusType(Reader.Value);
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id120_sales && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@sales = Read243_BatchStatusType(Reader.Value);
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id121_shift && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@shift = Read243_BatchStatusType(Reader.Value);
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":banking, :sales, :shift");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations83 = 0;
            int readerCount83 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations83, ref readerCount83);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.BatchStatusType Read243_BatchStatusType(string s) {
            switch (s) {
                case @"open": return global::PwkApi.com.conlog.val.phb.BatchStatusType.@open;
                case @"closed": return global::PwkApi.com.conlog.val.phb.BatchStatusType.@closed;
                default: throw CreateUnknownConstantException(s, typeof(global::PwkApi.com.conlog.val.phb.BatchStatusType));
            }
        }

        global::PwkApi.com.conlog.val.phb.UtilityDetail Read198_UtilityDetail(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id122_UtilityDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.UtilityDetail o;
            o = new global::PwkApi.com.conlog.val.phb.UtilityDetail();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id68_name && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@name = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id109_address && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@address = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id123_taxRef && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@taxRef = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":name, :address, :taxRef");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations84 = 0;
            int readerCount84 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations84, ref readerCount84);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MsgID Read60_MsgID(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id124_MsgID && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MsgID o;
            o = new global::PwkApi.com.conlog.val.phb.MsgID();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id125_dateTime && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@dateTime = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id126_uniqueNumber && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@uniqueNumber = CollapseWhitespace(Reader.Value);
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id127_sequenceNumber && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@sequenceNumber = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":dateTime, :uniqueNumber, :sequenceNumber");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations85 = 0;
            int readerCount85 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations85, ref readerCount85);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DeviceID Read59_DeviceID(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id128_DeviceID && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id129_GenericDeviceID && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read58_GenericDeviceID(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id130_EANDeviceID && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read57_EANDeviceID(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"DeviceID", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.EANDeviceID Read57_EANDeviceID(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id130_EANDeviceID && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.EANDeviceID o;
            o = new global::PwkApi.com.conlog.val.phb.EANDeviceID();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id131_ean && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@ean = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":ean");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations86 = 0;
            int readerCount86 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations86, ref readerCount86);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.GenericDeviceID Read58_GenericDeviceID(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id129_GenericDeviceID && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.GenericDeviceID o;
            o = new global::PwkApi.com.conlog.val.phb.GenericDeviceID();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id132_id && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@id = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":id");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations87 = 0;
            int readerCount87 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations87, ref readerCount87);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.FreeIssueResp Read247_FreeIssueResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id133_FreeIssueResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.FreeIssueResp o;
            o = new global::PwkApi.com.conlog.val.phb.FreeIssueResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations88 = 0;
            int readerCount88 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id134_creditVendReceipt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@creditVendReceipt = Read55_CreditVendReceipt(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendReceipt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendReceipt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations88, ref readerCount88);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CreditVendReceipt Read55_CreditVendReceipt(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id135_CreditVendReceipt && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CreditVendReceipt o;
            o = new global::PwkApi.com.conlog.val.phb.CreditVendReceipt();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id48_receiptNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@receiptNo = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":receiptNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations89 = 0;
            int readerCount89 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id136_transactions && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@transactions = Read53_Transactions(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:transactions");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:transactions");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations89, ref readerCount89);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Transactions Read53_Transactions(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id137_Transactions && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.Transactions o;
            o = new global::PwkApi.com.conlog.val.phb.Transactions();
            global::PwkApi.com.conlog.val.phb.Tx[] a_0 = null;
            int ca_0 = 0;
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@tx = (global::PwkApi.com.conlog.val.phb.Tx[])ShrinkArray(a_0, ca_0, typeof(global::PwkApi.com.conlog.val.phb.Tx), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations90 = 0;
            int readerCount90 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id138_tx && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_0 = (global::PwkApi.com.conlog.val.phb.Tx[])EnsureArrayIndex(a_0, ca_0, typeof(global::PwkApi.com.conlog.val.phb.Tx));a_0[ca_0++] = Read52_Tx(false, true);
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id139_lessRound && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@lessRound = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id140_tenderAmt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tenderAmt = Read2_Currency(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id141_change && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@change = Read2_Currency(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@units = Read2_Currency(false, true);
                        paramsRead[4] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tx, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:lessRound, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tenderAmt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:change, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tx, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:lessRound, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tenderAmt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:change, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations90, ref readerCount90);
            }
            o.@tx = (global::PwkApi.com.conlog.val.phb.Tx[])ShrinkArray(a_0, ca_0, typeof(global::PwkApi.com.conlog.val.phb.Tx), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Tx Read52_Tx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id142_Tx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id47_CreditVendTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read51_CreditVendTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id143_PayAccTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read11_PayAccTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id144_ConnectionTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read12_ConnectionTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id146_DebtRecoveryTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read10_DebtRecoveryTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id147_ServiceChrgTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read9_ServiceChrgTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id148_ConversionTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read8_ConversionTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id149_TamperTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read7_TamperTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id150_UpgradeTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read6_UpgradeTx(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"Tx", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.UpgradeTx Read6_UpgradeTx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id150_UpgradeTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.UpgradeTx o;
            o = new global::PwkApi.com.conlog.val.phb.UpgradeTx();
            global::PwkApi.com.conlog.val.phb.Tax[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[6];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id48_receiptNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@receiptNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":receiptNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations91 = 0;
            int readerCount91 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id50_tax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.Tax[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax));a_1[ca_1++] = Read4_Tax(false, true);
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id151_accDesc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accDesc = Reader.ReadElementString();
                        }
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accNo = Reader.ReadElementString();
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id52_tariff && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tariff = Read5_Tariff(false, true);
                        paramsRead[5] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations91, ref readerCount91);
            }
            o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TamperTx Read7_TamperTx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id149_TamperTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TamperTx o;
            o = new global::PwkApi.com.conlog.val.phb.TamperTx();
            global::PwkApi.com.conlog.val.phb.Tax[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[6];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id48_receiptNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@receiptNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":receiptNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations92 = 0;
            int readerCount92 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id50_tax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.Tax[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax));a_1[ca_1++] = Read4_Tax(false, true);
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id151_accDesc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accDesc = Reader.ReadElementString();
                        }
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accNo = Reader.ReadElementString();
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id52_tariff && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tariff = Read5_Tariff(false, true);
                        paramsRead[5] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations92, ref readerCount92);
            }
            o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConversionTx Read8_ConversionTx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id148_ConversionTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConversionTx o;
            o = new global::PwkApi.com.conlog.val.phb.ConversionTx();
            global::PwkApi.com.conlog.val.phb.Tax[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[6];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id48_receiptNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@receiptNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":receiptNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations93 = 0;
            int readerCount93 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id50_tax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.Tax[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax));a_1[ca_1++] = Read4_Tax(false, true);
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id151_accDesc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accDesc = Reader.ReadElementString();
                        }
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accNo = Reader.ReadElementString();
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id52_tariff && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tariff = Read5_Tariff(false, true);
                        paramsRead[5] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations93, ref readerCount93);
            }
            o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ServiceChrgTx Read9_ServiceChrgTx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id147_ServiceChrgTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ServiceChrgTx o;
            o = new global::PwkApi.com.conlog.val.phb.ServiceChrgTx();
            global::PwkApi.com.conlog.val.phb.Tax[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[6];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id48_receiptNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@receiptNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":receiptNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations94 = 0;
            int readerCount94 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id50_tax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.Tax[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax));a_1[ca_1++] = Read4_Tax(false, true);
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id151_accDesc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accDesc = Reader.ReadElementString();
                        }
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accNo = Reader.ReadElementString();
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id52_tariff && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tariff = Read5_Tariff(false, true);
                        paramsRead[5] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations94, ref readerCount94);
            }
            o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DebtRecoveryTx Read10_DebtRecoveryTx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id146_DebtRecoveryTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DebtRecoveryTx o;
            o = new global::PwkApi.com.conlog.val.phb.DebtRecoveryTx();
            global::PwkApi.com.conlog.val.phb.Tax[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[7];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id48_receiptNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@receiptNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":receiptNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations95 = 0;
            int readerCount95 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id50_tax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.Tax[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax));a_1[ca_1++] = Read4_Tax(false, true);
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id151_accDesc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accDesc = Reader.ReadElementString();
                        }
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accNo = Reader.ReadElementString();
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id52_tariff && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tariff = Read5_Tariff(false, true);
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id152_balance && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@balance = Read2_Currency(false, true);
                        paramsRead[6] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:balance");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:balance");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations95, ref readerCount95);
            }
            o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConnectionTx Read12_ConnectionTx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id144_ConnectionTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConnectionTx o;
            o = new global::PwkApi.com.conlog.val.phb.ConnectionTx();
            global::PwkApi.com.conlog.val.phb.Tax[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[6];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id48_receiptNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@receiptNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":receiptNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations96 = 0;
            int readerCount96 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id50_tax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.Tax[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax));a_1[ca_1++] = Read4_Tax(false, true);
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id151_accDesc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accDesc = Reader.ReadElementString();
                        }
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accNo = Reader.ReadElementString();
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id52_tariff && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tariff = Read5_Tariff(false, true);
                        paramsRead[5] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations96, ref readerCount96);
            }
            o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.PayAccTx Read11_PayAccTx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id143_PayAccTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id144_ConnectionTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read12_ConnectionTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id146_DebtRecoveryTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read10_DebtRecoveryTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id147_ServiceChrgTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read9_ServiceChrgTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id148_ConversionTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read8_ConversionTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id149_TamperTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read7_TamperTx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id150_UpgradeTx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read6_UpgradeTx(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.PayAccTx o;
            o = new global::PwkApi.com.conlog.val.phb.PayAccTx();
            global::PwkApi.com.conlog.val.phb.Tax[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[6];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id48_receiptNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@receiptNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":receiptNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations97 = 0;
            int readerCount97 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[0] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id50_tax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.Tax[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax));a_1[ca_1++] = Read4_Tax(false, true);
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id151_accDesc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accDesc = Reader.ReadElementString();
                        }
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accNo = Reader.ReadElementString();
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id52_tariff && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tariff = Read5_Tariff(false, true);
                        paramsRead[5] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accDesc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tariff");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations97, ref readerCount97);
            }
            o.@tax = (global::PwkApi.com.conlog.val.phb.Tax[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.Tax), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterCreditTransferResp Read252_MeterCreditTransferResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id153_MeterCreditTransferResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterCreditTransferResp o;
            o = new global::PwkApi.com.conlog.val.phb.MeterCreditTransferResp();
            bool[] paramsRead = new bool[14];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations98 = 0;
            int readerCount98 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id154_creditTransferDetail && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@creditTransferDetail = Read127_CreditTransferDetail(false, true);
                        paramsRead[12] = true;
                    }
                    else if (!paramsRead[13] && ((object) Reader.LocalName == (object)id155_creditTransferTx && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@creditTransferTx = Read51_CreditVendTx(false, true);
                        paramsRead[13] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditTransferDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditTransferTx");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditTransferDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditTransferTx");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations98, ref readerCount98);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CreditTransferDetail Read127_CreditTransferDetail(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id156_CreditTransferDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CreditTransferDetail o;
            o = new global::PwkApi.com.conlog.val.phb.CreditTransferDetail();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations99 = 0;
            int readerCount99 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id157_oldMSNO && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@oldMSNO = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id158_refNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@refNo = Reader.ReadElementString();
                        }
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:oldMSNO, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:refNo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:oldMSNO, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:refNo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations99, ref readerCount99);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TrialCreditVendResp Read248_TrialCreditVendResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id159_TrialCreditVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TrialCreditVendResp o;
            o = new global::PwkApi.com.conlog.val.phb.TrialCreditVendResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations100 = 0;
            int readerCount100 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id134_creditVendReceipt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@creditVendReceipt = Read55_CreditVendReceipt(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendReceipt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendReceipt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations100, ref readerCount100);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.FBEResp Read250_FBEResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id160_FBEResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.FBEResp o;
            o = new global::PwkApi.com.conlog.val.phb.FBEResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations101 = 0;
            int readerCount101 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id134_creditVendReceipt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@creditVendReceipt = Read55_CreditVendReceipt(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendReceipt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendReceipt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations101, ref readerCount101);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CreditVendResp Read249_CreditVendResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id161_CreditVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id160_FBEResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read250_FBEResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id159_TrialCreditVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read248_TrialCreditVendResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id133_FreeIssueResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read247_FreeIssueResp(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CreditVendResp o;
            o = new global::PwkApi.com.conlog.val.phb.CreditVendResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations102 = 0;
            int readerCount102 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id134_creditVendReceipt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@creditVendReceipt = Read55_CreditVendReceipt(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendReceipt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendReceipt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations102, ref readerCount102);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConfirmMeterResp Read352_ConfirmMeterResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id162_ConfirmMeterResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConfirmMeterResp o;
            o = new global::PwkApi.com.conlog.val.phb.ConfirmMeterResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations103 = 0;
            int readerCount103 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id163_confirmMeterResult && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@confirmMeterResult = Read351_ConfirmMeterResult(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:confirmMeterResult");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:confirmMeterResult");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations103, ref readerCount103);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConfirmMeterResult Read351_ConfirmMeterResult(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id164_ConfirmMeterResult && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConfirmMeterResult o;
            o = new global::PwkApi.com.conlog.val.phb.ConfirmMeterResult();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations104 = 0;
            int readerCount104 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterDetail");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterDetail");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations104, ref readerCount104);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp Read343_ReverseMerchantDepositResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id165_ReverseMerchantDepositResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp o;
            o = new global::PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp();
            bool[] paramsRead = new bool[11];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations105 = 0;
            int readerCount105 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id166_DepositSuccessful && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@DepositSuccessful = System.Xml.XmlConvert.ToBoolean(Reader.ReadElementString());
                        }
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id167_TransactionReference && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@TransactionReference = Reader.ReadElementString();
                        }
                        paramsRead[10] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:DepositSuccessful, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:TransactionReference");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:DepositSuccessful, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:TransactionReference");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations105, ref readerCount105);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MakeMerchantDepositResp Read279_MakeMerchantDepositResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id168_MakeMerchantDepositResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MakeMerchantDepositResp o;
            o = new global::PwkApi.com.conlog.val.phb.MakeMerchantDepositResp();
            bool[] paramsRead = new bool[11];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations106 = 0;
            int readerCount106 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id166_DepositSuccessful && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@DepositSuccessful = System.Xml.XmlConvert.ToBoolean(Reader.ReadElementString());
                        }
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id167_TransactionReference && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@TransactionReference = Reader.ReadElementString();
                        }
                        paramsRead[10] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:DepositSuccessful, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:TransactionReference");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:DepositSuccessful, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:TransactionReference");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations106, ref readerCount106);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.GetVendingServerStateResp Read278_GetVendingServerStateResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id169_GetVendingServerStateResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.GetVendingServerStateResp o;
            o = new global::PwkApi.com.conlog.val.phb.GetVendingServerStateResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations107 = 0;
            int readerCount107 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id170_serverState && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverState = Read277_ServerState(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverState");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverState");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations107, ref readerCount107);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ServerState Read277_ServerState(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id171_ServerState && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id172_SilentServerState && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read276_SilentServerState(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id173_UnknownServerState && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read275_UnknownServerState(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id174_PingServerState && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read273_PingServerState(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id175_PingAndActivityServerState && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read274_PingAndActivityServerState(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"ServerState", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.PingAndActivityServerState Read274_PingAndActivityServerState(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id175_PingAndActivityServerState && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.PingAndActivityServerState o;
            o = new global::PwkApi.com.conlog.val.phb.PingAndActivityServerState();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id176_roundTripTime && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@roundTripTime = System.Xml.XmlConvert.ToInt32(Reader.Value);
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id177_activityTime && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@activityTime = System.Xml.XmlConvert.ToInt32(Reader.Value);
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":roundTripTime, :activityTime");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations108 = 0;
            int readerCount108 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations108, ref readerCount108);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.PingServerState Read273_PingServerState(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id174_PingServerState && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id175_PingAndActivityServerState && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read274_PingAndActivityServerState(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.PingServerState o;
            o = new global::PwkApi.com.conlog.val.phb.PingServerState();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id176_roundTripTime && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@roundTripTime = System.Xml.XmlConvert.ToInt32(Reader.Value);
                    paramsRead[0] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":roundTripTime");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations109 = 0;
            int readerCount109 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations109, ref readerCount109);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.UnknownServerState Read275_UnknownServerState(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id173_UnknownServerState && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.UnknownServerState o;
            o = new global::PwkApi.com.conlog.val.phb.UnknownServerState();
            bool[] paramsRead = new bool[0];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations110 = 0;
            int readerCount110 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations110, ref readerCount110);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.SilentServerState Read276_SilentServerState(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id172_SilentServerState && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.SilentServerState o;
            o = new global::PwkApi.com.conlog.val.phb.SilentServerState();
            bool[] paramsRead = new bool[0];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations111 = 0;
            int readerCount111 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations111, ref readerCount111);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TotalBatchResp Read242_TotalBatchResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id178_TotalBatchResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TotalBatchResp o;
            o = new global::PwkApi.com.conlog.val.phb.TotalBatchResp();
            global::PwkApi.com.conlog.val.phb.Batch[] a_9 = null;
            int ca_9 = 0;
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@totalBatch = (global::PwkApi.com.conlog.val.phb.Batch[])ShrinkArray(a_9, ca_9, typeof(global::PwkApi.com.conlog.val.phb.Batch), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations112 = 0;
            int readerCount112 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id179_totalBatch && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_9 = (global::PwkApi.com.conlog.val.phb.Batch[])EnsureArrayIndex(a_9, ca_9, typeof(global::PwkApi.com.conlog.val.phb.Batch));a_9[ca_9++] = Read241_Batch(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:totalBatch");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:totalBatch");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations112, ref readerCount112);
            }
            o.@totalBatch = (global::PwkApi.com.conlog.val.phb.Batch[])ShrinkArray(a_9, ca_9, typeof(global::PwkApi.com.conlog.val.phb.Batch), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Batch Read241_Batch(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id180_Batch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id181_BankBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read240_BankBatch(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id182_ShiftBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read236_ShiftBatch(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id183_SalesBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read237_SalesBatch(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"Batch", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.SalesBatch Read237_SalesBatch(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id183_SalesBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.SalesBatch o;
            o = new global::PwkApi.com.conlog.val.phb.SalesBatch();
            global::PwkApi.com.conlog.val.phb.ShiftBatch[] a_7 = null;
            int ca_7 = 0;
            bool[] paramsRead = new bool[9];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[8] && ((object) Reader.LocalName == (object)id184_seqNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@seqNo = Reader.Value;
                    paramsRead[8] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":seqNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@shiftBatch = (global::PwkApi.com.conlog.val.phb.ShiftBatch[])ShrinkArray(a_7, ca_7, typeof(global::PwkApi.com.conlog.val.phb.ShiftBatch), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations113 = 0;
            int readerCount113 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id185_started && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@started = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id186_ended && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@ended = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id187_batchTot && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@batchTot = Read2_Currency(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id188_totTax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@totTax = Read4_Tax(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id189_batchReport && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@batchReport = Read235_BatchReport(false, true);
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id190_firstTxSeqNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@firstTxSeqNo = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id191_lastTxSeqNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@lastTxSeqNo = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id192_shiftBatch && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_7 = (global::PwkApi.com.conlog.val.phb.ShiftBatch[])EnsureArrayIndex(a_7, ca_7, typeof(global::PwkApi.com.conlog.val.phb.ShiftBatch));a_7[ca_7++] = Read236_ShiftBatch(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:ended, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchTot, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:totTax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchReport, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:firstTxSeqNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:lastTxSeqNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:shiftBatch");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:ended, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchTot, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:totTax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchReport, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:firstTxSeqNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:lastTxSeqNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:shiftBatch");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations113, ref readerCount113);
            }
            o.@shiftBatch = (global::PwkApi.com.conlog.val.phb.ShiftBatch[])ShrinkArray(a_7, ca_7, typeof(global::PwkApi.com.conlog.val.phb.ShiftBatch), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ShiftBatch Read236_ShiftBatch(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id182_ShiftBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ShiftBatch o;
            o = new global::PwkApi.com.conlog.val.phb.ShiftBatch();
            bool[] paramsRead = new bool[6];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[5] && ((object) Reader.LocalName == (object)id184_seqNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@seqNo = Reader.Value;
                    paramsRead[5] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":seqNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations114 = 0;
            int readerCount114 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id185_started && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@started = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id186_ended && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@ended = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id187_batchTot && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@batchTot = Read2_Currency(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id188_totTax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@totTax = Read4_Tax(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id189_batchReport && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@batchReport = Read235_BatchReport(false, true);
                        paramsRead[4] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:ended, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchTot, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:totTax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchReport");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:ended, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchTot, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:totTax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchReport");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations114, ref readerCount114);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.BatchReport Read235_BatchReport(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id193_BatchReport && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.BatchReport o;
            o = new global::PwkApi.com.conlog.val.phb.BatchReport();
            global::PwkApi.com.conlog.val.phb.TxTotal[] a_0 = null;
            int ca_0 = 0;
            global::PwkApi.com.conlog.val.phb.OperatorTotal[] a_1 = null;
            int ca_1 = 0;
            global::PwkApi.com.conlog.val.phb.PayTypeTotal[] a_2 = null;
            int ca_2 = 0;
            global::PwkApi.com.conlog.val.phb.ResourceTotal[] a_3 = null;
            int ca_3 = 0;
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@txTotal = (global::PwkApi.com.conlog.val.phb.TxTotal[])ShrinkArray(a_0, ca_0, typeof(global::PwkApi.com.conlog.val.phb.TxTotal), true);
                o.@operatorTotal = (global::PwkApi.com.conlog.val.phb.OperatorTotal[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.OperatorTotal), true);
                o.@payTypeTotal = (global::PwkApi.com.conlog.val.phb.PayTypeTotal[])ShrinkArray(a_2, ca_2, typeof(global::PwkApi.com.conlog.val.phb.PayTypeTotal), true);
                o.@resTot = (global::PwkApi.com.conlog.val.phb.ResourceTotal[])ShrinkArray(a_3, ca_3, typeof(global::PwkApi.com.conlog.val.phb.ResourceTotal), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations115 = 0;
            int readerCount115 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id194_txTotal && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_0 = (global::PwkApi.com.conlog.val.phb.TxTotal[])EnsureArrayIndex(a_0, ca_0, typeof(global::PwkApi.com.conlog.val.phb.TxTotal));a_0[ca_0++] = Read221_TxTotal(false, true);
                    }
                    else if (((object) Reader.LocalName == (object)id195_operatorTotal && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.OperatorTotal[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.OperatorTotal));a_1[ca_1++] = Read222_OperatorTotal(false, true);
                    }
                    else if (((object) Reader.LocalName == (object)id196_payTypeTotal && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_2 = (global::PwkApi.com.conlog.val.phb.PayTypeTotal[])EnsureArrayIndex(a_2, ca_2, typeof(global::PwkApi.com.conlog.val.phb.PayTypeTotal));a_2[ca_2++] = Read228_PayTypeTotal(false, true);
                    }
                    else if (((object) Reader.LocalName == (object)id197_resTot && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_3 = (global::PwkApi.com.conlog.val.phb.ResourceTotal[])EnsureArrayIndex(a_3, ca_3, typeof(global::PwkApi.com.conlog.val.phb.ResourceTotal));a_3[ca_3++] = Read234_ResourceTotal(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:txTotal, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:operatorTotal, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:payTypeTotal, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:resTot");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:txTotal, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:operatorTotal, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:payTypeTotal, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:resTot");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations115, ref readerCount115);
            }
            o.@txTotal = (global::PwkApi.com.conlog.val.phb.TxTotal[])ShrinkArray(a_0, ca_0, typeof(global::PwkApi.com.conlog.val.phb.TxTotal), true);
            o.@operatorTotal = (global::PwkApi.com.conlog.val.phb.OperatorTotal[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.OperatorTotal), true);
            o.@payTypeTotal = (global::PwkApi.com.conlog.val.phb.PayTypeTotal[])ShrinkArray(a_2, ca_2, typeof(global::PwkApi.com.conlog.val.phb.PayTypeTotal), true);
            o.@resTot = (global::PwkApi.com.conlog.val.phb.ResourceTotal[])ShrinkArray(a_3, ca_3, typeof(global::PwkApi.com.conlog.val.phb.ResourceTotal), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ResourceTotal Read234_ResourceTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id198_ResourceTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id199_GasTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read233_GasTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id200_CurrencyTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read232_CurrencyTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id201_ElectricityTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read231_ElectricityTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id202_WaterTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read230_WaterTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id203_ConnectionTimeTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read229_ConnectionTimeTotal(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ResourceTotal o;
            o = new global::PwkApi.com.conlog.val.phb.ResourceTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations116 = 0;
            int readerCount116 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations116, ref readerCount116);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConnectionTimeTotal Read229_ConnectionTimeTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id203_ConnectionTimeTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConnectionTimeTotal o;
            o = new global::PwkApi.com.conlog.val.phb.ConnectionTimeTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations117 = 0;
            int readerCount117 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations117, ref readerCount117);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.WaterTotal Read230_WaterTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id202_WaterTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.WaterTotal o;
            o = new global::PwkApi.com.conlog.val.phb.WaterTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations118 = 0;
            int readerCount118 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations118, ref readerCount118);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ElectricityTotal Read231_ElectricityTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id201_ElectricityTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ElectricityTotal o;
            o = new global::PwkApi.com.conlog.val.phb.ElectricityTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations119 = 0;
            int readerCount119 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations119, ref readerCount119);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CurrencyTotal Read232_CurrencyTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id200_CurrencyTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CurrencyTotal o;
            o = new global::PwkApi.com.conlog.val.phb.CurrencyTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations120 = 0;
            int readerCount120 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations120, ref readerCount120);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.GasTotal Read233_GasTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id199_GasTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.GasTotal o;
            o = new global::PwkApi.com.conlog.val.phb.GasTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations121 = 0;
            int readerCount121 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id60_units && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@units = Read39_Units(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:units");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations121, ref readerCount121);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.PayTypeTotal Read228_PayTypeTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id204_PayTypeTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id205_CashTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read227_CashTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id206_CreditCardTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read226_CreditCardTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id207_OtherTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read225_OtherTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id208_ChequeTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read224_ChequeTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id209_DebitCardTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read223_DebitCardTotal(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"PayTypeTotal", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.DebitCardTotal Read223_DebitCardTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id209_DebitCardTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DebitCardTotal o;
            o = new global::PwkApi.com.conlog.val.phb.DebitCardTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations122 = 0;
            int readerCount122 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations122, ref readerCount122);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ChequeTotal Read224_ChequeTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id208_ChequeTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ChequeTotal o;
            o = new global::PwkApi.com.conlog.val.phb.ChequeTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations123 = 0;
            int readerCount123 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations123, ref readerCount123);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.OtherTotal Read225_OtherTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id207_OtherTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.OtherTotal o;
            o = new global::PwkApi.com.conlog.val.phb.OtherTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations124 = 0;
            int readerCount124 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations124, ref readerCount124);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CreditCardTotal Read226_CreditCardTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id206_CreditCardTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CreditCardTotal o;
            o = new global::PwkApi.com.conlog.val.phb.CreditCardTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations125 = 0;
            int readerCount125 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations125, ref readerCount125);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CashTotal Read227_CashTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id205_CashTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CashTotal o;
            o = new global::PwkApi.com.conlog.val.phb.CashTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations126 = 0;
            int readerCount126 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations126, ref readerCount126);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.OperatorTotal Read222_OperatorTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id210_OperatorTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.OperatorTotal o;
            o = new global::PwkApi.com.conlog.val.phb.OperatorTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations127 = 0;
            int readerCount127 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id211_opName && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@opName = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:opName, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:opName, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations127, ref readerCount127);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TxTotal Read221_TxTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id212_TxTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id213_AccPaymentTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read220_AccPaymentTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id214_ServiceChrgTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read219_ServiceChrgTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id215_DebtRecoveryTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read218_DebtRecoveryTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id216_NormalSaleTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read217_NormalSaleTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id217_CancellationTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read216_CancellationTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id218_FreeIssueTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read215_FreeIssueTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id219_MeterCreditTransferTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read214_MeterCreditTransferTotal(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"TxTotal", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.MeterCreditTransferTotal Read214_MeterCreditTransferTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id219_MeterCreditTransferTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterCreditTransferTotal o;
            o = new global::PwkApi.com.conlog.val.phb.MeterCreditTransferTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations128 = 0;
            int readerCount128 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations128, ref readerCount128);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.FreeIssueTotal Read215_FreeIssueTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id218_FreeIssueTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.FreeIssueTotal o;
            o = new global::PwkApi.com.conlog.val.phb.FreeIssueTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations129 = 0;
            int readerCount129 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations129, ref readerCount129);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CancellationTotal Read216_CancellationTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id217_CancellationTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CancellationTotal o;
            o = new global::PwkApi.com.conlog.val.phb.CancellationTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations130 = 0;
            int readerCount130 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations130, ref readerCount130);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.NormalSaleTotal Read217_NormalSaleTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id216_NormalSaleTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.NormalSaleTotal o;
            o = new global::PwkApi.com.conlog.val.phb.NormalSaleTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations131 = 0;
            int readerCount131 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations131, ref readerCount131);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DebtRecoveryTotal Read218_DebtRecoveryTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id215_DebtRecoveryTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DebtRecoveryTotal o;
            o = new global::PwkApi.com.conlog.val.phb.DebtRecoveryTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations132 = 0;
            int readerCount132 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations132, ref readerCount132);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ServiceChrgTotal Read219_ServiceChrgTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id214_ServiceChrgTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ServiceChrgTotal o;
            o = new global::PwkApi.com.conlog.val.phb.ServiceChrgTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations133 = 0;
            int readerCount133 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations133, ref readerCount133);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.AccPaymentTotal Read220_AccPaymentTotal(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id213_AccPaymentTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id214_ServiceChrgTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read219_ServiceChrgTotal(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id215_DebtRecoveryTotal && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read218_DebtRecoveryTotal(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.AccPaymentTotal o;
            o = new global::PwkApi.com.conlog.val.phb.AccPaymentTotal();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations134 = 0;
            int readerCount134 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations134, ref readerCount134);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.BankBatch Read240_BankBatch(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id181_BankBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.BankBatch o;
            o = new global::PwkApi.com.conlog.val.phb.BankBatch();
            global::PwkApi.com.conlog.val.phb.SalesBatch[] a_8 = null;
            int ca_8 = 0;
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[9] && ((object) Reader.LocalName == (object)id184_seqNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@seqNo = Reader.Value;
                    paramsRead[9] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":seqNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@salesBatch = (global::PwkApi.com.conlog.val.phb.SalesBatch[])ShrinkArray(a_8, ca_8, typeof(global::PwkApi.com.conlog.val.phb.SalesBatch), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations135 = 0;
            int readerCount135 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id185_started && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@started = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id186_ended && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@ended = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id187_batchTot && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@batchTot = Read2_Currency(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id188_totTax && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@totTax = Read4_Tax(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id189_batchReport && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@batchReport = Read235_BatchReport(false, true);
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id220_firstSalesSeqNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@firstSalesSeqNo = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id221_lastSalesSeqNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@lastSalesSeqNo = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id222_depSlip && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@depSlip = Read239_DepositSlip(false, true);
                        paramsRead[7] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id223_salesBatch && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_8 = (global::PwkApi.com.conlog.val.phb.SalesBatch[])EnsureArrayIndex(a_8, ca_8, typeof(global::PwkApi.com.conlog.val.phb.SalesBatch));a_8[ca_8++] = Read237_SalesBatch(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:ended, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchTot, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:totTax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchReport, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:firstSalesSeqNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:lastSalesSeqNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:depSlip, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:salesBatch");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:ended, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchTot, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:totTax, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:batchReport, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:firstSalesSeqNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:lastSalesSeqNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:depSlip, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:salesBatch");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations135, ref readerCount135);
            }
            o.@salesBatch = (global::PwkApi.com.conlog.val.phb.SalesBatch[])ShrinkArray(a_8, ca_8, typeof(global::PwkApi.com.conlog.val.phb.SalesBatch), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DepositSlip Read239_DepositSlip(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id224_DepositSlip && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DepositSlip o;
            o = new global::PwkApi.com.conlog.val.phb.DepositSlip();
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[3] && ((object) Reader.LocalName == (object)id225_bankingRefNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@bankingRefNo = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":bankingRefNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations136 = 0;
            int readerCount136 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id226_header && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@header = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id227_beneficiary && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@beneficiary = Read238_Beneficiary(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:header, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:beneficiary");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:header, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:beneficiary");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations136, ref readerCount136);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Beneficiary Read238_Beneficiary(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id228_Beneficiary && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.Beneficiary o;
            o = new global::PwkApi.com.conlog.val.phb.Beneficiary();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id229_accName && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@accName = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@accNo = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id230_branchCode && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@branchCode = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id231_bankName && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@bankName = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id232_bankRegNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@bankRegNo = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":accName, :accNo, :branchCode, :bankName, :bankRegNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations137 = 0;
            int readerCount137 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations137, ref readerCount137);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.EndBatchResp Read334_EndBatchResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id233_EndBatchResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.EndBatchResp o;
            o = new global::PwkApi.com.conlog.val.phb.EndBatchResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations138 = 0;
            int readerCount138 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id234_endBatch && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@endBatch = Read241_Batch(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:endBatch");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:endBatch");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations138, ref readerCount138);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.StartBatchResp Read348_StartBatchResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id235_StartBatchResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.StartBatchResp o;
            o = new global::PwkApi.com.conlog.val.phb.StartBatchResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations139 = 0;
            int readerCount139 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id236_startedBatch && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@startedBatch = Read347_StartBatch(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:startedBatch");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:startedBatch");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations139, ref readerCount139);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.StartBatch Read347_StartBatch(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id237_StartBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id238_ShiftStartBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read344_ShiftStartBatch(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id239_SalesStartBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read345_SalesStartBatch(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id240_BankStartBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read346_BankStartBatch(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"StartBatch", @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.BankStartBatch Read346_BankStartBatch(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id240_BankStartBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.BankStartBatch o;
            o = new global::PwkApi.com.conlog.val.phb.BankStartBatch();
            global::PwkApi.com.conlog.val.phb.SalesStartBatch[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id184_seqNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@seqNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":seqNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@salesStartBatch = (global::PwkApi.com.conlog.val.phb.SalesStartBatch[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.SalesStartBatch), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations140 = 0;
            int readerCount140 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id185_started && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@started = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id241_salesStartBatch && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.SalesStartBatch[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.SalesStartBatch));a_1[ca_1++] = Read345_SalesStartBatch(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:salesStartBatch");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:salesStartBatch");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations140, ref readerCount140);
            }
            o.@salesStartBatch = (global::PwkApi.com.conlog.val.phb.SalesStartBatch[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.SalesStartBatch), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.SalesStartBatch Read345_SalesStartBatch(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id239_SalesStartBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.SalesStartBatch o;
            o = new global::PwkApi.com.conlog.val.phb.SalesStartBatch();
            global::PwkApi.com.conlog.val.phb.ShiftStartBatch[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id184_seqNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@seqNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":seqNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@shiftStartBatch = (global::PwkApi.com.conlog.val.phb.ShiftStartBatch[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.ShiftStartBatch), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations141 = 0;
            int readerCount141 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id185_started && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@started = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id242_shiftStartBatch && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_1 = (global::PwkApi.com.conlog.val.phb.ShiftStartBatch[])EnsureArrayIndex(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.ShiftStartBatch));a_1[ca_1++] = Read344_ShiftStartBatch(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:shiftStartBatch");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:shiftStartBatch");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations141, ref readerCount141);
            }
            o.@shiftStartBatch = (global::PwkApi.com.conlog.val.phb.ShiftStartBatch[])ShrinkArray(a_1, ca_1, typeof(global::PwkApi.com.conlog.val.phb.ShiftStartBatch), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ShiftStartBatch Read344_ShiftStartBatch(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id238_ShiftStartBatch && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ShiftStartBatch o;
            o = new global::PwkApi.com.conlog.val.phb.ShiftStartBatch();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id184_seqNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@seqNo = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":seqNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations142 = 0;
            int readerCount142 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id185_started && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@started = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:started");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations142, ref readerCount142);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.AdviceResp Read331_AdviceResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id243_AdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id244_ConfirmationAdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read330_ConfirmationAdviceResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id245_LastRespAdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read329_LastRespAdviceResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id246_ReversalAdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read328_ReversalAdviceResp(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"AdviceResp", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.ReversalAdviceResp Read328_ReversalAdviceResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id246_ReversalAdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ReversalAdviceResp o;
            o = new global::PwkApi.com.conlog.val.phb.ReversalAdviceResp();
            bool[] paramsRead = new bool[11];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[10] && ((object) Reader.LocalName == (object)id247_txReversed && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@txReversed = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    paramsRead[10] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":txReversed");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations143 = 0;
            int readerCount143 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id248_adviceReqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@adviceReqMsgID = Read60_MsgID(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:adviceReqMsgID");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:adviceReqMsgID");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations143, ref readerCount143);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.LastRespAdviceResp Read329_LastRespAdviceResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id245_LastRespAdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.LastRespAdviceResp o;
            o = new global::PwkApi.com.conlog.val.phb.LastRespAdviceResp();
            bool[] paramsRead = new bool[11];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations144 = 0;
            int readerCount144 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id248_adviceReqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@adviceReqMsgID = Read60_MsgID(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id249_lastResponse && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@lastResponse = Read353_BaseResp(false, true);
                        paramsRead[10] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:adviceReqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:lastResponse");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:adviceReqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:lastResponse");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations144, ref readerCount144);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.BaseResp Read353_BaseResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id250_BaseResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id251_ConfirmCustomerResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read358_ConfirmCustomerResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id162_ConfirmMeterResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read352_ConfirmMeterResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id252_CustReportFaultResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read350_CustReportFaultResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id235_StartBatchResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read348_StartBatchResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id165_ReverseMerchantDepositResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read343_ReverseMerchantDepositResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id253_VendorStatementResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read342_VendorStatementResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id233_EndBatchResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read334_EndBatchResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id254_ReprintEndBatchResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read335_ReprintEndBatchResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id255_DepositResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read332_DepositResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id256_ReprintDepositResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read333_ReprintDepositResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id243_AdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read331_AdviceResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id244_ConfirmationAdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read330_ConfirmationAdviceResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id245_LastRespAdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read329_LastRespAdviceResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id246_ReversalAdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read328_ReversalAdviceResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id257_XMLVendFaultResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read327_XMLVendFaultResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id168_MakeMerchantDepositResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read279_MakeMerchantDepositResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id169_GetVendingServerStateResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read278_GetVendingServerStateResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id258_BaseVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read265_BaseVendResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id259_VerifyResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read272_VerifyResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id260_UpdateMeterKeyResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read264_UpdateMeterKeyResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id261_MeterSpecificEngResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read263_MeterSpecificEngResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id262_DefCreditResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read262_DefCreditResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id263_PwrLmtResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read261_PwrLmtResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id264_PhUnbalResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read260_PhUnbalResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id265_ClearCreditResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read259_ClearCreditResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id266_ClearTamperResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read258_ClearTamperResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id267_EngKCTResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read257_EngKCTResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id268_SetWaterFactorResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read256_SetWaterFactorResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id269_ReprintResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read255_ReprintResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id270_CancelVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read254_CancelVendResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id31_CancelPendingResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read253_CancelPendingResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id153_MeterCreditTransferResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read252_MeterCreditTransferResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id271_PayAccResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read251_PayAccResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id161_CreditVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read249_CreditVendResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id160_FBEResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read250_FBEResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id159_TrialCreditVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read248_TrialCreditVendResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id133_FreeIssueResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read247_FreeIssueResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id178_TotalBatchResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read242_TotalBatchResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id272_NonMeterSpecificEngResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read212_NonMeterSpecificEngResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id273_TestDisplayResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read213_TestDisplayResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id274_TestBreakerResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read211_TestBreakerResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id275_DispPwrLmtResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read210_DispPwrLmtResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id276_DispTIResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read209_DispTIResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id277_DispKRNResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read208_DispKRNResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id278_DispTamperResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read207_DispTamperResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id279_DispInstPwrResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read206_DispInstPwrResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id280_DispConsTotResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read205_DispConsTotResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id281_DispPhUnbalanceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read204_DispPhUnbalanceResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id282_DispVerResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read203_DispVerResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id283_DispRegistersResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read202_DispRegistersResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id284_MenuAccessResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read201_MenuAccessResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id285_TestAllResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read200_TestAllResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id286_TestDispenserResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read199_TestDispenserResp(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.BaseResp o;
            o = new global::PwkApi.com.conlog.val.phb.BaseResp();
            bool[] paramsRead = new bool[9];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations145 = 0;
            int readerCount145 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations145, ref readerCount145);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TestDispenserResp Read199_TestDispenserResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id286_TestDispenserResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TestDispenserResp o;
            o = new global::PwkApi.com.conlog.val.phb.TestDispenserResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations146 = 0;
            int readerCount146 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id287_testDispenser && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@testDispenser = Read194_TestDispenserTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:testDispenser");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:testDispenser");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations146, ref readerCount146);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TestDispenserTokenIssue Read194_TestDispenserTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id288_TestDispenserTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TestDispenserTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.TestDispenserTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations147 = 0;
            int readerCount147 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations147, ref readerCount147);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TestAllResp Read200_TestAllResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id285_TestAllResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TestAllResp o;
            o = new global::PwkApi.com.conlog.val.phb.TestAllResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations148 = 0;
            int readerCount148 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id289_testAll && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@testAll = Read192_TestAllTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:testAll");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:testAll");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations148, ref readerCount148);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TestAllTokenIssue Read192_TestAllTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id290_TestAllTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TestAllTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.TestAllTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations149 = 0;
            int readerCount149 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations149, ref readerCount149);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MenuAccessResp Read201_MenuAccessResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id284_MenuAccessResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MenuAccessResp o;
            o = new global::PwkApi.com.conlog.val.phb.MenuAccessResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations150 = 0;
            int readerCount150 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id291_menuAccess && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@menuAccess = Read183_MenuAccessTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:menuAccess");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:menuAccess");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations150, ref readerCount150);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MenuAccessTokenIssue Read183_MenuAccessTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id292_MenuAccessTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MenuAccessTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.MenuAccessTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations151 = 0;
            int readerCount151 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations151, ref readerCount151);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispRegistersResp Read202_DispRegistersResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id283_DispRegistersResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispRegistersResp o;
            o = new global::PwkApi.com.conlog.val.phb.DispRegistersResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations152 = 0;
            int readerCount152 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id293_dispRegisters && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@dispRegisters = Read196_DispRegistersTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispRegisters");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispRegisters");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations152, ref readerCount152);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispRegistersTokenIssue Read196_DispRegistersTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id294_DispRegistersTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispRegistersTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.DispRegistersTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations153 = 0;
            int readerCount153 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations153, ref readerCount153);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispVerResp Read203_DispVerResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id282_DispVerResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispVerResp o;
            o = new global::PwkApi.com.conlog.val.phb.DispVerResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations154 = 0;
            int readerCount154 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id295_dispVer && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@dispVer = Read184_DispVerTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispVer");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispVer");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations154, ref readerCount154);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispVerTokenIssue Read184_DispVerTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id296_DispVerTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispVerTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.DispVerTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations155 = 0;
            int readerCount155 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations155, ref readerCount155);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispPhUnbalanceResp Read204_DispPhUnbalanceResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id281_DispPhUnbalanceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispPhUnbalanceResp o;
            o = new global::PwkApi.com.conlog.val.phb.DispPhUnbalanceResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations156 = 0;
            int readerCount156 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id297_dispPhUnbalance && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@dispPhUnbalance = Read182_DispPhUnbalanceTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispPhUnbalance");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispPhUnbalance");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations156, ref readerCount156);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispPhUnbalanceTokenIssue Read182_DispPhUnbalanceTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id298_DispPhUnbalanceTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispPhUnbalanceTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.DispPhUnbalanceTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations157 = 0;
            int readerCount157 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations157, ref readerCount157);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispConsTotResp Read205_DispConsTotResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id280_DispConsTotResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispConsTotResp o;
            o = new global::PwkApi.com.conlog.val.phb.DispConsTotResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations158 = 0;
            int readerCount158 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id299_dispConsTot && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@dispConsTot = Read186_DispConsTotTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispConsTot");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispConsTot");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations158, ref readerCount158);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispConsTotTokenIssue Read186_DispConsTotTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id300_DispConsTotTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispConsTotTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.DispConsTotTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations159 = 0;
            int readerCount159 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations159, ref readerCount159);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispInstPwrResp Read206_DispInstPwrResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id279_DispInstPwrResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispInstPwrResp o;
            o = new global::PwkApi.com.conlog.val.phb.DispInstPwrResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations160 = 0;
            int readerCount160 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id301_dispInstPwr && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@dispInstPwr = Read187_DispInstPwrTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispInstPwr");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispInstPwr");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations160, ref readerCount160);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispInstPwrTokenIssue Read187_DispInstPwrTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id302_DispInstPwrTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispInstPwrTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.DispInstPwrTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations161 = 0;
            int readerCount161 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations161, ref readerCount161);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispTamperResp Read207_DispTamperResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id278_DispTamperResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispTamperResp o;
            o = new global::PwkApi.com.conlog.val.phb.DispTamperResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations162 = 0;
            int readerCount162 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id303_dispTamper && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@dispTamper = Read188_DispTamperTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispTamper");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispTamper");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations162, ref readerCount162);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispTamperTokenIssue Read188_DispTamperTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id304_DispTamperTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispTamperTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.DispTamperTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations163 = 0;
            int readerCount163 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations163, ref readerCount163);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispKRNResp Read208_DispKRNResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id277_DispKRNResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispKRNResp o;
            o = new global::PwkApi.com.conlog.val.phb.DispKRNResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations164 = 0;
            int readerCount164 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id305_dispKRN && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@dispKRN = Read193_DispKRNTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispKRN");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispKRN");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations164, ref readerCount164);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispKRNTokenIssue Read193_DispKRNTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id306_DispKRNTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispKRNTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.DispKRNTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations165 = 0;
            int readerCount165 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations165, ref readerCount165);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispTIResp Read209_DispTIResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id276_DispTIResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispTIResp o;
            o = new global::PwkApi.com.conlog.val.phb.DispTIResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations166 = 0;
            int readerCount166 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id307_dispTI && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@dispTI = Read190_DispTITokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispTI");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispTI");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations166, ref readerCount166);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispTITokenIssue Read190_DispTITokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id308_DispTITokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispTITokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.DispTITokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations167 = 0;
            int readerCount167 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations167, ref readerCount167);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispPwrLmtResp Read210_DispPwrLmtResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id275_DispPwrLmtResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispPwrLmtResp o;
            o = new global::PwkApi.com.conlog.val.phb.DispPwrLmtResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations168 = 0;
            int readerCount168 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id309_dispPwrLmt && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@dispPwrLmt = Read191_DispPwrLmtTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispPwrLmt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:dispPwrLmt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations168, ref readerCount168);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DispPwrLmtTokenIssue Read191_DispPwrLmtTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id310_DispPwrLmtTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DispPwrLmtTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.DispPwrLmtTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations169 = 0;
            int readerCount169 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations169, ref readerCount169);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TestBreakerResp Read211_TestBreakerResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id274_TestBreakerResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TestBreakerResp o;
            o = new global::PwkApi.com.conlog.val.phb.TestBreakerResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations170 = 0;
            int readerCount170 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id311_testBreaker && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@testBreaker = Read189_TestBreakerTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:testBreaker");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:testBreaker");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations170, ref readerCount170);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TestBreakerTokenIssue Read189_TestBreakerTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id312_TestBreakerTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TestBreakerTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.TestBreakerTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations171 = 0;
            int readerCount171 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations171, ref readerCount171);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TestDisplayResp Read213_TestDisplayResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id273_TestDisplayResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TestDisplayResp o;
            o = new global::PwkApi.com.conlog.val.phb.TestDisplayResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations172 = 0;
            int readerCount172 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id313_testDisp && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@testDisp = Read185_TestDisplayTokenIssue(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:testDisp");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:testDisp");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations172, ref readerCount172);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TestDisplayTokenIssue Read185_TestDisplayTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id314_TestDisplayTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TestDisplayTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.TestDisplayTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations173 = 0;
            int readerCount173 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id100_meterType && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterType = Read19_MeterType(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterType, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations173, ref readerCount173);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.NonMeterSpecificEngResp Read212_NonMeterSpecificEngResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id272_NonMeterSpecificEngResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id273_TestDisplayResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read213_TestDisplayResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id274_TestBreakerResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read211_TestBreakerResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id275_DispPwrLmtResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read210_DispPwrLmtResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id276_DispTIResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read209_DispTIResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id277_DispKRNResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read208_DispKRNResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id278_DispTamperResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read207_DispTamperResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id279_DispInstPwrResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read206_DispInstPwrResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id280_DispConsTotResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read205_DispConsTotResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id281_DispPhUnbalanceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read204_DispPhUnbalanceResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id282_DispVerResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read203_DispVerResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id283_DispRegistersResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read202_DispRegistersResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id284_MenuAccessResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read201_MenuAccessResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id285_TestAllResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read200_TestAllResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id286_TestDispenserResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read199_TestDispenserResp(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"NonMeterSpecificEngResp", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.PayAccResp Read251_PayAccResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id271_PayAccResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.PayAccResp o;
            o = new global::PwkApi.com.conlog.val.phb.PayAccResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations174 = 0;
            int readerCount174 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id315_payAccReceipt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@payAccReceipt = Read54_PayAccReceipt(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:payAccReceipt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:payAccReceipt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations174, ref readerCount174);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.PayAccReceipt Read54_PayAccReceipt(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id316_PayAccReceipt && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.PayAccReceipt o;
            o = new global::PwkApi.com.conlog.val.phb.PayAccReceipt();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id48_receiptNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@receiptNo = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":receiptNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations175 = 0;
            int readerCount175 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id136_transactions && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@transactions = Read53_Transactions(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:transactions, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:meterDetail");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:transactions, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:meterDetail");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations175, ref readerCount175);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CancelVendResp Read254_CancelVendResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id270_CancelVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id31_CancelPendingResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read253_CancelPendingResp(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CancelVendResp o;
            o = new global::PwkApi.com.conlog.val.phb.CancelVendResp();
            bool[] paramsRead = new bool[14];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[13] && ((object) Reader.LocalName == (object)id32_cancelRefNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@cancelRefNo = Reader.Value;
                    paramsRead[13] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":cancelRefNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations176 = 0;
            int readerCount176 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id46_origTx && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@origTx = Read51_CreditVendTx(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:origTx");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:origTx");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations176, ref readerCount176);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ReprintResp Read255_ReprintResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id269_ReprintResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ReprintResp o;
            o = new global::PwkApi.com.conlog.val.phb.ReprintResp();
            global::PwkApi.com.conlog.val.phb.BaseVendResp[] a_12 = null;
            int ca_12 = 0;
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@reprint = (global::PwkApi.com.conlog.val.phb.BaseVendResp[])ShrinkArray(a_12, ca_12, typeof(global::PwkApi.com.conlog.val.phb.BaseVendResp), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations177 = 0;
            int readerCount177 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id317_reprint && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_12 = (global::PwkApi.com.conlog.val.phb.BaseVendResp[])EnsureArrayIndex(a_12, ca_12, typeof(global::PwkApi.com.conlog.val.phb.BaseVendResp));a_12[ca_12++] = Read265_BaseVendResp(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:reprint");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:reprint");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations177, ref readerCount177);
            }
            o.@reprint = (global::PwkApi.com.conlog.val.phb.BaseVendResp[])ShrinkArray(a_12, ca_12, typeof(global::PwkApi.com.conlog.val.phb.BaseVendResp), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.BaseVendResp Read265_BaseVendResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id258_BaseVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id259_VerifyResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read272_VerifyResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id260_UpdateMeterKeyResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read264_UpdateMeterKeyResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id261_MeterSpecificEngResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read263_MeterSpecificEngResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id262_DefCreditResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read262_DefCreditResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id263_PwrLmtResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read261_PwrLmtResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id264_PhUnbalResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read260_PhUnbalResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id265_ClearCreditResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read259_ClearCreditResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id266_ClearTamperResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read258_ClearTamperResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id267_EngKCTResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read257_EngKCTResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id268_SetWaterFactorResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read256_SetWaterFactorResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id269_ReprintResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read255_ReprintResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id270_CancelVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read254_CancelVendResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id31_CancelPendingResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read253_CancelPendingResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id153_MeterCreditTransferResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read252_MeterCreditTransferResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id271_PayAccResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read251_PayAccResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id161_CreditVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read249_CreditVendResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id160_FBEResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read250_FBEResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id159_TrialCreditVendResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read248_TrialCreditVendResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id133_FreeIssueResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                return Read247_FreeIssueResp(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.BaseVendResp o;
            o = new global::PwkApi.com.conlog.val.phb.BaseVendResp();
            bool[] paramsRead = new bool[12];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations178 = 0;
            int readerCount178 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations178, ref readerCount178);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.SetWaterFactorResp Read256_SetWaterFactorResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id268_SetWaterFactorResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.SetWaterFactorResp o;
            o = new global::PwkApi.com.conlog.val.phb.SetWaterFactorResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations179 = 0;
            int readerCount179 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id318_waterFactor && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@waterFactor = Read25_WaterFactorTokenIssue(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:waterFactor");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:waterFactor");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations179, ref readerCount179);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.WaterFactorTokenIssue Read25_WaterFactorTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id319_WaterFactorTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.WaterFactorTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.WaterFactorTokenIssue();
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations180 = 0;
            int readerCount180 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id318_waterFactor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@waterFactor = Reader.ReadElementString();
                        }
                        paramsRead[3] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:waterFactor");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:waterFactor");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations180, ref readerCount180);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.EngKCTResp Read257_EngKCTResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id267_EngKCTResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.EngKCTResp o;
            o = new global::PwkApi.com.conlog.val.phb.EngKCTResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations181 = 0;
            int readerCount181 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id320_engKCToken && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@engKCToken = Read30_KCTokenIssue(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:engKCToken");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:engKCToken");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations181, ref readerCount181);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.KCTokenIssue Read30_KCTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id321_KCTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.KCTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.KCTokenIssue();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations182 = 0;
            int readerCount182 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id322_kctData && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@kctData = Read29_KCTData(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id323_pwrLmtToken && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@pwrLmtToken = Read28_PwrLmtTokenIssue(false, true);
                        paramsRead[4] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:kctData, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:pwrLmtToken");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:kctData, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:pwrLmtToken");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations182, ref readerCount182);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.PwrLmtTokenIssue Read28_PwrLmtTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id324_PwrLmtTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.PwrLmtTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.PwrLmtTokenIssue();
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations183 = 0;
            int readerCount183 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id325_pwrLmt && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@pwrLmt = Read26_PwrLmt(false, true);
                        paramsRead[3] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:pwrLmt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:pwrLmt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations183, ref readerCount183);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.PwrLmt Read26_PwrLmt(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id326_PwrLmt && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.PwrLmt o;
            o = new global::PwkApi.com.conlog.val.phb.PwrLmt();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id63_value && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@value = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id66_siUnit && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@siUnit = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":value, :siUnit");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations184 = 0;
            int readerCount184 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations184, ref readerCount184);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.KCTData Read29_KCTData(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id327_KCTData && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.KCTData o;
            o = new global::PwkApi.com.conlog.val.phb.KCTData();
            bool[] paramsRead = new bool[6];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id328_fromSGC && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@fromSGC = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id329_fromKRN && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@fromKRN = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id330_fromTI && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@fromTI = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id331_toSGC && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@toSGC = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id332_toKRN && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@toKRN = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id333_toTI && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@toTI = Reader.Value;
                    paramsRead[5] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":fromSGC, :fromKRN, :fromTI, :toSGC, :toKRN, :toTI");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations185 = 0;
            int readerCount185 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations185, ref readerCount185);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ClearTamperResp Read258_ClearTamperResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id266_ClearTamperResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ClearTamperResp o;
            o = new global::PwkApi.com.conlog.val.phb.ClearTamperResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations186 = 0;
            int readerCount186 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id334_clearTamper && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@clearTamper = Read24_ClearTamperTokenIssue(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:clearTamper");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:clearTamper");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations186, ref readerCount186);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ClearTamperTokenIssue Read24_ClearTamperTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id335_ClearTamperTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ClearTamperTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.ClearTamperTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations187 = 0;
            int readerCount187 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations187, ref readerCount187);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ClearCreditResp Read259_ClearCreditResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id265_ClearCreditResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ClearCreditResp o;
            o = new global::PwkApi.com.conlog.val.phb.ClearCreditResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations188 = 0;
            int readerCount188 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id336_clearCredit && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@clearCredit = Read32_ClearCreditTokenIssue(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:clearCredit");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:clearCredit");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations188, ref readerCount188);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ClearCreditTokenIssue Read32_ClearCreditTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id337_ClearCreditTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ClearCreditTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.ClearCreditTokenIssue();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations189 = 0;
            int readerCount189 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations189, ref readerCount189);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.PhUnbalResp Read260_PhUnbalResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id264_PhUnbalResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.PhUnbalResp o;
            o = new global::PwkApi.com.conlog.val.phb.PhUnbalResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations190 = 0;
            int readerCount190 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id338_phUnbalance && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@phUnbalance = Read27_PhUnbalTokenIssue(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:phUnbalance");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:phUnbalance");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations190, ref readerCount190);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.PhUnbalTokenIssue Read27_PhUnbalTokenIssue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id339_PhUnbalTokenIssue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.PhUnbalTokenIssue o;
            o = new global::PwkApi.com.conlog.val.phb.PhUnbalTokenIssue();
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations191 = 0;
            int readerCount191 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id80_token && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@token = Read23_Token(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id325_pwrLmt && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@pwrLmt = Read26_PwrLmt(false, true);
                        paramsRead[3] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:pwrLmt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:token, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:pwrLmt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations191, ref readerCount191);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.PwrLmtResp Read261_PwrLmtResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id263_PwrLmtResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.PwrLmtResp o;
            o = new global::PwkApi.com.conlog.val.phb.PwrLmtResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations192 = 0;
            int readerCount192 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id323_pwrLmtToken && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@pwrLmtToken = Read28_PwrLmtTokenIssue(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:pwrLmtToken");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:pwrLmtToken");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations192, ref readerCount192);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DefCreditResp Read262_DefCreditResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id262_DefCreditResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DefCreditResp o;
            o = new global::PwkApi.com.conlog.val.phb.DefCreditResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations193 = 0;
            int readerCount193 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id340_defCredit && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@defCredit = Read46_CreditTokenIssue(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:defCredit");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:defCredit");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations193, ref readerCount193);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterSpecificEngResp Read263_MeterSpecificEngResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id261_MeterSpecificEngResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id262_DefCreditResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read262_DefCreditResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id263_PwrLmtResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read261_PwrLmtResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id264_PhUnbalResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read260_PhUnbalResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id265_ClearCreditResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read259_ClearCreditResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id266_ClearTamperResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read258_ClearTamperResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id267_EngKCTResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read257_EngKCTResp(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id268_SetWaterFactorResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read256_SetWaterFactorResp(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"MeterSpecificEngResp", @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.UpdateMeterKeyResp Read264_UpdateMeterKeyResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id260_UpdateMeterKeyResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.UpdateMeterKeyResp o;
            o = new global::PwkApi.com.conlog.val.phb.UpdateMeterKeyResp();
            bool[] paramsRead = new bool[13];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations194 = 0;
            int readerCount194 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id341_updateMeterKey && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@updateMeterKey = Read30_KCTokenIssue(false, true);
                        paramsRead[12] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:updateMeterKey");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:updateMeterKey");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations194, ref readerCount194);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.VerifyResp Read272_VerifyResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id259_VerifyResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.VerifyResp o;
            o = new global::PwkApi.com.conlog.val.phb.VerifyResp();
            bool[] paramsRead = new bool[14];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations195 = 0;
            int readerCount195 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id43_clientStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientStatus = Read245_ClientStatus(false, true);
                        paramsRead[9] = true;
                    }
                    else if (!paramsRead[10] && ((object) Reader.LocalName == (object)id44_vendor && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@vendor = Read246_VendorDetail(false, true);
                        paramsRead[10] = true;
                    }
                    else if (!paramsRead[11] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[11] = true;
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id342_creditVendTx && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@creditVendTx = Read51_CreditVendTx(false, true);
                        paramsRead[12] = true;
                    }
                    else if (!paramsRead[13] && ((object) Reader.LocalName == (object)id343_tokenInfo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@tokenInfo = Read271_TokenInfo(false, true);
                        paramsRead[13] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendTx, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tokenInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientStatus, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:vendor, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:creditVendTx, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:tokenInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations195, ref readerCount195);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TokenInfo Read271_TokenInfo(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id344_TokenInfo && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id345_STS1TokenInfo && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read270_STS1TokenInfo(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"TokenInfo", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.STS1TokenInfo Read270_STS1TokenInfo(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id345_STS1TokenInfo && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.STS1TokenInfo o;
            o = new global::PwkApi.com.conlog.val.phb.STS1TokenInfo();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations196 = 0;
            int readerCount196 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id346_tokenID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@tokenID = System.Xml.XmlConvert.ToDecimal(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id347_transferAmt && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@transferAmt = System.Xml.XmlConvert.ToDecimal(Reader.ReadElementString());
                        }
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id348_tokenClass && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@tokenClass = Read269_TokenSubClassType(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:tokenID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:transferAmt, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:tokenClass");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:tokenID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:transferAmt, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:tokenClass");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations196, ref readerCount196);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TokenSubClassType Read269_TokenSubClassType(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id349_TokenSubClassType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TokenSubClassType o;
            o = new global::PwkApi.com.conlog.val.phb.TokenSubClassType();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations197 = 0;
            int readerCount197 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id350_nonMeterManagement && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@Item = Read266_NonMeterSpecificEng(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[0] && ((object) Reader.LocalName == (object)id351_credit && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@Item = Read267_CreditTokenSubClassType(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[0] && ((object) Reader.LocalName == (object)id352_meterManagement && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@Item = Read268_MeterSpecificEng(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:nonMeterManagement, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:credit, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterManagement");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:nonMeterManagement, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:credit, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterManagement");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations197, ref readerCount197);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterSpecificEng Read268_MeterSpecificEng(string s) {
            switch (s) {
                case @"SetPwrLmt": return global::PwkApi.com.conlog.val.phb.MeterSpecificEng.@SetPwrLmt;
                case @"SetPhUnbalance": return global::PwkApi.com.conlog.val.phb.MeterSpecificEng.@SetPhUnbalance;
                case @"AddDefaultCred": return global::PwkApi.com.conlog.val.phb.MeterSpecificEng.@AddDefaultCred;
                case @"ClearCred": return global::PwkApi.com.conlog.val.phb.MeterSpecificEng.@ClearCred;
                case @"ClearTamper": return global::PwkApi.com.conlog.val.phb.MeterSpecificEng.@ClearTamper;
                case @"EngKCT": return global::PwkApi.com.conlog.val.phb.MeterSpecificEng.@EngKCT;
                case @"SetWaterFact": return global::PwkApi.com.conlog.val.phb.MeterSpecificEng.@SetWaterFact;
                default: throw CreateUnknownConstantException(s, typeof(global::PwkApi.com.conlog.val.phb.MeterSpecificEng));
            }
        }

        global::PwkApi.com.conlog.val.phb.CreditTokenSubClassType Read267_CreditTokenSubClassType(string s) {
            switch (s) {
                case @"Electricity Token": return global::PwkApi.com.conlog.val.phb.CreditTokenSubClassType.@ElectricityToken;
                case @"Water Token": return global::PwkApi.com.conlog.val.phb.CreditTokenSubClassType.@WaterToken;
                case @"Gas Token": return global::PwkApi.com.conlog.val.phb.CreditTokenSubClassType.@GasToken;
                case @"Connection time Token": return global::PwkApi.com.conlog.val.phb.CreditTokenSubClassType.@ConnectiontimeToken;
                case @"Currency Token": return global::PwkApi.com.conlog.val.phb.CreditTokenSubClassType.@CurrencyToken;
                default: throw CreateUnknownConstantException(s, typeof(global::PwkApi.com.conlog.val.phb.CreditTokenSubClassType));
            }
        }

        global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng Read266_NonMeterSpecificEng(string s) {
            switch (s) {
                case @"TestAll": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@TestAll;
                case @"TestBreaker": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@TestBreaker;
                case @"TestDisp": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@TestDisp;
                case @"DispPwrLmt": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@DispPwrLmt;
                case @"DispTI": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@DispTI;
                case @"DispKRN": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@DispKRN;
                case @"DispTamper": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@DispTamper;
                case @"DispInstPwr": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@DispInstPwr;
                case @"DispConsTot": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@DispConsTot;
                case @"DispUnbalance": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@DispUnbalance;
                case @"DispVer": return global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng.@DispVer;
                default: throw CreateUnknownConstantException(s, typeof(global::PwkApi.com.conlog.val.phb.NonMeterSpecificEng));
            }
        }

        global::PwkApi.com.conlog.val.phb.XMLVendFaultResp Read327_XMLVendFaultResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id257_XMLVendFaultResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.XMLVendFaultResp o;
            o = new global::PwkApi.com.conlog.val.phb.XMLVendFaultResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations198 = 0;
            int readerCount198 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id353_fault && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@fault = Read326_Fault(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:fault");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:fault");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations198, ref readerCount198);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.Fault Read326_Fault(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id354_Fault && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id355_SystemEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read325_SystemEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id356_ServeryBusyEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read324_ServeryBusyEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id357_ExpiredMessageEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read323_ExpiredMessageEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id358_XMLVendFaultEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read321_XMLVendFaultEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id359_ConfirmationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read322_ConfirmationEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id360_UseCaseSupportEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read320_UseCaseSupportEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id361_ClientIDSSLEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read319_ClientIDSSLEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id362_LastResponseEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read318_LastResponseEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id363_XMLVendSchemaEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read317_XMLVendSchemaEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id364_ReversalEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read316_ReversalEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id365_BusinessRuleEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read314_BusinessRuleEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id366_DebtEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read315_DebtEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id367_RequestAuthorisationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read313_RequestAuthorisationEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id368_MSNOCheckDigitEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read312_MSNOCheckDigitEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id369_SGCAuthorisationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read311_SGCAuthorisationEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id370_LatestKRNEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read310_LatestKRNEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id371_FBEEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read309_FBEEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id372_BlockedMeterEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read308_BlockedMeterEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id373_UpdateMtrKeySameEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read307_UpdateMtrKeySameEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id374_VendorCreditEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read306_VendorCreditEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id375_ClientIDAuthorisationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read305_ClientIDAuthorisationEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id376_ConfirmCustomerEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read304_ConfirmCustomerEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id377_CancelEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read303_CancelEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id378_CheckBatchTotalEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read302_CheckBatchTotalEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id379_EndBatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read301_EndBatchEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id380_InsufficientMeterDataEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read300_InsufficientMeterDataEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id381_ReprintDepositSlipEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read299_ReprintDepositSlipEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id382_ReprintEndBatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read298_ReprintEndBatchEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id383_ReprintEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read297_ReprintEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id384_RequireMeterCardEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read296_RequireMeterCardEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id385_StartBatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read295_StartBatchEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id386_ServiceChrgEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read294_ServiceChrgEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id387_UnknownMeterEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read293_UnknownMeterEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id388_UnknownMeterUpdateMtrKeyEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read292_UnknownMeterUpdateMtrKeyEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id389_STSDataEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read291_STSDataEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id390_VerifyTokenEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read290_VerifyTokenEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id391_UnknownMeterFBEEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read289_UnknownMeterFBEEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id392_DuplicateMsgIDEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read288_DuplicateMsgIDEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id393_GracePurchaseEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read287_GracePurchaseEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id394_OtherDataEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read286_OtherDataEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id395_MeterDataMisMatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read285_MeterDataMisMatchEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id396_AccNumMeterLinkEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read284_AccNumMeterLinkEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id397_AccNumEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read283_AccNumEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id398_EngParameterEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read282_EngParameterEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id399_AccTypeEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read281_AccTypeEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id400_IndeterminantLastResponseEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read280_IndeterminantLastResponseEx(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"Fault", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.IndeterminantLastResponseEx Read280_IndeterminantLastResponseEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id400_IndeterminantLastResponseEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.IndeterminantLastResponseEx o;
            o = new global::PwkApi.com.conlog.val.phb.IndeterminantLastResponseEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations199 = 0;
            int readerCount199 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations199, ref readerCount199);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.AccTypeEx Read281_AccTypeEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id399_AccTypeEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.AccTypeEx o;
            o = new global::PwkApi.com.conlog.val.phb.AccTypeEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations200 = 0;
            int readerCount200 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations200, ref readerCount200);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.EngParameterEx Read282_EngParameterEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id398_EngParameterEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.EngParameterEx o;
            o = new global::PwkApi.com.conlog.val.phb.EngParameterEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations201 = 0;
            int readerCount201 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations201, ref readerCount201);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.AccNumEx Read283_AccNumEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id397_AccNumEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.AccNumEx o;
            o = new global::PwkApi.com.conlog.val.phb.AccNumEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations202 = 0;
            int readerCount202 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations202, ref readerCount202);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.AccNumMeterLinkEx Read284_AccNumMeterLinkEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id396_AccNumMeterLinkEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.AccNumMeterLinkEx o;
            o = new global::PwkApi.com.conlog.val.phb.AccNumMeterLinkEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations203 = 0;
            int readerCount203 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations203, ref readerCount203);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterDataMisMatchEx Read285_MeterDataMisMatchEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id395_MeterDataMisMatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterDataMisMatchEx o;
            o = new global::PwkApi.com.conlog.val.phb.MeterDataMisMatchEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations204 = 0;
            int readerCount204 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations204, ref readerCount204);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.OtherDataEx Read286_OtherDataEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id394_OtherDataEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.OtherDataEx o;
            o = new global::PwkApi.com.conlog.val.phb.OtherDataEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations205 = 0;
            int readerCount205 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations205, ref readerCount205);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.GracePurchaseEx Read287_GracePurchaseEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id393_GracePurchaseEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.GracePurchaseEx o;
            o = new global::PwkApi.com.conlog.val.phb.GracePurchaseEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations206 = 0;
            int readerCount206 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations206, ref readerCount206);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DuplicateMsgIDEx Read288_DuplicateMsgIDEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id392_DuplicateMsgIDEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DuplicateMsgIDEx o;
            o = new global::PwkApi.com.conlog.val.phb.DuplicateMsgIDEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations207 = 0;
            int readerCount207 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations207, ref readerCount207);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.UnknownMeterFBEEx Read289_UnknownMeterFBEEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id391_UnknownMeterFBEEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.UnknownMeterFBEEx o;
            o = new global::PwkApi.com.conlog.val.phb.UnknownMeterFBEEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations208 = 0;
            int readerCount208 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations208, ref readerCount208);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.VerifyTokenEx Read290_VerifyTokenEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id390_VerifyTokenEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.VerifyTokenEx o;
            o = new global::PwkApi.com.conlog.val.phb.VerifyTokenEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations209 = 0;
            int readerCount209 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations209, ref readerCount209);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.STSDataEx Read291_STSDataEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id389_STSDataEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.STSDataEx o;
            o = new global::PwkApi.com.conlog.val.phb.STSDataEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations210 = 0;
            int readerCount210 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations210, ref readerCount210);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.UnknownMeterUpdateMtrKeyEx Read292_UnknownMeterUpdateMtrKeyEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id388_UnknownMeterUpdateMtrKeyEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.UnknownMeterUpdateMtrKeyEx o;
            o = new global::PwkApi.com.conlog.val.phb.UnknownMeterUpdateMtrKeyEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations211 = 0;
            int readerCount211 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations211, ref readerCount211);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.UnknownMeterEx Read293_UnknownMeterEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id387_UnknownMeterEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.UnknownMeterEx o;
            o = new global::PwkApi.com.conlog.val.phb.UnknownMeterEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations212 = 0;
            int readerCount212 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations212, ref readerCount212);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ServiceChrgEx Read294_ServiceChrgEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id386_ServiceChrgEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ServiceChrgEx o;
            o = new global::PwkApi.com.conlog.val.phb.ServiceChrgEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations213 = 0;
            int readerCount213 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations213, ref readerCount213);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.StartBatchEx Read295_StartBatchEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id385_StartBatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.StartBatchEx o;
            o = new global::PwkApi.com.conlog.val.phb.StartBatchEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations214 = 0;
            int readerCount214 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations214, ref readerCount214);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.RequireMeterCardEx Read296_RequireMeterCardEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id384_RequireMeterCardEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.RequireMeterCardEx o;
            o = new global::PwkApi.com.conlog.val.phb.RequireMeterCardEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations215 = 0;
            int readerCount215 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations215, ref readerCount215);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ReprintEx Read297_ReprintEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id383_ReprintEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ReprintEx o;
            o = new global::PwkApi.com.conlog.val.phb.ReprintEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations216 = 0;
            int readerCount216 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations216, ref readerCount216);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ReprintEndBatchEx Read298_ReprintEndBatchEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id382_ReprintEndBatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ReprintEndBatchEx o;
            o = new global::PwkApi.com.conlog.val.phb.ReprintEndBatchEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations217 = 0;
            int readerCount217 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations217, ref readerCount217);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ReprintDepositSlipEx Read299_ReprintDepositSlipEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id381_ReprintDepositSlipEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ReprintDepositSlipEx o;
            o = new global::PwkApi.com.conlog.val.phb.ReprintDepositSlipEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations218 = 0;
            int readerCount218 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations218, ref readerCount218);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.InsufficientMeterDataEx Read300_InsufficientMeterDataEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id380_InsufficientMeterDataEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.InsufficientMeterDataEx o;
            o = new global::PwkApi.com.conlog.val.phb.InsufficientMeterDataEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations219 = 0;
            int readerCount219 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations219, ref readerCount219);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.EndBatchEx Read301_EndBatchEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id379_EndBatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.EndBatchEx o;
            o = new global::PwkApi.com.conlog.val.phb.EndBatchEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations220 = 0;
            int readerCount220 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations220, ref readerCount220);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CheckBatchTotalEx Read302_CheckBatchTotalEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id378_CheckBatchTotalEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CheckBatchTotalEx o;
            o = new global::PwkApi.com.conlog.val.phb.CheckBatchTotalEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations221 = 0;
            int readerCount221 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations221, ref readerCount221);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CancelEx Read303_CancelEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id377_CancelEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CancelEx o;
            o = new global::PwkApi.com.conlog.val.phb.CancelEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations222 = 0;
            int readerCount222 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations222, ref readerCount222);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConfirmCustomerEx Read304_ConfirmCustomerEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id376_ConfirmCustomerEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConfirmCustomerEx o;
            o = new global::PwkApi.com.conlog.val.phb.ConfirmCustomerEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations223 = 0;
            int readerCount223 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations223, ref readerCount223);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ClientIDAuthorisationEx Read305_ClientIDAuthorisationEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id375_ClientIDAuthorisationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ClientIDAuthorisationEx o;
            o = new global::PwkApi.com.conlog.val.phb.ClientIDAuthorisationEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations224 = 0;
            int readerCount224 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations224, ref readerCount224);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.VendorCreditEx Read306_VendorCreditEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id374_VendorCreditEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.VendorCreditEx o;
            o = new global::PwkApi.com.conlog.val.phb.VendorCreditEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations225 = 0;
            int readerCount225 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations225, ref readerCount225);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.UpdateMtrKeySameEx Read307_UpdateMtrKeySameEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id373_UpdateMtrKeySameEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.UpdateMtrKeySameEx o;
            o = new global::PwkApi.com.conlog.val.phb.UpdateMtrKeySameEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations226 = 0;
            int readerCount226 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations226, ref readerCount226);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.BlockedMeterEx Read308_BlockedMeterEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id372_BlockedMeterEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.BlockedMeterEx o;
            o = new global::PwkApi.com.conlog.val.phb.BlockedMeterEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations227 = 0;
            int readerCount227 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations227, ref readerCount227);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.FBEEx Read309_FBEEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id371_FBEEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.FBEEx o;
            o = new global::PwkApi.com.conlog.val.phb.FBEEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations228 = 0;
            int readerCount228 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations228, ref readerCount228);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.LatestKRNEx Read310_LatestKRNEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id370_LatestKRNEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.LatestKRNEx o;
            o = new global::PwkApi.com.conlog.val.phb.LatestKRNEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations229 = 0;
            int readerCount229 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations229, ref readerCount229);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.SGCAuthorisationEx Read311_SGCAuthorisationEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id369_SGCAuthorisationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.SGCAuthorisationEx o;
            o = new global::PwkApi.com.conlog.val.phb.SGCAuthorisationEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations230 = 0;
            int readerCount230 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations230, ref readerCount230);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MSNOCheckDigitEx Read312_MSNOCheckDigitEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id368_MSNOCheckDigitEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MSNOCheckDigitEx o;
            o = new global::PwkApi.com.conlog.val.phb.MSNOCheckDigitEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations231 = 0;
            int readerCount231 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations231, ref readerCount231);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.RequestAuthorisationEx Read313_RequestAuthorisationEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id367_RequestAuthorisationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.RequestAuthorisationEx o;
            o = new global::PwkApi.com.conlog.val.phb.RequestAuthorisationEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations232 = 0;
            int readerCount232 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations232, ref readerCount232);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DebtEx Read315_DebtEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id366_DebtEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DebtEx o;
            o = new global::PwkApi.com.conlog.val.phb.DebtEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations233 = 0;
            int readerCount233 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations233, ref readerCount233);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.BusinessRuleEx Read314_BusinessRuleEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id365_BusinessRuleEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id366_DebtEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read315_DebtEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id367_RequestAuthorisationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read313_RequestAuthorisationEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id368_MSNOCheckDigitEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read312_MSNOCheckDigitEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id369_SGCAuthorisationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read311_SGCAuthorisationEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id370_LatestKRNEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read310_LatestKRNEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id371_FBEEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read309_FBEEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id372_BlockedMeterEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read308_BlockedMeterEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id373_UpdateMtrKeySameEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read307_UpdateMtrKeySameEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id374_VendorCreditEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read306_VendorCreditEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id375_ClientIDAuthorisationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read305_ClientIDAuthorisationEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id376_ConfirmCustomerEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read304_ConfirmCustomerEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id377_CancelEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read303_CancelEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id378_CheckBatchTotalEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read302_CheckBatchTotalEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id379_EndBatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read301_EndBatchEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id380_InsufficientMeterDataEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read300_InsufficientMeterDataEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id381_ReprintDepositSlipEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read299_ReprintDepositSlipEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id382_ReprintEndBatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read298_ReprintEndBatchEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id383_ReprintEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read297_ReprintEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id384_RequireMeterCardEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read296_RequireMeterCardEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id385_StartBatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read295_StartBatchEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id386_ServiceChrgEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read294_ServiceChrgEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id387_UnknownMeterEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read293_UnknownMeterEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id388_UnknownMeterUpdateMtrKeyEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read292_UnknownMeterUpdateMtrKeyEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id389_STSDataEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read291_STSDataEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id390_VerifyTokenEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read290_VerifyTokenEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id391_UnknownMeterFBEEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read289_UnknownMeterFBEEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id392_DuplicateMsgIDEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read288_DuplicateMsgIDEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id393_GracePurchaseEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read287_GracePurchaseEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id394_OtherDataEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read286_OtherDataEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id395_MeterDataMisMatchEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read285_MeterDataMisMatchEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id396_AccNumMeterLinkEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read284_AccNumMeterLinkEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id397_AccNumEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read283_AccNumEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id398_EngParameterEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read282_EngParameterEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id399_AccTypeEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read281_AccTypeEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id400_IndeterminantLastResponseEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read280_IndeterminantLastResponseEx(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.BusinessRuleEx o;
            o = new global::PwkApi.com.conlog.val.phb.BusinessRuleEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations234 = 0;
            int readerCount234 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations234, ref readerCount234);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ReversalEx Read316_ReversalEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id364_ReversalEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ReversalEx o;
            o = new global::PwkApi.com.conlog.val.phb.ReversalEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations235 = 0;
            int readerCount235 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations235, ref readerCount235);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.XMLVendSchemaEx Read317_XMLVendSchemaEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id363_XMLVendSchemaEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.XMLVendSchemaEx o;
            o = new global::PwkApi.com.conlog.val.phb.XMLVendSchemaEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations236 = 0;
            int readerCount236 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations236, ref readerCount236);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.LastResponseEx Read318_LastResponseEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id362_LastResponseEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.LastResponseEx o;
            o = new global::PwkApi.com.conlog.val.phb.LastResponseEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations237 = 0;
            int readerCount237 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations237, ref readerCount237);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ClientIDSSLEx Read319_ClientIDSSLEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id361_ClientIDSSLEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ClientIDSSLEx o;
            o = new global::PwkApi.com.conlog.val.phb.ClientIDSSLEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations238 = 0;
            int readerCount238 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations238, ref readerCount238);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.UseCaseSupportEx Read320_UseCaseSupportEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id360_UseCaseSupportEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.UseCaseSupportEx o;
            o = new global::PwkApi.com.conlog.val.phb.UseCaseSupportEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations239 = 0;
            int readerCount239 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations239, ref readerCount239);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConfirmationEx Read322_ConfirmationEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id359_ConfirmationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConfirmationEx o;
            o = new global::PwkApi.com.conlog.val.phb.ConfirmationEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations240 = 0;
            int readerCount240 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations240, ref readerCount240);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.XMLVendFaultEx Read321_XMLVendFaultEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id358_XMLVendFaultEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id359_ConfirmationEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read322_ConfirmationEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id360_UseCaseSupportEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read320_UseCaseSupportEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id361_ClientIDSSLEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read319_ClientIDSSLEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id362_LastResponseEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read318_LastResponseEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id363_XMLVendSchemaEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read317_XMLVendSchemaEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id364_ReversalEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read316_ReversalEx(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"XMLVendFaultEx", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.ExpiredMessageEx Read323_ExpiredMessageEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id357_ExpiredMessageEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ExpiredMessageEx o;
            o = new global::PwkApi.com.conlog.val.phb.ExpiredMessageEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations241 = 0;
            int readerCount241 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations241, ref readerCount241);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ServeryBusyEx Read324_ServeryBusyEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id356_ServeryBusyEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ServeryBusyEx o;
            o = new global::PwkApi.com.conlog.val.phb.ServeryBusyEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations242 = 0;
            int readerCount242 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations242, ref readerCount242);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.SystemEx Read325_SystemEx(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id355_SystemEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id356_ServeryBusyEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read324_ServeryBusyEx(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id357_ExpiredMessageEx && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id78_Item))
                return Read323_ExpiredMessageEx(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.SystemEx o;
            o = new global::PwkApi.com.conlog.val.phb.SystemEx();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations243 = 0;
            int readerCount243 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations243, ref readerCount243);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConfirmationAdviceResp Read330_ConfirmationAdviceResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id244_ConfirmationAdviceResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConfirmationAdviceResp o;
            o = new global::PwkApi.com.conlog.val.phb.ConfirmationAdviceResp();
            bool[] paramsRead = new bool[11];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[10] && ((object) Reader.LocalName == (object)id401_txConfirmed && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@txConfirmed = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    paramsRead[10] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":txConfirmed");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations244 = 0;
            int readerCount244 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id248_adviceReqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@adviceReqMsgID = Read60_MsgID(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:adviceReqMsgID");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:adviceReqMsgID");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations244, ref readerCount244);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ReprintDepositResp Read333_ReprintDepositResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id256_ReprintDepositResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ReprintDepositResp o;
            o = new global::PwkApi.com.conlog.val.phb.ReprintDepositResp();
            global::PwkApi.com.conlog.val.phb.DepositResp[] a_9 = null;
            int ca_9 = 0;
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@reprint = (global::PwkApi.com.conlog.val.phb.DepositResp[])ShrinkArray(a_9, ca_9, typeof(global::PwkApi.com.conlog.val.phb.DepositResp), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations245 = 0;
            int readerCount245 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id317_reprint && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_9 = (global::PwkApi.com.conlog.val.phb.DepositResp[])EnsureArrayIndex(a_9, ca_9, typeof(global::PwkApi.com.conlog.val.phb.DepositResp));a_9[ca_9++] = Read332_DepositResp(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:reprint");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:reprint");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations245, ref readerCount245);
            }
            o.@reprint = (global::PwkApi.com.conlog.val.phb.DepositResp[])ShrinkArray(a_9, ca_9, typeof(global::PwkApi.com.conlog.val.phb.DepositResp), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DepositResp Read332_DepositResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id255_DepositResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DepositResp o;
            o = new global::PwkApi.com.conlog.val.phb.DepositResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations246 = 0;
            int readerCount246 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id222_depSlip && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@depSlip = Read239_DepositSlip(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:depSlip");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:depSlip");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations246, ref readerCount246);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ReprintEndBatchResp Read335_ReprintEndBatchResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id254_ReprintEndBatchResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ReprintEndBatchResp o;
            o = new global::PwkApi.com.conlog.val.phb.ReprintEndBatchResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations247 = 0;
            int readerCount247 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id402_endBatchReprint && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@endBatchReprint = Read334_EndBatchResp(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:endBatchReprint");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:endBatchReprint");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations247, ref readerCount247);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.VendorStatementResp Read342_VendorStatementResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id253_VendorStatementResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.VendorStatementResp o;
            o = new global::PwkApi.com.conlog.val.phb.VendorStatementResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations248 = 0;
            int readerCount248 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id403_statement && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@statement = Read341_VendorStatement(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:statement");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:statement");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations248, ref readerCount248);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.VendorStatement Read341_VendorStatement(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id404_VendorStatement && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.VendorStatement o;
            o = new global::PwkApi.com.conlog.val.phb.VendorStatement();
            global::PwkApi.com.conlog.val.phb.VendorStatementLineItem[] a_3 = null;
            int ca_3 = 0;
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@lineItem = (global::PwkApi.com.conlog.val.phb.VendorStatementLineItem[])ShrinkArray(a_3, ca_3, typeof(global::PwkApi.com.conlog.val.phb.VendorStatementLineItem), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations249 = 0;
            int readerCount249 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@accNo = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id405_accBal && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@accBal = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id116_availCredit && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@availCredit = Read2_Currency(false, true);
                        paramsRead[2] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id406_lineItem && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_3 = (global::PwkApi.com.conlog.val.phb.VendorStatementLineItem[])EnsureArrayIndex(a_3, ca_3, typeof(global::PwkApi.com.conlog.val.phb.VendorStatementLineItem));a_3[ca_3++] = Read340_VendorStatementLineItem(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accBal, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:availCredit, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:lineItem");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accNo, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:accBal, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:availCredit, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:lineItem");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations249, ref readerCount249);
            }
            o.@lineItem = (global::PwkApi.com.conlog.val.phb.VendorStatementLineItem[])ShrinkArray(a_3, ca_3, typeof(global::PwkApi.com.conlog.val.phb.VendorStatementLineItem), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.VendorStatementLineItem Read340_VendorStatementLineItem(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id407_VendorStatementLineItem && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id408_CredLmtChg && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read339_CredLmtChg(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id409_CredUpdate && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read337_CredUpdate(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id410_ManualAdjCreditUpdate && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read338_ManualAdjCreditUpdate(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id411_DepositCreditUpdate && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read336_DepositCreditUpdate(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.VendorStatementLineItem o;
            o = new global::PwkApi.com.conlog.val.phb.VendorStatementLineItem();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations250 = 0;
            int readerCount250 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id412_appliedDate && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@appliedDate = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:appliedDate");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:appliedDate");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations250, ref readerCount250);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DepositCreditUpdate Read336_DepositCreditUpdate(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id411_DepositCreditUpdate && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DepositCreditUpdate o;
            o = new global::PwkApi.com.conlog.val.phb.DepositCreditUpdate();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[3] && ((object) Reader.LocalName == (object)id413_depositRefNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@depositRefNo = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id414_depositDate && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@depositDate = ToDateTime(Reader.Value);
                    paramsRead[4] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":depositRefNo, :depositDate");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations251 = 0;
            int readerCount251 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id412_appliedDate && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@appliedDate = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:appliedDate");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:appliedDate");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations251, ref readerCount251);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ManualAdjCreditUpdate Read338_ManualAdjCreditUpdate(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id410_ManualAdjCreditUpdate && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ManualAdjCreditUpdate o;
            o = new global::PwkApi.com.conlog.val.phb.ManualAdjCreditUpdate();
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[3] && ((object) Reader.LocalName == (object)id415_ref && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@ref = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":ref");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations252 = 0;
            int readerCount252 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id412_appliedDate && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@appliedDate = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:appliedDate");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:appliedDate");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations252, ref readerCount252);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CredUpdate Read337_CredUpdate(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id409_CredUpdate && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id410_ManualAdjCreditUpdate && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read338_ManualAdjCreditUpdate(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id411_DepositCreditUpdate && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item))
                return Read336_DepositCreditUpdate(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"CredUpdate", @"http://www.eskom.co.za/xmlvend/revenue-ext/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.CredLmtChg Read339_CredLmtChg(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id408_CredLmtChg && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id145_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CredLmtChg o;
            o = new global::PwkApi.com.conlog.val.phb.CredLmtChg();
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[3] && ((object) Reader.LocalName == (object)id415_ref && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@ref = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":ref");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations253 = 0;
            int readerCount253 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_amt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@amt = Read2_Currency(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id412_appliedDate && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@appliedDate = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:appliedDate");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:amt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:appliedDate");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations253, ref readerCount253);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CustReportFaultResp Read350_CustReportFaultResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id252_CustReportFaultResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CustReportFaultResp o;
            o = new global::PwkApi.com.conlog.val.phb.CustReportFaultResp();
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations254 = 0;
            int readerCount254 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id416_custFaultLog && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@custFaultLog = Read349_CustFaultLog(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:custFaultLog");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:custFaultLog");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations254, ref readerCount254);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CustFaultLog Read349_CustFaultLog(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id417_CustFaultLog && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CustFaultLog o;
            o = new global::PwkApi.com.conlog.val.phb.CustFaultLog();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id158_refNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@refNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":refNo");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations255 = 0;
            int readerCount255 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id418_custDetail && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@custDetail = Read63_CustDetail(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id419_faultReport && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@faultReport = Read90_CustFaultReport(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:custDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:faultReport");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:custDetail, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:faultReport");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations255, ref readerCount255);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CustFaultReport Read90_CustFaultReport(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id420_CustFaultReport && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id421_NetworkFaultReport && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read89_NetworkFaultReport(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id422_MeterFaultReport && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item))
                return Read86_MeterFaultReport(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id423_DeviceFault && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read87_DeviceFault(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id425_NoTrip && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read88_NoTrip(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id426_KeepsTripping && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read85_KeepsTripping(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id427_TokensNotWorking && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read84_TokensNotWorking(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id428_SeriousBoxDamage && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read83_SeriousBoxDamage(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id429_FireWaterDamage && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read82_FireWaterDamage(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id430_MeterDead && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read81_MeterDead(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id431_DisplayLightsButtons && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read80_DisplayLightsButtons(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id432_DataFault && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read74_DataFault(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id433_RecordMissing && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read79_RecordMissing(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id434_IncorrectSGC && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read73_IncorrectSGC(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id435_IncorrectTI && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read72_IncorrectTI(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CustFaultReport o;
            o = new global::PwkApi.com.conlog.val.phb.CustFaultReport();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations256 = 0;
            int readerCount256 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations256, ref readerCount256);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.IncorrectTI Read72_IncorrectTI(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id435_IncorrectTI && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.IncorrectTI o;
            o = new global::PwkApi.com.conlog.val.phb.IncorrectTI();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations257 = 0;
            int readerCount257 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations257, ref readerCount257);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.VendIDMethod Read71_VendIDMethod(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id437_VendIDMethod && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.VendIDMethod o;
            o = new global::PwkApi.com.conlog.val.phb.VendIDMethod();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations258 = 0;
            int readerCount258 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id438_meterIdentifier && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@meterIdentifier = Read17_MeterIdentifier(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterIdentifier");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:meterIdentifier");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations258, ref readerCount258);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterIdentifier Read17_MeterIdentifier(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id439_MeterIdentifier && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id440_MeterConfig && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read18_MeterConfig(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id94_MeterDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read20_MeterDetail(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id95_ExtMeterDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read14_ExtMeterDetail(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id441_MeterCard && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read13_MeterCard(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id442_MeterAccount && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read16_MeterAccount(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id443_MeterNumber && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read15_MeterNumber(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"MeterIdentifier", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.MeterNumber Read15_MeterNumber(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id443_MeterNumber && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterNumber o;
            o = new global::PwkApi.com.conlog.val.phb.MeterNumber();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id96_msno && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@msno = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":msno");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations259 = 0;
            int readerCount259 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations259, ref readerCount259);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterAccount Read16_MeterAccount(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id442_MeterAccount && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterAccount o;
            o = new global::PwkApi.com.conlog.val.phb.MeterAccount();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations260 = 0;
            int readerCount260 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id444_AccNo && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@AccNo = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id445_isSmartCard && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@isSmartCard = System.Xml.XmlConvert.ToBoolean(Reader.ReadElementString());
                        }
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:AccNo, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:isSmartCard");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:AccNo, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:isSmartCard");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations260, ref readerCount260);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterCard Read13_MeterCard(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id441_MeterCard && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterCard o;
            o = new global::PwkApi.com.conlog.val.phb.MeterCard();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations261 = 0;
            int readerCount261 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id105_track2Data && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@track2Data = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:track2Data");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:track2Data");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations261, ref readerCount261);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterConfig Read18_MeterConfig(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id440_MeterConfig && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id94_MeterDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read20_MeterDetail(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id95_ExtMeterDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read14_ExtMeterDetail(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id441_MeterCard && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read13_MeterCard(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"MeterConfig", @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.IncorrectSGC Read73_IncorrectSGC(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id434_IncorrectSGC && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.IncorrectSGC o;
            o = new global::PwkApi.com.conlog.val.phb.IncorrectSGC();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations262 = 0;
            int readerCount262 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations262, ref readerCount262);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.RecordMissing Read79_RecordMissing(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id433_RecordMissing && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.RecordMissing o;
            o = new global::PwkApi.com.conlog.val.phb.RecordMissing();
            bool[] paramsRead = new bool[3];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations263 = 0;
            int readerCount263 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id446_reason && (object) Reader.NamespaceURI == (object)id424_Item)) {
                        o.@reason = Read78_RecordMissingReason(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo, http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema:reason");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo, http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema:reason");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations263, ref readerCount263);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.RecordMissingReason Read78_RecordMissingReason(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id447_RecordMissingReason && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id448_NewInstallation && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read77_NewInstallation(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id449_ConvertedFrmConventional && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read76_ConvertedFrmConventional(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id450_MeterChangedOut && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read75_MeterChangedOut(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"RecordMissingReason", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.MeterChangedOut Read75_MeterChangedOut(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id450_MeterChangedOut && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterChangedOut o;
            o = new global::PwkApi.com.conlog.val.phb.MeterChangedOut();
            bool[] paramsRead = new bool[0];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations264 = 0;
            int readerCount264 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations264, ref readerCount264);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConvertedFrmConventional Read76_ConvertedFrmConventional(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id449_ConvertedFrmConventional && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConvertedFrmConventional o;
            o = new global::PwkApi.com.conlog.val.phb.ConvertedFrmConventional();
            bool[] paramsRead = new bool[0];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations265 = 0;
            int readerCount265 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations265, ref readerCount265);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.NewInstallation Read77_NewInstallation(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id448_NewInstallation && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.NewInstallation o;
            o = new global::PwkApi.com.conlog.val.phb.NewInstallation();
            bool[] paramsRead = new bool[0];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations266 = 0;
            int readerCount266 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations266, ref readerCount266);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DataFault Read74_DataFault(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id432_DataFault && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id433_RecordMissing && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read79_RecordMissing(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id434_IncorrectSGC && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read73_IncorrectSGC(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id435_IncorrectTI && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read72_IncorrectTI(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"DataFault", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.DisplayLightsButtons Read80_DisplayLightsButtons(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id431_DisplayLightsButtons && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.DisplayLightsButtons o;
            o = new global::PwkApi.com.conlog.val.phb.DisplayLightsButtons();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations267 = 0;
            int readerCount267 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations267, ref readerCount267);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.MeterDead Read81_MeterDead(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id430_MeterDead && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterDead o;
            o = new global::PwkApi.com.conlog.val.phb.MeterDead();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations268 = 0;
            int readerCount268 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations268, ref readerCount268);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.FireWaterDamage Read82_FireWaterDamage(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id429_FireWaterDamage && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.FireWaterDamage o;
            o = new global::PwkApi.com.conlog.val.phb.FireWaterDamage();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations269 = 0;
            int readerCount269 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations269, ref readerCount269);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.SeriousBoxDamage Read83_SeriousBoxDamage(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id428_SeriousBoxDamage && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.SeriousBoxDamage o;
            o = new global::PwkApi.com.conlog.val.phb.SeriousBoxDamage();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations270 = 0;
            int readerCount270 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations270, ref readerCount270);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.TokensNotWorking Read84_TokensNotWorking(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id427_TokensNotWorking && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.TokensNotWorking o;
            o = new global::PwkApi.com.conlog.val.phb.TokensNotWorking();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations271 = 0;
            int readerCount271 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations271, ref readerCount271);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.KeepsTripping Read85_KeepsTripping(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id426_KeepsTripping && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.KeepsTripping o;
            o = new global::PwkApi.com.conlog.val.phb.KeepsTripping();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations272 = 0;
            int readerCount272 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations272, ref readerCount272);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.NoTrip Read88_NoTrip(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id425_NoTrip && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.NoTrip o;
            o = new global::PwkApi.com.conlog.val.phb.NoTrip();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations273 = 0;
            int readerCount273 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations273, ref readerCount273);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.DeviceFault Read87_DeviceFault(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id423_DeviceFault && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id425_NoTrip && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read88_NoTrip(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id426_KeepsTripping && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read85_KeepsTripping(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id427_TokensNotWorking && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read84_TokensNotWorking(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id428_SeriousBoxDamage && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read83_SeriousBoxDamage(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id429_FireWaterDamage && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read82_FireWaterDamage(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id430_MeterDead && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read81_MeterDead(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id431_DisplayLightsButtons && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read80_DisplayLightsButtons(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            throw CreateAbstractTypeException(@"DeviceFault", @"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
        }

        global::PwkApi.com.conlog.val.phb.MeterFaultReport Read86_MeterFaultReport(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id422_MeterFaultReport && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id423_DeviceFault && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read87_DeviceFault(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id425_NoTrip && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read88_NoTrip(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id426_KeepsTripping && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read85_KeepsTripping(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id427_TokensNotWorking && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read84_TokensNotWorking(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id428_SeriousBoxDamage && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read83_SeriousBoxDamage(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id429_FireWaterDamage && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read82_FireWaterDamage(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id430_MeterDead && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read81_MeterDead(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id431_DisplayLightsButtons && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read80_DisplayLightsButtons(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id432_DataFault && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read74_DataFault(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id433_RecordMissing && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read79_RecordMissing(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id434_IncorrectSGC && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read73_IncorrectSGC(isNullable, false);
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id435_IncorrectTI && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id424_Item))
                return Read72_IncorrectTI(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.MeterFaultReport o;
            o = new global::PwkApi.com.conlog.val.phb.MeterFaultReport();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations274 = 0;
            int readerCount274 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id436_meterInfo && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        o.@meterInfo = Read71_VendIDMethod(false, true);
                        paramsRead[1] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc, http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:meterInfo");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations274, ref readerCount274);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.NetworkFaultReport Read89_NetworkFaultReport(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id421_NetworkFaultReport && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id8_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.NetworkFaultReport o;
            o = new global::PwkApi.com.conlog.val.phb.NetworkFaultReport();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations275 = 0;
            int readerCount275 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id69_desc && (object) Reader.NamespaceURI == (object)id8_Item)) {
                        {
                            o.@desc = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema:desc");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations275, ref readerCount275);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CustDetail Read63_CustDetail(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id451_CustDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id108_CustVendDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item))
                return Read62_CustVendDetail(isNullable, false);
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CustDetail o;
            o = new global::PwkApi.com.conlog.val.phb.CustDetail();
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id68_name && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@name = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id109_address && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@address = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id110_contactNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@contactNo = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id111_accNo && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@accNo = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id112_locRef && (object) Reader.NamespaceURI == (object)id33_Item)) {
                    o.@locRef = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":name, :address, :contactNo, :accNo, :locRef");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations276 = 0;
            int readerCount276 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations276, ref readerCount276);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConfirmCustomerResp Read358_ConfirmCustomerResp(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id251_ConfirmCustomerResp && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConfirmCustomerResp o;
            o = new global::PwkApi.com.conlog.val.phb.ConfirmCustomerResp();
            global::PwkApi.com.conlog.val.phb.ConfirmCustResult[] a_9 = null;
            int ca_9 = 0;
            bool[] paramsRead = new bool[10];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@confirmCustResult = (global::PwkApi.com.conlog.val.phb.ConfirmCustResult[])ShrinkArray(a_9, ca_9, typeof(global::PwkApi.com.conlog.val.phb.ConfirmCustResult), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations277 = 0;
            int readerCount277 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id34_clientID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@clientID = Read59_DeviceID(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id35_serverID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@serverID = Read59_DeviceID(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id36_terminalID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@terminalID = Read59_DeviceID(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id37_reqMsgID && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@reqMsgID = Read60_MsgID(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id38_respDateTime && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@respDateTime = ToDateTime(Reader.ReadElementString());
                        }
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id39_dispHeader && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@dispHeader = Reader.ReadElementString();
                        }
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id40_operatorMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@operatorMsg = Reader.ReadElementString();
                        }
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id41_custMsg && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@custMsg = Reader.ReadElementString();
                        }
                        paramsRead[7] = true;
                    }
                    else if (!paramsRead[8] && ((object) Reader.LocalName == (object)id42_utility && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@utility = Read198_UtilityDetail(false, true);
                        paramsRead[8] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id452_confirmCustResult && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_9 = (global::PwkApi.com.conlog.val.phb.ConfirmCustResult[])EnsureArrayIndex(a_9, ca_9, typeof(global::PwkApi.com.conlog.val.phb.ConfirmCustResult));a_9[ca_9++] = Read357_ConfirmCustResult(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:confirmCustResult");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:clientID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:serverID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:terminalID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:reqMsgID, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:respDateTime, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:dispHeader, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:operatorMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:custMsg, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:utility, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:confirmCustResult");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations277, ref readerCount277);
            }
            o.@confirmCustResult = (global::PwkApi.com.conlog.val.phb.ConfirmCustResult[])ShrinkArray(a_9, ca_9, typeof(global::PwkApi.com.conlog.val.phb.ConfirmCustResult), true);
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.ConfirmCustResult Read357_ConfirmCustResult(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id453_ConfirmCustResult && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.ConfirmCustResult o;
            o = new global::PwkApi.com.conlog.val.phb.ConfirmCustResult();
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations278 = 0;
            int readerCount278 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id45_custVendDetail && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@custVendDetail = Read62_CustVendDetail(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id454_custVendConfig && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@custVendConfig = Read354_CustVendConfig(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id79_meterDetail && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@meterDetail = Read20_MeterDetail(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id455_custAccountDetail && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@custAccountDetail = Read356_CustAccountDetail(false, true);
                        paramsRead[3] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:custVendConfig, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:custAccountDetail");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:custVendDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:custVendConfig, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:meterDetail, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:custAccountDetail");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations278, ref readerCount278);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CustAccountDetail Read356_CustAccountDetail(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id456_CustAccountDetail && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CustAccountDetail o;
            o = new global::PwkApi.com.conlog.val.phb.CustAccountDetail();
            global::PwkApi.com.conlog.val.phb.AccountStatus[] a_0 = null;
            int ca_0 = 0;
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations279 = 0;
            int readerCount279 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id457_accountStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        if (!ReadNull()) {
                            global::PwkApi.com.conlog.val.phb.AccountStatus[] a_0_0 = null;
                            int ca_0_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations280 = 0;
                                int readerCount280 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id458_AccountStatus && (object) Reader.NamespaceURI == (object)id17_Item)) {
                                            a_0_0 = (global::PwkApi.com.conlog.val.phb.AccountStatus[])EnsureArrayIndex(a_0_0, ca_0_0, typeof(global::PwkApi.com.conlog.val.phb.AccountStatus));a_0_0[ca_0_0++] = Read355_AccountStatus(true, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:AccountStatus");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:AccountStatus");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations280, ref readerCount280);
                                }
                            ReadEndElement();
                            }
                            o.@accountStatus = (global::PwkApi.com.conlog.val.phb.AccountStatus[])ShrinkArray(a_0_0, ca_0_0, typeof(global::PwkApi.com.conlog.val.phb.AccountStatus), false);
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:accountStatus");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:accountStatus");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations279, ref readerCount279);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.AccountStatus Read355_AccountStatus(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id458_AccountStatus && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id17_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.AccountStatus o;
            o = new global::PwkApi.com.conlog.val.phb.AccountStatus();
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations281 = 0;
            int readerCount281 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id459_accountIdentification && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@accountIdentification = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id460_accountName && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        {
                            o.@accountName = Reader.ReadElementString();
                        }
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id461_accountBalance && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@accountBalance = Read2_Currency(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id462_minimumPayment && (object) Reader.NamespaceURI == (object)id17_Item)) {
                        o.@minimumPayment = Read2_Currency(false, true);
                        paramsRead[3] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:accountIdentification, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:accountName, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:accountBalance, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:minimumPayment");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:accountIdentification, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:accountName, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:accountBalance, http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema:minimumPayment");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations281, ref readerCount281);
            }
            ReadEndElement();
            return o;
        }

        global::PwkApi.com.conlog.val.phb.CustVendConfig Read354_CustVendConfig(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id463_CustVendConfig && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::PwkApi.com.conlog.val.phb.CustVendConfig o;
            o = new global::PwkApi.com.conlog.val.phb.CustVendConfig();
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o);
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations282 = 0;
            int readerCount282 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id464_canVend && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@canVend = System.Xml.XmlConvert.ToBoolean(Reader.ReadElementString());
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id465_fbeDue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@fbeDueSpecified = true;
                        {
                            o.@fbeDue = System.Xml.XmlConvert.ToBoolean(Reader.ReadElementString());
                        }
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id466_maxVendAmt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@maxVendAmt = Read2_Currency(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id467_minVendAmt && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@minVendAmt = Read2_Currency(false, true);
                        paramsRead[3] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:canVend, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:fbeDue, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:maxVendAmt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:minVendAmt");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:canVend, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:fbeDue, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:maxVendAmt, http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema:minVendAmt");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations282, ref readerCount282);
            }
            ReadEndElement();
            return o;
        }

        protected override void InitCallbacks() {
        }

        string id122_UtilityDetail;
        string id83_Gas;
        string id79_meterDetail;
        string id265_ClearCreditResp;
        string id81_resource;
        string id146_DebtRecoveryTx;
        string id270_CancelVendResp;
        string id102_at;
        string id226_header;
        string id180_Batch;
        string id332_toKRN;
        string id19_endBatchResp;
        string id443_MeterNumber;
        string id385_StartBatchEx;
        string id418_custDetail;
        string id4_cancelVendResp;
        string id343_tokenInfo;
        string id392_DuplicateMsgIDEx;
        string id172_SilentServerState;
        string id243_AdviceResp;
        string id182_ShiftBatch;
        string id145_Item;
        string id35_serverID;
        string id42_utility;
        string id292_MenuAccessTokenIssue;
        string id250_BaseResp;
        string id163_confirmMeterResult;
        string id353_fault;
        string id376_ConfirmCustomerEx;
        string id158_refNo;
        string id232_bankRegNo;
        string id255_DepositResp;
        string id233_EndBatchResp;
        string id356_ServeryBusyEx;
        string id372_BlockedMeterEx;
        string id28_meterCreditTransferResp;
        string id297_dispPhUnbalance;
        string id465_fbeDue;
        string id241_salesStartBatch;
        string id350_nonMeterManagement;
        string id13_reprintEndBatchResp;
        string id247_txReversed;
        string id313_testDisp;
        string id216_NormalSaleTotal;
        string id189_batchReport;
        string id279_DispInstPwrResp;
        string id98_krn;
        string id396_AccNumMeterLinkEx;
        string id88_Token;
        string id177_activityTime;
        string id127_sequenceNumber;
        string id26_fbeResp;
        string id433_RecordMissing;
        string id36_terminalID;
        string id425_NoTrip;
        string id67_Tariff;
        string id278_DispTamperResp;
        string id107_VAT;
        string id442_MeterAccount;
        string id424_Item;
        string id95_ExtMeterDetail;
        string id80_token;
        string id340_defCredit;
        string id453_ConfirmCustResult;
        string id459_accountIdentification;
        string id386_ServiceChrgEx;
        string id5_verifyResp;
        string id15_meterSpecificEngResp;
        string id165_ReverseMerchantDepositResp;
        string id59_Step;
        string id284_MenuAccessResp;
        string id298_DispPhUnbalanceTokenIssue;
        string id449_ConvertedFrmConventional;
        string id43_clientStatus;
        string id225_bankingRefNo;
        string id210_OperatorTotal;
        string id69_desc;
        string id47_CreditVendTx;
        string id410_ManualAdjCreditUpdate;
        string id240_BankStartBatch;
        string id400_IndeterminantLastResponseEx;
        string id188_totTax;
        string id86_CurrencyResource;
        string id204_PayTypeTotal;
        string id362_LastResponseEx;
        string id184_seqNo;
        string id411_DepositCreditUpdate;
        string id198_ResourceTotal;
        string id72_CreditTokenIssue;
        string id52_tariff;
        string id68_name;
        string id129_GenericDeviceID;
        string id183_SalesBatch;
        string id106_Tax;
        string id209_DebitCardTotal;
        string id153_MeterCreditTransferResp;
        string id23_reverseMerchantDeposit;
        string id380_InsufficientMeterDataEx;
        string id263_PwrLmtResp;
        string id339_PhUnbalTokenIssue;
        string id142_Tx;
        string id120_sales;
        string id169_GetVendingServerStateResp;
        string id49_amt;
        string id463_CustVendConfig;
        string id321_KCTokenIssue;
        string id452_confirmCustResult;
        string id367_RequestAuthorisationEx;
        string id197_resTot;
        string id322_kctData;
        string id401_txConfirmed;
        string id239_SalesStartBatch;
        string id124_MsgID;
        string id168_MakeMerchantDepositResp;
        string id78_Item;
        string id155_creditTransferTx;
        string id307_dispTI;
        string id253_VendorStatementResp;
        string id366_DebtEx;
        string id214_ServiceChrgTotal;
        string id167_TransactionReference;
        string id138_tx;
        string id192_shiftBatch;
        string id65_Units;
        string id93_stsCipher;
        string id319_WaterFactorTokenIssue;
        string id111_accNo;
        string id456_CustAccountDetail;
        string id368_MSNOCheckDigitEx;
        string id357_ExpiredMessageEx;
        string id259_VerifyResp;
        string id293_dispRegisters;
        string id238_ShiftStartBatch;
        string id160_FBEResp;
        string id51_creditTokenIssue;
        string id112_locRef;
        string id440_MeterConfig;
        string id144_ConnectionTx;
        string id309_dispPwrLmt;
        string id388_UnknownMeterUpdateMtrKeyEx;
        string id176_roundTripTime;
        string id27_trialCreditVendResp;
        string id333_toTI;
        string id187_batchTot;
        string id296_DispVerTokenIssue;
        string id394_OtherDataEx;
        string id382_ReprintEndBatchEx;
        string id314_TestDisplayTokenIssue;
        string id466_maxVendAmt;
        string id94_MeterDetail;
        string id308_DispTITokenIssue;
        string id390_VerifyTokenEx;
        string id306_DispKRNTokenIssue;
        string id305_dispKRN;
        string id277_DispKRNResp;
        string id269_ReprintResp;
        string id175_PingAndActivityServerState;
        string id57_StepTariffBreakdown;
        string id352_meterManagement;
        string id34_clientID;
        string id191_lastTxSeqNo;
        string id17_Item;
        string id44_vendor;
        string id428_SeriousBoxDamage;
        string id195_operatorTotal;
        string id147_ServiceChrgTx;
        string id260_UpdateMeterKeyResp;
        string id412_appliedDate;
        string id116_availCredit;
        string id349_TokenSubClassType;
        string id90_KCToken;
        string id1_confirmCustomerResp;
        string id6_payAccResp;
        string id213_AccPaymentTotal;
        string id348_tokenClass;
        string id402_endBatchReprint;
        string id71_SGC;
        string id140_tenderAmt;
        string id60_units;
        string id41_custMsg;
        string id267_EngKCTResp;
        string id262_DefCreditResp;
        string id231_bankName;
        string id446_reason;
        string id196_payTypeTotal;
        string id409_CredUpdate;
        string id338_phUnbalance;
        string id123_taxRef;
        string id54_TariffBreakdown;
        string id205_CashTotal;
        string id358_XMLVendFaultEx;
        string id272_NonMeterSpecificEngResp;
        string id330_fromTI;
        string id193_BatchReport;
        string id109_address;
        string id318_waterFactor;
        string id136_transactions;
        string id21_getVendingServerStateResp;
        string id326_PwrLmt;
        string id18_startBatchResp;
        string id341_updateMeterKey;
        string id374_VendorCreditEx;
        string id76_FBECredTokenIssue;
        string id328_fromSGC;
        string id40_operatorMsg;
        string id9_updateMeterKeyResp;
        string id403_statement;
        string id288_TestDispenserTokenIssue;
        string id347_transferAmt;
        string id290_TestAllTokenIssue;
        string id58_steps;
        string id117_batchStatus;
        string id462_minimumPayment;
        string id33_Item;
        string id383_ReprintEx;
        string id280_DispConsTotResp;
        string id323_pwrLmtToken;
        string id185_started;
        string id212_TxTotal;
        string id139_lessRound;
        string id48_receiptNo;
        string id467_minVendAmt;
        string id141_change;
        string id370_LatestKRNEx;
        string id115_ClientStatus;
        string id45_custVendDetail;
        string id450_MeterChangedOut;
        string id237_StartBatch;
        string id7_custReportFaultResp;
        string id320_engKCToken;
        string id56_StraightTariffBreakdown;
        string id325_pwrLmt;
        string id53_tariffBreakdown;
        string id407_VendorStatementLineItem;
        string id14_nonMeterSpecificEngResp;
        string id282_DispVerResp;
        string id148_ConversionTx;
        string id336_clearCredit;
        string id379_EndBatchEx;
        string id311_testBreaker;
        string id261_MeterSpecificEngResp;
        string id391_UnknownMeterFBEEx;
        string id377_CancelEx;
        string id181_BankBatch;
        string id131_ean;
        string id96_msno;
        string id149_TamperTx;
        string id50_tax;
        string id166_DepositSuccessful;
        string id87_Water;
        string id133_FreeIssueResp;
        string id84_ConnectionTime;
        string id405_accBal;
        string id291_menuAccess;
        string id20_totalBatchResp;
        string id194_txTotal;
        string id420_CustFaultReport;
        string id25_creditVendResp;
        string id119_banking;
        string id264_PhUnbalResp;
        string id384_RequireMeterCardEx;
        string id359_ConfirmationEx;
        string id91_set1stMeterKey;
        string id99_ti;
        string id85_Electricity;
        string id154_creditTransferDetail;
        string id29_freeIssueResp;
        string id346_tokenID;
        string id258_BaseVendResp;
        string id236_startedBatch;
        string id393_GracePurchaseEx;
        string id315_payAccReceipt;
        string id227_beneficiary;
        string id283_DispRegistersResp;
        string id361_ClientIDSSLEx;
        string id389_STSDataEx;
        string id3_reprintResp;
        string id150_UpgradeTx;
        string id105_track2Data;
        string id365_BusinessRuleEx;
        string id242_shiftStartBatch;
        string id429_FireWaterDamage;
        string id31_CancelPendingResp;
        string id108_CustVendDetail;
        string id451_CustDetail;
        string id256_ReprintDepositResp;
        string id439_MeterIdentifier;
        string id229_accName;
        string id275_DispPwrLmtResp;
        string id458_AccountStatus;
        string id110_contactNo;
        string id364_ReversalEx;
        string id363_XMLVendSchemaEx;
        string id37_reqMsgID;
        string id215_DebtRecoveryTotal;
        string id75_MCTCredTokenIssue;
        string id432_DataFault;
        string id218_FreeIssueTotal;
        string id32_cancelRefNo;
        string id408_CredLmtChg;
        string id55_Item;
        string id460_accountName;
        string id415_ref;
        string id16_adviceResp;
        string id266_ClearTamperResp;
        string id437_VendIDMethod;
        string id387_UnknownMeterEx;
        string id316_PayAccReceipt;
        string id82_Resource;
        string id200_CurrencyTotal;
        string id221_lastSalesSeqNo;
        string id24_confirmMeterResp;
        string id273_TestDisplayResp;
        string id301_dispInstPwr;
        string id335_ClearTamperTokenIssue;
        string id299_dispConsTot;
        string id114_VendorDetail;
        string id66_siUnit;
        string id222_depSlip;
        string id203_ConnectionTimeTotal;
        string id220_firstSalesSeqNo;
        string id12_reprintDepResp;
        string id461_accountBalance;
        string id378_CheckBatchTotalEx;
        string id397_AccNumEx;
        string id252_CustReportFaultResp;
        string id447_RecordMissingReason;
        string id121_shift;
        string id39_dispHeader;
        string id457_accountStatus;
        string id152_balance;
        string id97_sgc;
        string id454_custVendConfig;
        string id174_PingServerState;
        string id434_IncorrectSGC;
        string id268_SetWaterFactorResp;
        string id70_TariffSetID;
        string id74_FreeCredTokenIssue;
        string id137_Transactions;
        string id251_ConfirmCustomerResp;
        string id244_ConfirmationAdviceResp;
        string id156_CreditTransferDetail;
        string id417_CustFaultLog;
        string id104_useSTT;
        string id2_Item;
        string id398_EngParameterEx;
        string id426_KeepsTripping;
        string id211_opName;
        string id245_LastRespAdviceResp;
        string id375_ClientIDAuthorisationEx;
        string id234_endBatch;
        string id11_depositResp;
        string id448_NewInstallation;
        string id399_AccTypeEx;
        string id118_BatchStatus;
        string id126_uniqueNumber;
        string id310_DispPwrLmtTokenIssue;
        string id179_totalBatch;
        string id202_WaterTotal;
        string id395_MeterDataMisMatchEx;
        string id157_oldMSNO;
        string id208_ChequeTotal;
        string id287_testDispenser;
        string id186_ended;
        string id101_MeterType;
        string id151_accDesc;
        string id369_SGCAuthorisationEx;
        string id281_DispPhUnbalanceResp;
        string id206_CreditCardTotal;
        string id337_ClearCreditTokenIssue;
        string id135_CreditVendReceipt;
        string id312_TestBreakerTokenIssue;
        string id178_TotalBatchResp;
        string id295_dispVer;
        string id436_meterInfo;
        string id161_CreditVendResp;
        string id404_VendorStatement;
        string id431_DisplayLightsButtons;
        string id334_clearTamper;
        string id159_TrialCreditVendResp;
        string id381_ReprintDepositSlipEx;
        string id249_lastResponse;
        string id302_DispInstPwrTokenIssue;
        string id143_PayAccTx;
        string id134_creditVendReceipt;
        string id125_dateTime;
        string id327_KCTData;
        string id423_DeviceFault;
        string id230_branchCode;
        string id128_DeviceID;
        string id190_firstTxSeqNo;
        string id355_SystemEx;
        string id77_OverRecCredTokenIssue;
        string id46_origTx;
        string id248_adviceReqMsgID;
        string id217_CancellationTotal;
        string id354_Fault;
        string id286_TestDispenserResp;
        string id421_NetworkFaultReport;
        string id73_SaleCredTokenIssue;
        string id430_MeterDead;
        string id373_UpdateMtrKeySameEx;
        string id246_ReversalAdviceResp;
        string id342_creditVendTx;
        string id254_ReprintEndBatchResp;
        string id235_StartBatchResp;
        string id219_MeterCreditTransferTotal;
        string id10_vendorStatementResp;
        string id300_DispConsTotTokenIssue;
        string id406_lineItem;
        string id435_IncorrectTI;
        string id345_STS1TokenInfo;
        string id441_MeterCard;
        string id22_makeMerchantDeposit;
        string id324_PwrLmtTokenIssue;
        string id228_Beneficiary;
        string id455_custAccountDetail;
        string id304_DispTamperTokenIssue;
        string id223_salesBatch;
        string id64_symbol;
        string id444_AccNo;
        string id464_canVend;
        string id276_DispTIResp;
        string id62_Currency;
        string id414_depositDate;
        string id38_respDateTime;
        string id224_DepositSlip;
        string id445_isSmartCard;
        string id351_credit;
        string id289_testAll;
        string id360_UseCaseSupportEx;
        string id173_UnknownServerState;
        string id89_STS1Token;
        string id371_FBEEx;
        string id331_toSGC;
        string id207_OtherTotal;
        string id419_faultReport;
        string id294_DispRegistersTokenIssue;
        string id199_GasTotal;
        string id63_value;
        string id8_Item;
        string id100_meterType;
        string id329_fromKRN;
        string id271_PayAccResp;
        string id162_ConfirmMeterResp;
        string id317_reprint;
        string id170_serverState;
        string id130_EANDeviceID;
        string id113_daysLastPurchase;
        string id427_TokensNotWorking;
        string id201_ElectricityTotal;
        string id274_TestBreakerResp;
        string id30_cancelPendingResp;
        string id92_set2ndMeterKey;
        string id164_ConfirmMeterResult;
        string id438_meterIdentifier;
        string id285_TestAllResp;
        string id344_TokenInfo;
        string id61_rate;
        string id303_dispTamper;
        string id416_custFaultLog;
        string id422_MeterFaultReport;
        string id257_XMLVendFaultResp;
        string id171_ServerState;
        string id413_depositRefNo;
        string id103_tt;
        string id132_id;

        protected override void InitIDs() {
            id122_UtilityDetail = Reader.NameTable.Add(@"UtilityDetail");
            id83_Gas = Reader.NameTable.Add(@"Gas");
            id79_meterDetail = Reader.NameTable.Add(@"meterDetail");
            id265_ClearCreditResp = Reader.NameTable.Add(@"ClearCreditResp");
            id81_resource = Reader.NameTable.Add(@"resource");
            id146_DebtRecoveryTx = Reader.NameTable.Add(@"DebtRecoveryTx");
            id270_CancelVendResp = Reader.NameTable.Add(@"CancelVendResp");
            id102_at = Reader.NameTable.Add(@"at");
            id226_header = Reader.NameTable.Add(@"header");
            id180_Batch = Reader.NameTable.Add(@"Batch");
            id332_toKRN = Reader.NameTable.Add(@"toKRN");
            id19_endBatchResp = Reader.NameTable.Add(@"endBatchResp");
            id443_MeterNumber = Reader.NameTable.Add(@"MeterNumber");
            id385_StartBatchEx = Reader.NameTable.Add(@"StartBatchEx");
            id418_custDetail = Reader.NameTable.Add(@"custDetail");
            id4_cancelVendResp = Reader.NameTable.Add(@"cancelVendResp");
            id343_tokenInfo = Reader.NameTable.Add(@"tokenInfo");
            id392_DuplicateMsgIDEx = Reader.NameTable.Add(@"DuplicateMsgIDEx");
            id172_SilentServerState = Reader.NameTable.Add(@"SilentServerState");
            id243_AdviceResp = Reader.NameTable.Add(@"AdviceResp");
            id182_ShiftBatch = Reader.NameTable.Add(@"ShiftBatch");
            id145_Item = Reader.NameTable.Add(@"http://www.eskom.co.za/xmlvend/revenue-ext/2.1/schema");
            id35_serverID = Reader.NameTable.Add(@"serverID");
            id42_utility = Reader.NameTable.Add(@"utility");
            id292_MenuAccessTokenIssue = Reader.NameTable.Add(@"MenuAccessTokenIssue");
            id250_BaseResp = Reader.NameTable.Add(@"BaseResp");
            id163_confirmMeterResult = Reader.NameTable.Add(@"confirmMeterResult");
            id353_fault = Reader.NameTable.Add(@"fault");
            id376_ConfirmCustomerEx = Reader.NameTable.Add(@"ConfirmCustomerEx");
            id158_refNo = Reader.NameTable.Add(@"refNo");
            id232_bankRegNo = Reader.NameTable.Add(@"bankRegNo");
            id255_DepositResp = Reader.NameTable.Add(@"DepositResp");
            id233_EndBatchResp = Reader.NameTable.Add(@"EndBatchResp");
            id356_ServeryBusyEx = Reader.NameTable.Add(@"ServeryBusyEx");
            id372_BlockedMeterEx = Reader.NameTable.Add(@"BlockedMeterEx");
            id28_meterCreditTransferResp = Reader.NameTable.Add(@"meterCreditTransferResp");
            id297_dispPhUnbalance = Reader.NameTable.Add(@"dispPhUnbalance");
            id465_fbeDue = Reader.NameTable.Add(@"fbeDue");
            id241_salesStartBatch = Reader.NameTable.Add(@"salesStartBatch");
            id350_nonMeterManagement = Reader.NameTable.Add(@"nonMeterManagement");
            id13_reprintEndBatchResp = Reader.NameTable.Add(@"reprintEndBatchResp");
            id247_txReversed = Reader.NameTable.Add(@"txReversed");
            id313_testDisp = Reader.NameTable.Add(@"testDisp");
            id216_NormalSaleTotal = Reader.NameTable.Add(@"NormalSaleTotal");
            id189_batchReport = Reader.NameTable.Add(@"batchReport");
            id279_DispInstPwrResp = Reader.NameTable.Add(@"DispInstPwrResp");
            id98_krn = Reader.NameTable.Add(@"krn");
            id396_AccNumMeterLinkEx = Reader.NameTable.Add(@"AccNumMeterLinkEx");
            id88_Token = Reader.NameTable.Add(@"Token");
            id177_activityTime = Reader.NameTable.Add(@"activityTime");
            id127_sequenceNumber = Reader.NameTable.Add(@"sequenceNumber");
            id26_fbeResp = Reader.NameTable.Add(@"fbeResp");
            id433_RecordMissing = Reader.NameTable.Add(@"RecordMissing");
            id36_terminalID = Reader.NameTable.Add(@"terminalID");
            id425_NoTrip = Reader.NameTable.Add(@"NoTrip");
            id67_Tariff = Reader.NameTable.Add(@"Tariff");
            id278_DispTamperResp = Reader.NameTable.Add(@"DispTamperResp");
            id107_VAT = Reader.NameTable.Add(@"VAT");
            id442_MeterAccount = Reader.NameTable.Add(@"MeterAccount");
            id424_Item = Reader.NameTable.Add(@"http://www.eskom.co.za/xmlvend/meter-ext/2.1/schema");
            id95_ExtMeterDetail = Reader.NameTable.Add(@"ExtMeterDetail");
            id80_token = Reader.NameTable.Add(@"token");
            id340_defCredit = Reader.NameTable.Add(@"defCredit");
            id453_ConfirmCustResult = Reader.NameTable.Add(@"ConfirmCustResult");
            id459_accountIdentification = Reader.NameTable.Add(@"accountIdentification");
            id386_ServiceChrgEx = Reader.NameTable.Add(@"ServiceChrgEx");
            id5_verifyResp = Reader.NameTable.Add(@"verifyResp");
            id15_meterSpecificEngResp = Reader.NameTable.Add(@"meterSpecificEngResp");
            id165_ReverseMerchantDepositResp = Reader.NameTable.Add(@"ReverseMerchantDepositResp");
            id59_Step = Reader.NameTable.Add(@"Step");
            id284_MenuAccessResp = Reader.NameTable.Add(@"MenuAccessResp");
            id298_DispPhUnbalanceTokenIssue = Reader.NameTable.Add(@"DispPhUnbalanceTokenIssue");
            id449_ConvertedFrmConventional = Reader.NameTable.Add(@"ConvertedFrmConventional");
            id43_clientStatus = Reader.NameTable.Add(@"clientStatus");
            id225_bankingRefNo = Reader.NameTable.Add(@"bankingRefNo");
            id210_OperatorTotal = Reader.NameTable.Add(@"OperatorTotal");
            id69_desc = Reader.NameTable.Add(@"desc");
            id47_CreditVendTx = Reader.NameTable.Add(@"CreditVendTx");
            id410_ManualAdjCreditUpdate = Reader.NameTable.Add(@"ManualAdjCreditUpdate");
            id240_BankStartBatch = Reader.NameTable.Add(@"BankStartBatch");
            id400_IndeterminantLastResponseEx = Reader.NameTable.Add(@"IndeterminantLastResponseEx");
            id188_totTax = Reader.NameTable.Add(@"totTax");
            id86_CurrencyResource = Reader.NameTable.Add(@"CurrencyResource");
            id204_PayTypeTotal = Reader.NameTable.Add(@"PayTypeTotal");
            id362_LastResponseEx = Reader.NameTable.Add(@"LastResponseEx");
            id184_seqNo = Reader.NameTable.Add(@"seqNo");
            id411_DepositCreditUpdate = Reader.NameTable.Add(@"DepositCreditUpdate");
            id198_ResourceTotal = Reader.NameTable.Add(@"ResourceTotal");
            id72_CreditTokenIssue = Reader.NameTable.Add(@"CreditTokenIssue");
            id52_tariff = Reader.NameTable.Add(@"tariff");
            id68_name = Reader.NameTable.Add(@"name");
            id129_GenericDeviceID = Reader.NameTable.Add(@"GenericDeviceID");
            id183_SalesBatch = Reader.NameTable.Add(@"SalesBatch");
            id106_Tax = Reader.NameTable.Add(@"Tax");
            id209_DebitCardTotal = Reader.NameTable.Add(@"DebitCardTotal");
            id153_MeterCreditTransferResp = Reader.NameTable.Add(@"MeterCreditTransferResp");
            id23_reverseMerchantDeposit = Reader.NameTable.Add(@"reverseMerchantDeposit");
            id380_InsufficientMeterDataEx = Reader.NameTable.Add(@"InsufficientMeterDataEx");
            id263_PwrLmtResp = Reader.NameTable.Add(@"PwrLmtResp");
            id339_PhUnbalTokenIssue = Reader.NameTable.Add(@"PhUnbalTokenIssue");
            id142_Tx = Reader.NameTable.Add(@"Tx");
            id120_sales = Reader.NameTable.Add(@"sales");
            id169_GetVendingServerStateResp = Reader.NameTable.Add(@"GetVendingServerStateResp");
            id49_amt = Reader.NameTable.Add(@"amt");
            id463_CustVendConfig = Reader.NameTable.Add(@"CustVendConfig");
            id321_KCTokenIssue = Reader.NameTable.Add(@"KCTokenIssue");
            id452_confirmCustResult = Reader.NameTable.Add(@"confirmCustResult");
            id367_RequestAuthorisationEx = Reader.NameTable.Add(@"RequestAuthorisationEx");
            id197_resTot = Reader.NameTable.Add(@"resTot");
            id322_kctData = Reader.NameTable.Add(@"kctData");
            id401_txConfirmed = Reader.NameTable.Add(@"txConfirmed");
            id239_SalesStartBatch = Reader.NameTable.Add(@"SalesStartBatch");
            id124_MsgID = Reader.NameTable.Add(@"MsgID");
            id168_MakeMerchantDepositResp = Reader.NameTable.Add(@"MakeMerchantDepositResp");
            id78_Item = Reader.NameTable.Add(@"http://www.eskom.co.za/xmlvend/base-ext/2.1.1/schema");
            id155_creditTransferTx = Reader.NameTable.Add(@"creditTransferTx");
            id307_dispTI = Reader.NameTable.Add(@"dispTI");
            id253_VendorStatementResp = Reader.NameTable.Add(@"VendorStatementResp");
            id366_DebtEx = Reader.NameTable.Add(@"DebtEx");
            id214_ServiceChrgTotal = Reader.NameTable.Add(@"ServiceChrgTotal");
            id167_TransactionReference = Reader.NameTable.Add(@"TransactionReference");
            id138_tx = Reader.NameTable.Add(@"tx");
            id192_shiftBatch = Reader.NameTable.Add(@"shiftBatch");
            id65_Units = Reader.NameTable.Add(@"Units");
            id93_stsCipher = Reader.NameTable.Add(@"stsCipher");
            id319_WaterFactorTokenIssue = Reader.NameTable.Add(@"WaterFactorTokenIssue");
            id111_accNo = Reader.NameTable.Add(@"accNo");
            id456_CustAccountDetail = Reader.NameTable.Add(@"CustAccountDetail");
            id368_MSNOCheckDigitEx = Reader.NameTable.Add(@"MSNOCheckDigitEx");
            id357_ExpiredMessageEx = Reader.NameTable.Add(@"ExpiredMessageEx");
            id259_VerifyResp = Reader.NameTable.Add(@"VerifyResp");
            id293_dispRegisters = Reader.NameTable.Add(@"dispRegisters");
            id238_ShiftStartBatch = Reader.NameTable.Add(@"ShiftStartBatch");
            id160_FBEResp = Reader.NameTable.Add(@"FBEResp");
            id51_creditTokenIssue = Reader.NameTable.Add(@"creditTokenIssue");
            id112_locRef = Reader.NameTable.Add(@"locRef");
            id440_MeterConfig = Reader.NameTable.Add(@"MeterConfig");
            id144_ConnectionTx = Reader.NameTable.Add(@"ConnectionTx");
            id309_dispPwrLmt = Reader.NameTable.Add(@"dispPwrLmt");
            id388_UnknownMeterUpdateMtrKeyEx = Reader.NameTable.Add(@"UnknownMeterUpdateMtrKeyEx");
            id176_roundTripTime = Reader.NameTable.Add(@"roundTripTime");
            id27_trialCreditVendResp = Reader.NameTable.Add(@"trialCreditVendResp");
            id333_toTI = Reader.NameTable.Add(@"toTI");
            id187_batchTot = Reader.NameTable.Add(@"batchTot");
            id296_DispVerTokenIssue = Reader.NameTable.Add(@"DispVerTokenIssue");
            id394_OtherDataEx = Reader.NameTable.Add(@"OtherDataEx");
            id382_ReprintEndBatchEx = Reader.NameTable.Add(@"ReprintEndBatchEx");
            id314_TestDisplayTokenIssue = Reader.NameTable.Add(@"TestDisplayTokenIssue");
            id466_maxVendAmt = Reader.NameTable.Add(@"maxVendAmt");
            id94_MeterDetail = Reader.NameTable.Add(@"MeterDetail");
            id308_DispTITokenIssue = Reader.NameTable.Add(@"DispTITokenIssue");
            id390_VerifyTokenEx = Reader.NameTable.Add(@"VerifyTokenEx");
            id306_DispKRNTokenIssue = Reader.NameTable.Add(@"DispKRNTokenIssue");
            id305_dispKRN = Reader.NameTable.Add(@"dispKRN");
            id277_DispKRNResp = Reader.NameTable.Add(@"DispKRNResp");
            id269_ReprintResp = Reader.NameTable.Add(@"ReprintResp");
            id175_PingAndActivityServerState = Reader.NameTable.Add(@"PingAndActivityServerState");
            id57_StepTariffBreakdown = Reader.NameTable.Add(@"StepTariffBreakdown");
            id352_meterManagement = Reader.NameTable.Add(@"meterManagement");
            id34_clientID = Reader.NameTable.Add(@"clientID");
            id191_lastTxSeqNo = Reader.NameTable.Add(@"lastTxSeqNo");
            id17_Item = Reader.NameTable.Add(@"http://www.nrs.eskom.co.za/xmlvend/base/2.1/schema");
            id44_vendor = Reader.NameTable.Add(@"vendor");
            id428_SeriousBoxDamage = Reader.NameTable.Add(@"SeriousBoxDamage");
            id195_operatorTotal = Reader.NameTable.Add(@"operatorTotal");
            id147_ServiceChrgTx = Reader.NameTable.Add(@"ServiceChrgTx");
            id260_UpdateMeterKeyResp = Reader.NameTable.Add(@"UpdateMeterKeyResp");
            id412_appliedDate = Reader.NameTable.Add(@"appliedDate");
            id116_availCredit = Reader.NameTable.Add(@"availCredit");
            id349_TokenSubClassType = Reader.NameTable.Add(@"TokenSubClassType");
            id90_KCToken = Reader.NameTable.Add(@"KCToken");
            id1_confirmCustomerResp = Reader.NameTable.Add(@"confirmCustomerResp");
            id6_payAccResp = Reader.NameTable.Add(@"payAccResp");
            id213_AccPaymentTotal = Reader.NameTable.Add(@"AccPaymentTotal");
            id348_tokenClass = Reader.NameTable.Add(@"tokenClass");
            id402_endBatchReprint = Reader.NameTable.Add(@"endBatchReprint");
            id71_SGC = Reader.NameTable.Add(@"SGC");
            id140_tenderAmt = Reader.NameTable.Add(@"tenderAmt");
            id60_units = Reader.NameTable.Add(@"units");
            id41_custMsg = Reader.NameTable.Add(@"custMsg");
            id267_EngKCTResp = Reader.NameTable.Add(@"EngKCTResp");
            id262_DefCreditResp = Reader.NameTable.Add(@"DefCreditResp");
            id231_bankName = Reader.NameTable.Add(@"bankName");
            id446_reason = Reader.NameTable.Add(@"reason");
            id196_payTypeTotal = Reader.NameTable.Add(@"payTypeTotal");
            id409_CredUpdate = Reader.NameTable.Add(@"CredUpdate");
            id338_phUnbalance = Reader.NameTable.Add(@"phUnbalance");
            id123_taxRef = Reader.NameTable.Add(@"taxRef");
            id54_TariffBreakdown = Reader.NameTable.Add(@"TariffBreakdown");
            id205_CashTotal = Reader.NameTable.Add(@"CashTotal");
            id358_XMLVendFaultEx = Reader.NameTable.Add(@"XMLVendFaultEx");
            id272_NonMeterSpecificEngResp = Reader.NameTable.Add(@"NonMeterSpecificEngResp");
            id330_fromTI = Reader.NameTable.Add(@"fromTI");
            id193_BatchReport = Reader.NameTable.Add(@"BatchReport");
            id109_address = Reader.NameTable.Add(@"address");
            id318_waterFactor = Reader.NameTable.Add(@"waterFactor");
            id136_transactions = Reader.NameTable.Add(@"transactions");
            id21_getVendingServerStateResp = Reader.NameTable.Add(@"getVendingServerStateResp");
            id326_PwrLmt = Reader.NameTable.Add(@"PwrLmt");
            id18_startBatchResp = Reader.NameTable.Add(@"startBatchResp");
            id341_updateMeterKey = Reader.NameTable.Add(@"updateMeterKey");
            id374_VendorCreditEx = Reader.NameTable.Add(@"VendorCreditEx");
            id76_FBECredTokenIssue = Reader.NameTable.Add(@"FBECredTokenIssue");
            id328_fromSGC = Reader.NameTable.Add(@"fromSGC");
            id40_operatorMsg = Reader.NameTable.Add(@"operatorMsg");
            id9_updateMeterKeyResp = Reader.NameTable.Add(@"updateMeterKeyResp");
            id403_statement = Reader.NameTable.Add(@"statement");
            id288_TestDispenserTokenIssue = Reader.NameTable.Add(@"TestDispenserTokenIssue");
            id347_transferAmt = Reader.NameTable.Add(@"transferAmt");
            id290_TestAllTokenIssue = Reader.NameTable.Add(@"TestAllTokenIssue");
            id58_steps = Reader.NameTable.Add(@"steps");
            id117_batchStatus = Reader.NameTable.Add(@"batchStatus");
            id462_minimumPayment = Reader.NameTable.Add(@"minimumPayment");
            id33_Item = Reader.NameTable.Add(@"");
            id383_ReprintEx = Reader.NameTable.Add(@"ReprintEx");
            id280_DispConsTotResp = Reader.NameTable.Add(@"DispConsTotResp");
            id323_pwrLmtToken = Reader.NameTable.Add(@"pwrLmtToken");
            id185_started = Reader.NameTable.Add(@"started");
            id212_TxTotal = Reader.NameTable.Add(@"TxTotal");
            id139_lessRound = Reader.NameTable.Add(@"lessRound");
            id48_receiptNo = Reader.NameTable.Add(@"receiptNo");
            id467_minVendAmt = Reader.NameTable.Add(@"minVendAmt");
            id141_change = Reader.NameTable.Add(@"change");
            id370_LatestKRNEx = Reader.NameTable.Add(@"LatestKRNEx");
            id115_ClientStatus = Reader.NameTable.Add(@"ClientStatus");
            id45_custVendDetail = Reader.NameTable.Add(@"custVendDetail");
            id450_MeterChangedOut = Reader.NameTable.Add(@"MeterChangedOut");
            id237_StartBatch = Reader.NameTable.Add(@"StartBatch");
            id7_custReportFaultResp = Reader.NameTable.Add(@"custReportFaultResp");
            id320_engKCToken = Reader.NameTable.Add(@"engKCToken");
            id56_StraightTariffBreakdown = Reader.NameTable.Add(@"StraightTariffBreakdown");
            id325_pwrLmt = Reader.NameTable.Add(@"pwrLmt");
            id53_tariffBreakdown = Reader.NameTable.Add(@"tariffBreakdown");
            id407_VendorStatementLineItem = Reader.NameTable.Add(@"VendorStatementLineItem");
            id14_nonMeterSpecificEngResp = Reader.NameTable.Add(@"nonMeterSpecificEngResp");
            id282_DispVerResp = Reader.NameTable.Add(@"DispVerResp");
            id148_ConversionTx = Reader.NameTable.Add(@"ConversionTx");
            id336_clearCredit = Reader.NameTable.Add(@"clearCredit");
            id379_EndBatchEx = Reader.NameTable.Add(@"EndBatchEx");
            id311_testBreaker = Reader.NameTable.Add(@"testBreaker");
            id261_MeterSpecificEngResp = Reader.NameTable.Add(@"MeterSpecificEngResp");
            id391_UnknownMeterFBEEx = Reader.NameTable.Add(@"UnknownMeterFBEEx");
            id377_CancelEx = Reader.NameTable.Add(@"CancelEx");
            id181_BankBatch = Reader.NameTable.Add(@"BankBatch");
            id131_ean = Reader.NameTable.Add(@"ean");
            id96_msno = Reader.NameTable.Add(@"msno");
            id149_TamperTx = Reader.NameTable.Add(@"TamperTx");
            id50_tax = Reader.NameTable.Add(@"tax");
            id166_DepositSuccessful = Reader.NameTable.Add(@"DepositSuccessful");
            id87_Water = Reader.NameTable.Add(@"Water");
            id133_FreeIssueResp = Reader.NameTable.Add(@"FreeIssueResp");
            id84_ConnectionTime = Reader.NameTable.Add(@"ConnectionTime");
            id405_accBal = Reader.NameTable.Add(@"accBal");
            id291_menuAccess = Reader.NameTable.Add(@"menuAccess");
            id20_totalBatchResp = Reader.NameTable.Add(@"totalBatchResp");
            id194_txTotal = Reader.NameTable.Add(@"txTotal");
            id420_CustFaultReport = Reader.NameTable.Add(@"CustFaultReport");
            id25_creditVendResp = Reader.NameTable.Add(@"creditVendResp");
            id119_banking = Reader.NameTable.Add(@"banking");
            id264_PhUnbalResp = Reader.NameTable.Add(@"PhUnbalResp");
            id384_RequireMeterCardEx = Reader.NameTable.Add(@"RequireMeterCardEx");
            id359_ConfirmationEx = Reader.NameTable.Add(@"ConfirmationEx");
            id91_set1stMeterKey = Reader.NameTable.Add(@"set1stMeterKey");
            id99_ti = Reader.NameTable.Add(@"ti");
            id85_Electricity = Reader.NameTable.Add(@"Electricity");
            id154_creditTransferDetail = Reader.NameTable.Add(@"creditTransferDetail");
            id29_freeIssueResp = Reader.NameTable.Add(@"freeIssueResp");
            id346_tokenID = Reader.NameTable.Add(@"tokenID");
            id258_BaseVendResp = Reader.NameTable.Add(@"BaseVendResp");
            id236_startedBatch = Reader.NameTable.Add(@"startedBatch");
            id393_GracePurchaseEx = Reader.NameTable.Add(@"GracePurchaseEx");
            id315_payAccReceipt = Reader.NameTable.Add(@"payAccReceipt");
            id227_beneficiary = Reader.NameTable.Add(@"beneficiary");
            id283_DispRegistersResp = Reader.NameTable.Add(@"DispRegistersResp");
            id361_ClientIDSSLEx = Reader.NameTable.Add(@"ClientIDSSLEx");
            id389_STSDataEx = Reader.NameTable.Add(@"STSDataEx");
            id3_reprintResp = Reader.NameTable.Add(@"reprintResp");
            id150_UpgradeTx = Reader.NameTable.Add(@"UpgradeTx");
            id105_track2Data = Reader.NameTable.Add(@"track2Data");
            id365_BusinessRuleEx = Reader.NameTable.Add(@"BusinessRuleEx");
            id242_shiftStartBatch = Reader.NameTable.Add(@"shiftStartBatch");
            id429_FireWaterDamage = Reader.NameTable.Add(@"FireWaterDamage");
            id31_CancelPendingResp = Reader.NameTable.Add(@"CancelPendingResp");
            id108_CustVendDetail = Reader.NameTable.Add(@"CustVendDetail");
            id451_CustDetail = Reader.NameTable.Add(@"CustDetail");
            id256_ReprintDepositResp = Reader.NameTable.Add(@"ReprintDepositResp");
            id439_MeterIdentifier = Reader.NameTable.Add(@"MeterIdentifier");
            id229_accName = Reader.NameTable.Add(@"accName");
            id275_DispPwrLmtResp = Reader.NameTable.Add(@"DispPwrLmtResp");
            id458_AccountStatus = Reader.NameTable.Add(@"AccountStatus");
            id110_contactNo = Reader.NameTable.Add(@"contactNo");
            id364_ReversalEx = Reader.NameTable.Add(@"ReversalEx");
            id363_XMLVendSchemaEx = Reader.NameTable.Add(@"XMLVendSchemaEx");
            id37_reqMsgID = Reader.NameTable.Add(@"reqMsgID");
            id215_DebtRecoveryTotal = Reader.NameTable.Add(@"DebtRecoveryTotal");
            id75_MCTCredTokenIssue = Reader.NameTable.Add(@"MCTCredTokenIssue");
            id432_DataFault = Reader.NameTable.Add(@"DataFault");
            id218_FreeIssueTotal = Reader.NameTable.Add(@"FreeIssueTotal");
            id32_cancelRefNo = Reader.NameTable.Add(@"cancelRefNo");
            id408_CredLmtChg = Reader.NameTable.Add(@"CredLmtChg");
            id55_Item = Reader.NameTable.Add(@"http://www.conlog.co.za/xmlvend/base-ext/2.1.1/schema");
            id460_accountName = Reader.NameTable.Add(@"accountName");
            id415_ref = Reader.NameTable.Add(@"ref");
            id16_adviceResp = Reader.NameTable.Add(@"adviceResp");
            id266_ClearTamperResp = Reader.NameTable.Add(@"ClearTamperResp");
            id437_VendIDMethod = Reader.NameTable.Add(@"VendIDMethod");
            id387_UnknownMeterEx = Reader.NameTable.Add(@"UnknownMeterEx");
            id316_PayAccReceipt = Reader.NameTable.Add(@"PayAccReceipt");
            id82_Resource = Reader.NameTable.Add(@"Resource");
            id200_CurrencyTotal = Reader.NameTable.Add(@"CurrencyTotal");
            id221_lastSalesSeqNo = Reader.NameTable.Add(@"lastSalesSeqNo");
            id24_confirmMeterResp = Reader.NameTable.Add(@"confirmMeterResp");
            id273_TestDisplayResp = Reader.NameTable.Add(@"TestDisplayResp");
            id301_dispInstPwr = Reader.NameTable.Add(@"dispInstPwr");
            id335_ClearTamperTokenIssue = Reader.NameTable.Add(@"ClearTamperTokenIssue");
            id299_dispConsTot = Reader.NameTable.Add(@"dispConsTot");
            id114_VendorDetail = Reader.NameTable.Add(@"VendorDetail");
            id66_siUnit = Reader.NameTable.Add(@"siUnit");
            id222_depSlip = Reader.NameTable.Add(@"depSlip");
            id203_ConnectionTimeTotal = Reader.NameTable.Add(@"ConnectionTimeTotal");
            id220_firstSalesSeqNo = Reader.NameTable.Add(@"firstSalesSeqNo");
            id12_reprintDepResp = Reader.NameTable.Add(@"reprintDepResp");
            id461_accountBalance = Reader.NameTable.Add(@"accountBalance");
            id378_CheckBatchTotalEx = Reader.NameTable.Add(@"CheckBatchTotalEx");
            id397_AccNumEx = Reader.NameTable.Add(@"AccNumEx");
            id252_CustReportFaultResp = Reader.NameTable.Add(@"CustReportFaultResp");
            id447_RecordMissingReason = Reader.NameTable.Add(@"RecordMissingReason");
            id121_shift = Reader.NameTable.Add(@"shift");
            id39_dispHeader = Reader.NameTable.Add(@"dispHeader");
            id457_accountStatus = Reader.NameTable.Add(@"accountStatus");
            id152_balance = Reader.NameTable.Add(@"balance");
            id97_sgc = Reader.NameTable.Add(@"sgc");
            id454_custVendConfig = Reader.NameTable.Add(@"custVendConfig");
            id174_PingServerState = Reader.NameTable.Add(@"PingServerState");
            id434_IncorrectSGC = Reader.NameTable.Add(@"IncorrectSGC");
            id268_SetWaterFactorResp = Reader.NameTable.Add(@"SetWaterFactorResp");
            id70_TariffSetID = Reader.NameTable.Add(@"TariffSetID");
            id74_FreeCredTokenIssue = Reader.NameTable.Add(@"FreeCredTokenIssue");
            id137_Transactions = Reader.NameTable.Add(@"Transactions");
            id251_ConfirmCustomerResp = Reader.NameTable.Add(@"ConfirmCustomerResp");
            id244_ConfirmationAdviceResp = Reader.NameTable.Add(@"ConfirmationAdviceResp");
            id156_CreditTransferDetail = Reader.NameTable.Add(@"CreditTransferDetail");
            id417_CustFaultLog = Reader.NameTable.Add(@"CustFaultLog");
            id104_useSTT = Reader.NameTable.Add(@"useSTT");
            id2_Item = Reader.NameTable.Add(@"http://www.nrs.eskom.co.za/xmlvend/revenue/2.1/schema");
            id398_EngParameterEx = Reader.NameTable.Add(@"EngParameterEx");
            id426_KeepsTripping = Reader.NameTable.Add(@"KeepsTripping");
            id211_opName = Reader.NameTable.Add(@"opName");
            id245_LastRespAdviceResp = Reader.NameTable.Add(@"LastRespAdviceResp");
            id375_ClientIDAuthorisationEx = Reader.NameTable.Add(@"ClientIDAuthorisationEx");
            id234_endBatch = Reader.NameTable.Add(@"endBatch");
            id11_depositResp = Reader.NameTable.Add(@"depositResp");
            id448_NewInstallation = Reader.NameTable.Add(@"NewInstallation");
            id399_AccTypeEx = Reader.NameTable.Add(@"AccTypeEx");
            id118_BatchStatus = Reader.NameTable.Add(@"BatchStatus");
            id126_uniqueNumber = Reader.NameTable.Add(@"uniqueNumber");
            id310_DispPwrLmtTokenIssue = Reader.NameTable.Add(@"DispPwrLmtTokenIssue");
            id179_totalBatch = Reader.NameTable.Add(@"totalBatch");
            id202_WaterTotal = Reader.NameTable.Add(@"WaterTotal");
            id395_MeterDataMisMatchEx = Reader.NameTable.Add(@"MeterDataMisMatchEx");
            id157_oldMSNO = Reader.NameTable.Add(@"oldMSNO");
            id208_ChequeTotal = Reader.NameTable.Add(@"ChequeTotal");
            id287_testDispenser = Reader.NameTable.Add(@"testDispenser");
            id186_ended = Reader.NameTable.Add(@"ended");
            id101_MeterType = Reader.NameTable.Add(@"MeterType");
            id151_accDesc = Reader.NameTable.Add(@"accDesc");
            id369_SGCAuthorisationEx = Reader.NameTable.Add(@"SGCAuthorisationEx");
            id281_DispPhUnbalanceResp = Reader.NameTable.Add(@"DispPhUnbalanceResp");
            id206_CreditCardTotal = Reader.NameTable.Add(@"CreditCardTotal");
            id337_ClearCreditTokenIssue = Reader.NameTable.Add(@"ClearCreditTokenIssue");
            id135_CreditVendReceipt = Reader.NameTable.Add(@"CreditVendReceipt");
            id312_TestBreakerTokenIssue = Reader.NameTable.Add(@"TestBreakerTokenIssue");
            id178_TotalBatchResp = Reader.NameTable.Add(@"TotalBatchResp");
            id295_dispVer = Reader.NameTable.Add(@"dispVer");
            id436_meterInfo = Reader.NameTable.Add(@"meterInfo");
            id161_CreditVendResp = Reader.NameTable.Add(@"CreditVendResp");
            id404_VendorStatement = Reader.NameTable.Add(@"VendorStatement");
            id431_DisplayLightsButtons = Reader.NameTable.Add(@"DisplayLightsButtons");
            id334_clearTamper = Reader.NameTable.Add(@"clearTamper");
            id159_TrialCreditVendResp = Reader.NameTable.Add(@"TrialCreditVendResp");
            id381_ReprintDepositSlipEx = Reader.NameTable.Add(@"ReprintDepositSlipEx");
            id249_lastResponse = Reader.NameTable.Add(@"lastResponse");
            id302_DispInstPwrTokenIssue = Reader.NameTable.Add(@"DispInstPwrTokenIssue");
            id143_PayAccTx = Reader.NameTable.Add(@"PayAccTx");
            id134_creditVendReceipt = Reader.NameTable.Add(@"creditVendReceipt");
            id125_dateTime = Reader.NameTable.Add(@"dateTime");
            id327_KCTData = Reader.NameTable.Add(@"KCTData");
            id423_DeviceFault = Reader.NameTable.Add(@"DeviceFault");
            id230_branchCode = Reader.NameTable.Add(@"branchCode");
            id128_DeviceID = Reader.NameTable.Add(@"DeviceID");
            id190_firstTxSeqNo = Reader.NameTable.Add(@"firstTxSeqNo");
            id355_SystemEx = Reader.NameTable.Add(@"SystemEx");
            id77_OverRecCredTokenIssue = Reader.NameTable.Add(@"OverRecCredTokenIssue");
            id46_origTx = Reader.NameTable.Add(@"origTx");
            id248_adviceReqMsgID = Reader.NameTable.Add(@"adviceReqMsgID");
            id217_CancellationTotal = Reader.NameTable.Add(@"CancellationTotal");
            id354_Fault = Reader.NameTable.Add(@"Fault");
            id286_TestDispenserResp = Reader.NameTable.Add(@"TestDispenserResp");
            id421_NetworkFaultReport = Reader.NameTable.Add(@"NetworkFaultReport");
            id73_SaleCredTokenIssue = Reader.NameTable.Add(@"SaleCredTokenIssue");
            id430_MeterDead = Reader.NameTable.Add(@"MeterDead");
            id373_UpdateMtrKeySameEx = Reader.NameTable.Add(@"UpdateMtrKeySameEx");
            id246_ReversalAdviceResp = Reader.NameTable.Add(@"ReversalAdviceResp");
            id342_creditVendTx = Reader.NameTable.Add(@"creditVendTx");
            id254_ReprintEndBatchResp = Reader.NameTable.Add(@"ReprintEndBatchResp");
            id235_StartBatchResp = Reader.NameTable.Add(@"StartBatchResp");
            id219_MeterCreditTransferTotal = Reader.NameTable.Add(@"MeterCreditTransferTotal");
            id10_vendorStatementResp = Reader.NameTable.Add(@"vendorStatementResp");
            id300_DispConsTotTokenIssue = Reader.NameTable.Add(@"DispConsTotTokenIssue");
            id406_lineItem = Reader.NameTable.Add(@"lineItem");
            id435_IncorrectTI = Reader.NameTable.Add(@"IncorrectTI");
            id345_STS1TokenInfo = Reader.NameTable.Add(@"STS1TokenInfo");
            id441_MeterCard = Reader.NameTable.Add(@"MeterCard");
            id22_makeMerchantDeposit = Reader.NameTable.Add(@"makeMerchantDeposit");
            id324_PwrLmtTokenIssue = Reader.NameTable.Add(@"PwrLmtTokenIssue");
            id228_Beneficiary = Reader.NameTable.Add(@"Beneficiary");
            id455_custAccountDetail = Reader.NameTable.Add(@"custAccountDetail");
            id304_DispTamperTokenIssue = Reader.NameTable.Add(@"DispTamperTokenIssue");
            id223_salesBatch = Reader.NameTable.Add(@"salesBatch");
            id64_symbol = Reader.NameTable.Add(@"symbol");
            id444_AccNo = Reader.NameTable.Add(@"AccNo");
            id464_canVend = Reader.NameTable.Add(@"canVend");
            id276_DispTIResp = Reader.NameTable.Add(@"DispTIResp");
            id62_Currency = Reader.NameTable.Add(@"Currency");
            id414_depositDate = Reader.NameTable.Add(@"depositDate");
            id38_respDateTime = Reader.NameTable.Add(@"respDateTime");
            id224_DepositSlip = Reader.NameTable.Add(@"DepositSlip");
            id445_isSmartCard = Reader.NameTable.Add(@"isSmartCard");
            id351_credit = Reader.NameTable.Add(@"credit");
            id289_testAll = Reader.NameTable.Add(@"testAll");
            id360_UseCaseSupportEx = Reader.NameTable.Add(@"UseCaseSupportEx");
            id173_UnknownServerState = Reader.NameTable.Add(@"UnknownServerState");
            id89_STS1Token = Reader.NameTable.Add(@"STS1Token");
            id371_FBEEx = Reader.NameTable.Add(@"FBEEx");
            id331_toSGC = Reader.NameTable.Add(@"toSGC");
            id207_OtherTotal = Reader.NameTable.Add(@"OtherTotal");
            id419_faultReport = Reader.NameTable.Add(@"faultReport");
            id294_DispRegistersTokenIssue = Reader.NameTable.Add(@"DispRegistersTokenIssue");
            id199_GasTotal = Reader.NameTable.Add(@"GasTotal");
            id63_value = Reader.NameTable.Add(@"value");
            id8_Item = Reader.NameTable.Add(@"http://www.nrs.eskom.co.za/xmlvend/meter/2.1/schema");
            id100_meterType = Reader.NameTable.Add(@"meterType");
            id329_fromKRN = Reader.NameTable.Add(@"fromKRN");
            id271_PayAccResp = Reader.NameTable.Add(@"PayAccResp");
            id162_ConfirmMeterResp = Reader.NameTable.Add(@"ConfirmMeterResp");
            id317_reprint = Reader.NameTable.Add(@"reprint");
            id170_serverState = Reader.NameTable.Add(@"serverState");
            id130_EANDeviceID = Reader.NameTable.Add(@"EANDeviceID");
            id113_daysLastPurchase = Reader.NameTable.Add(@"daysLastPurchase");
            id427_TokensNotWorking = Reader.NameTable.Add(@"TokensNotWorking");
            id201_ElectricityTotal = Reader.NameTable.Add(@"ElectricityTotal");
            id274_TestBreakerResp = Reader.NameTable.Add(@"TestBreakerResp");
            id30_cancelPendingResp = Reader.NameTable.Add(@"cancelPendingResp");
            id92_set2ndMeterKey = Reader.NameTable.Add(@"set2ndMeterKey");
            id164_ConfirmMeterResult = Reader.NameTable.Add(@"ConfirmMeterResult");
            id438_meterIdentifier = Reader.NameTable.Add(@"meterIdentifier");
            id285_TestAllResp = Reader.NameTable.Add(@"TestAllResp");
            id344_TokenInfo = Reader.NameTable.Add(@"TokenInfo");
            id61_rate = Reader.NameTable.Add(@"rate");
            id303_dispTamper = Reader.NameTable.Add(@"dispTamper");
            id416_custFaultLog = Reader.NameTable.Add(@"custFaultLog");
            id422_MeterFaultReport = Reader.NameTable.Add(@"MeterFaultReport");
            id257_XMLVendFaultResp = Reader.NameTable.Add(@"XMLVendFaultResp");
            id171_ServerState = Reader.NameTable.Add(@"ServerState");
            id413_depositRefNo = Reader.NameTable.Add(@"depositRefNo");
            id103_tt = Reader.NameTable.Add(@"tt");
            id132_id = Reader.NameTable.Add(@"id");
        }
    }

    public abstract class XmlSerializer1 : System.Xml.Serialization.XmlSerializer {
        protected override System.Xml.Serialization.XmlSerializationReader CreateReader() {
            return new XmlSerializationReaderXMLVendService();
        }
        protected override System.Xml.Serialization.XmlSerializationWriter CreateWriter() {
            return new XmlSerializationWriterXMLVendService();
        }
    }

    public sealed class ArrayOfObjectSerializer : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ConfirmCustomerRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write359_ConfirmCustomerRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer1 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ConfirmCustomerRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read359_ConfirmCustomerRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer2 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ConfirmCustomerRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write360_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer3 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ConfirmCustomerRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read360_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer4 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write361_ReprintRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer5 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read361_ReprintRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer6 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write362_ReprintRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer7 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read362_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer8 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CancelVendRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write363_CancelVendRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer9 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CancelVendRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read363_CancelVendRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer10 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CancelVendRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write364_CancelVendRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer11 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CancelVendRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read364_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer12 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"VerifyRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write365_VerifyRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer13 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"VerifyRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read365_VerifyRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer14 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"VerifyRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write366_VerifyRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer15 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"VerifyRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read366_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer16 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"PayAccountRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write367_PayAccountRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer17 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"PayAccountRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read367_PayAccountRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer18 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"PayAccountRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write368_PayAccountRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer19 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"PayAccountRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read368_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer20 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CustReportFaultRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write369_CustReportFaultRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer21 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CustReportFaultRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read369_CustReportFaultRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer22 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CustReportFaultRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write370_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer23 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CustReportFaultRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read370_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer24 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"UpdateMeterKeyRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write371_UpdateMeterKeyRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer25 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"UpdateMeterKeyRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read371_UpdateMeterKeyRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer26 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"UpdateMeterKeyRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write372_UpdateMeterKeyRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer27 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"UpdateMeterKeyRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read372_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer28 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"VendorStatementRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write373_VendorStatementRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer29 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"VendorStatementRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read373_VendorStatementRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer30 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"VendorStatementRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write374_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer31 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"VendorStatementRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read374_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer32 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"DepositSlipRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write375_DepositSlipRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer33 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"DepositSlipRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read375_DepositSlipRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer34 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"DepositSlipRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write376_DepositSlipRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer35 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"DepositSlipRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read376_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer36 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintDepositSlipRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write377_ReprintDepositSlipRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer37 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintDepositSlipRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read377_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer38 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintDepositSlipRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write378_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer39 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintDepositSlipRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read378_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer40 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintEndBatchRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write379_ReprintEndBatchRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer41 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintEndBatchRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read379_ReprintEndBatchRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer42 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintEndBatchRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write380_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer43 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReprintEndBatchRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read380_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer44 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"NonMeterSpecificEngRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write381_NonMeterSpecificEngRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer45 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"NonMeterSpecificEngRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read381_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer46 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"NonMeterSpecificEngRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write382_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer47 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"NonMeterSpecificEngRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read382_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer48 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MeterSpecificEngRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write383_MeterSpecificEngRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer49 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MeterSpecificEngRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read383_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer50 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MeterSpecificEngRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write384_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer51 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MeterSpecificEngRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read384_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer52 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"AdviceRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write385_AdviceRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer53 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"AdviceRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read385_AdviceRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer54 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"AdviceRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write386_AdviceRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer55 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"AdviceRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read386_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer56 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"StartBatchRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write387_StartBatchRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer57 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"StartBatchRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read387_StartBatchRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer58 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"StartBatchRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write388_StartBatchRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer59 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"StartBatchRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read388_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer60 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"EndBatchRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write389_EndBatchRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer61 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"EndBatchRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read389_EndBatchRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer62 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"EndBatchRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write390_EndBatchRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer63 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"EndBatchRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read390_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer64 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"TotalBatchRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write391_TotalBatchRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer65 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"TotalBatchRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read391_TotalBatchRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer66 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"TotalBatchRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write392_TotalBatchRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer67 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"TotalBatchRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read392_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer68 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"GetVendingServerStateRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write393_GetVendingServerStateRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer69 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"GetVendingServerStateRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read393_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer70 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"GetVendingServerStateRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write394_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer71 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"GetVendingServerStateRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read394_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer72 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MakeMerchantDeposit", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write395_MakeMerchantDeposit((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer73 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MakeMerchantDepositResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read395_MakeMerchantDepositResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer74 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MakeMerchantDepositInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write396_MakeMerchantDepositInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer75 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MakeMerchantDepositResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read396_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer76 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReverseMerchantDeposit", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write397_ReverseMerchantDeposit((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer77 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReverseMerchantDepositResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read397_ReverseMerchantDepositResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer78 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReverseMerchantDepositInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write398_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer79 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ReverseMerchantDepositResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read398_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer80 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ConfirmMeterRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write399_ConfirmMeterRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer81 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ConfirmMeterRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read399_ConfirmMeterRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer82 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ConfirmMeterRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write400_ConfirmMeterRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer83 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"ConfirmMeterRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read400_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer84 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CreditVendRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write401_CreditVendRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer85 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CreditVendRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read401_CreditVendRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer86 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CreditVendRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write402_CreditVendRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer87 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CreditVendRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read402_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer88 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"FBERequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write403_FBERequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer89 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"FBERequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read403_FBERequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer90 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"FBERequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write404_FBERequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer91 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"FBERequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read404_FBERequestResponseOutHeaders();
        }
    }

    public sealed class ArrayOfObjectSerializer92 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"TrialCreditVendRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write405_TrialCreditVendRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer93 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"TrialCreditVendRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read405_TrialCreditVendRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer94 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"TrialCreditVendRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write406_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer95 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"TrialCreditVendRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read406_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer96 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MeterCreditTransferRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write407_MeterCreditTransferRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer97 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MeterCreditTransferRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read407_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer98 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MeterCreditTransferRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write408_Item((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer99 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"MeterCreditTransferRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read408_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer100 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"FreeIssueRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write409_FreeIssueRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer101 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"FreeIssueRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read409_FreeIssueRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer102 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"FreeIssueRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write410_FreeIssueRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer103 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"FreeIssueRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read410_Item();
        }
    }

    public sealed class ArrayOfObjectSerializer104 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CancelPendingRequest", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write411_CancelPendingRequest((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer105 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CancelPendingRequestResponse", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read411_CancelPendingRequestResponse();
        }
    }

    public sealed class ArrayOfObjectSerializer106 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CancelPendingRequestInHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((XmlSerializationWriterXMLVendService)writer).Write412_CancelPendingRequestInHeaders((object[])objectToSerialize);
        }
    }

    public sealed class ArrayOfObjectSerializer107 : XmlSerializer1 {

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"CancelPendingRequestResponseOutHeaders", @"http://www.nrs.eskom.co.za/xmlvend/service/2.1");
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((XmlSerializationReaderXMLVendService)reader).Read412_Item();
        }
    }

    public class XmlSerializerContract : global::System.Xml.Serialization.XmlSerializerImplementation {
        public override global::System.Xml.Serialization.XmlSerializationReader Reader { get { return new XmlSerializationReaderXMLVendService(); } }
        public override global::System.Xml.Serialization.XmlSerializationWriter Writer { get { return new XmlSerializationWriterXMLVendService(); } }
        System.Collections.Hashtable readMethods = null;
        public override System.Collections.Hashtable ReadMethods {
            get {
                if (readMethods == null) {
                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmCustomerResp ConfirmCustomerRequest(PwkApi.com.conlog.val.phb.ConfirmCustomerReq):Response"] = @"Read359_ConfirmCustomerRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmCustomerResp ConfirmCustomerRequest(PwkApi.com.conlog.val.phb.ConfirmCustomerReq):OutHeaders"] = @"Read360_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintResp ReprintRequest(PwkApi.com.conlog.val.phb.ReprintReq):Response"] = @"Read361_ReprintRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintResp ReprintRequest(PwkApi.com.conlog.val.phb.ReprintReq):OutHeaders"] = @"Read362_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelVendResp CancelVendRequest(PwkApi.com.conlog.val.phb.CancelVendReq):Response"] = @"Read363_CancelVendRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelVendResp CancelVendRequest(PwkApi.com.conlog.val.phb.CancelVendReq):OutHeaders"] = @"Read364_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VerifyResp VerifyRequest(PwkApi.com.conlog.val.phb.VerifyReq):Response"] = @"Read365_VerifyRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VerifyResp VerifyRequest(PwkApi.com.conlog.val.phb.VerifyReq):OutHeaders"] = @"Read366_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.PayAccResp PayAccountRequest(PwkApi.com.conlog.val.phb.PayAccReq):Response"] = @"Read367_PayAccountRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.PayAccResp PayAccountRequest(PwkApi.com.conlog.val.phb.PayAccReq):OutHeaders"] = @"Read368_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CustReportFaultResp CustReportFaultRequest(PwkApi.com.conlog.val.phb.CustReportFaultReq):Response"] = @"Read369_CustReportFaultRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CustReportFaultResp CustReportFaultRequest(PwkApi.com.conlog.val.phb.CustReportFaultReq):OutHeaders"] = @"Read370_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.UpdateMeterKeyResp UpdateMeterKeyRequest(PwkApi.com.conlog.val.phb.UpdateMeterKeyReq):Response"] = @"Read371_UpdateMeterKeyRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.UpdateMeterKeyResp UpdateMeterKeyRequest(PwkApi.com.conlog.val.phb.UpdateMeterKeyReq):OutHeaders"] = @"Read372_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VendorStatementResp VendorStatementRequest(PwkApi.com.conlog.val.phb.VendorStatementReq):Response"] = @"Read373_VendorStatementRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VendorStatementResp VendorStatementRequest(PwkApi.com.conlog.val.phb.VendorStatementReq):OutHeaders"] = @"Read374_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.DepositResp DepositSlipRequest(PwkApi.com.conlog.val.phb.DepositReq):Response"] = @"Read375_DepositSlipRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.DepositResp DepositSlipRequest(PwkApi.com.conlog.val.phb.DepositReq):OutHeaders"] = @"Read376_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintDepositResp ReprintDepositSlipRequest(PwkApi.com.conlog.val.phb.ReprintDepositReq):Response"] = @"Read377_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintDepositResp ReprintDepositSlipRequest(PwkApi.com.conlog.val.phb.ReprintDepositReq):OutHeaders"] = @"Read378_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintEndBatchResp ReprintEndBatchRequest(PwkApi.com.conlog.val.phb.ReprintEndBatchReq):Response"] = @"Read379_ReprintEndBatchRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintEndBatchResp ReprintEndBatchRequest(PwkApi.com.conlog.val.phb.ReprintEndBatchReq):OutHeaders"] = @"Read380_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.NonMeterSpecificEngResp NonMeterSpecificEngRequest(PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq):Response"] = @"Read381_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.NonMeterSpecificEngResp NonMeterSpecificEngRequest(PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq):OutHeaders"] = @"Read382_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterSpecificEngResp MeterSpecificEngRequest(PwkApi.com.conlog.val.phb.MeterSpecificEngReq):Response"] = @"Read383_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterSpecificEngResp MeterSpecificEngRequest(PwkApi.com.conlog.val.phb.MeterSpecificEngReq):OutHeaders"] = @"Read384_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.AdviceResp AdviceRequest(PwkApi.com.conlog.val.phb.AdviceReq):Response"] = @"Read385_AdviceRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.AdviceResp AdviceRequest(PwkApi.com.conlog.val.phb.AdviceReq):OutHeaders"] = @"Read386_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.StartBatchResp StartBatchRequest(PwkApi.com.conlog.val.phb.StartBatchReq):Response"] = @"Read387_StartBatchRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.StartBatchResp StartBatchRequest(PwkApi.com.conlog.val.phb.StartBatchReq):OutHeaders"] = @"Read388_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.EndBatchResp EndBatchRequest(PwkApi.com.conlog.val.phb.EndBatchReq):Response"] = @"Read389_EndBatchRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.EndBatchResp EndBatchRequest(PwkApi.com.conlog.val.phb.EndBatchReq):OutHeaders"] = @"Read390_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TotalBatchResp TotalBatchRequest(PwkApi.com.conlog.val.phb.TotalBatchReq):Response"] = @"Read391_TotalBatchRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TotalBatchResp TotalBatchRequest(PwkApi.com.conlog.val.phb.TotalBatchReq):OutHeaders"] = @"Read392_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.GetVendingServerStateResp GetVendingServerStateRequest(PwkApi.com.conlog.val.phb.GetVendingServerStateReq):Response"] = @"Read393_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.GetVendingServerStateResp GetVendingServerStateRequest(PwkApi.com.conlog.val.phb.GetVendingServerStateReq):OutHeaders"] = @"Read394_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MakeMerchantDepositResp MakeMerchantDeposit(PwkApi.com.conlog.val.phb.MakeMerchantDepositReq):Response"] = @"Read395_MakeMerchantDepositResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MakeMerchantDepositResp MakeMerchantDeposit(PwkApi.com.conlog.val.phb.MakeMerchantDepositReq):OutHeaders"] = @"Read396_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp ReverseMerchantDeposit(PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq):Response"] = @"Read397_ReverseMerchantDepositResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp ReverseMerchantDeposit(PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq):OutHeaders"] = @"Read398_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmMeterResp ConfirmMeterRequest(PwkApi.com.conlog.val.phb.ConfirmMeterReq):Response"] = @"Read399_ConfirmMeterRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmMeterResp ConfirmMeterRequest(PwkApi.com.conlog.val.phb.ConfirmMeterReq):OutHeaders"] = @"Read400_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CreditVendResp CreditVendRequest(PwkApi.com.conlog.val.phb.CreditVendReq):Response"] = @"Read401_CreditVendRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CreditVendResp CreditVendRequest(PwkApi.com.conlog.val.phb.CreditVendReq):OutHeaders"] = @"Read402_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FBEResp FBERequest(PwkApi.com.conlog.val.phb.FBEReq):Response"] = @"Read403_FBERequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FBEResp FBERequest(PwkApi.com.conlog.val.phb.FBEReq):OutHeaders"] = @"Read404_FBERequestResponseOutHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TrialCreditVendResp TrialCreditVendRequest(PwkApi.com.conlog.val.phb.TrialCreditVendReq):Response"] = @"Read405_TrialCreditVendRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TrialCreditVendResp TrialCreditVendRequest(PwkApi.com.conlog.val.phb.TrialCreditVendReq):OutHeaders"] = @"Read406_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterCreditTransferResp MeterCreditTransferRequest(PwkApi.com.conlog.val.phb.MeterCreditTransferReq):Response"] = @"Read407_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterCreditTransferResp MeterCreditTransferRequest(PwkApi.com.conlog.val.phb.MeterCreditTransferReq):OutHeaders"] = @"Read408_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FreeIssueResp FreeIssueRequest(PwkApi.com.conlog.val.phb.FreeIssueReq):Response"] = @"Read409_FreeIssueRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FreeIssueResp FreeIssueRequest(PwkApi.com.conlog.val.phb.FreeIssueReq):OutHeaders"] = @"Read410_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelPendingResp CancelPendingRequest(PwkApi.com.conlog.val.phb.CancelPendingReq):Response"] = @"Read411_CancelPendingRequestResponse";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelPendingResp CancelPendingRequest(PwkApi.com.conlog.val.phb.CancelPendingReq):OutHeaders"] = @"Read412_Item";
                    if (readMethods == null) readMethods = _tmp;
                }
                return readMethods;
            }
        }
        System.Collections.Hashtable writeMethods = null;
        public override System.Collections.Hashtable WriteMethods {
            get {
                if (writeMethods == null) {
                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmCustomerResp ConfirmCustomerRequest(PwkApi.com.conlog.val.phb.ConfirmCustomerReq)"] = @"Write359_ConfirmCustomerRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmCustomerResp ConfirmCustomerRequest(PwkApi.com.conlog.val.phb.ConfirmCustomerReq):InHeaders"] = @"Write360_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintResp ReprintRequest(PwkApi.com.conlog.val.phb.ReprintReq)"] = @"Write361_ReprintRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintResp ReprintRequest(PwkApi.com.conlog.val.phb.ReprintReq):InHeaders"] = @"Write362_ReprintRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelVendResp CancelVendRequest(PwkApi.com.conlog.val.phb.CancelVendReq)"] = @"Write363_CancelVendRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelVendResp CancelVendRequest(PwkApi.com.conlog.val.phb.CancelVendReq):InHeaders"] = @"Write364_CancelVendRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VerifyResp VerifyRequest(PwkApi.com.conlog.val.phb.VerifyReq)"] = @"Write365_VerifyRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VerifyResp VerifyRequest(PwkApi.com.conlog.val.phb.VerifyReq):InHeaders"] = @"Write366_VerifyRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.PayAccResp PayAccountRequest(PwkApi.com.conlog.val.phb.PayAccReq)"] = @"Write367_PayAccountRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.PayAccResp PayAccountRequest(PwkApi.com.conlog.val.phb.PayAccReq):InHeaders"] = @"Write368_PayAccountRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CustReportFaultResp CustReportFaultRequest(PwkApi.com.conlog.val.phb.CustReportFaultReq)"] = @"Write369_CustReportFaultRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CustReportFaultResp CustReportFaultRequest(PwkApi.com.conlog.val.phb.CustReportFaultReq):InHeaders"] = @"Write370_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.UpdateMeterKeyResp UpdateMeterKeyRequest(PwkApi.com.conlog.val.phb.UpdateMeterKeyReq)"] = @"Write371_UpdateMeterKeyRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.UpdateMeterKeyResp UpdateMeterKeyRequest(PwkApi.com.conlog.val.phb.UpdateMeterKeyReq):InHeaders"] = @"Write372_UpdateMeterKeyRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VendorStatementResp VendorStatementRequest(PwkApi.com.conlog.val.phb.VendorStatementReq)"] = @"Write373_VendorStatementRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VendorStatementResp VendorStatementRequest(PwkApi.com.conlog.val.phb.VendorStatementReq):InHeaders"] = @"Write374_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.DepositResp DepositSlipRequest(PwkApi.com.conlog.val.phb.DepositReq)"] = @"Write375_DepositSlipRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.DepositResp DepositSlipRequest(PwkApi.com.conlog.val.phb.DepositReq):InHeaders"] = @"Write376_DepositSlipRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintDepositResp ReprintDepositSlipRequest(PwkApi.com.conlog.val.phb.ReprintDepositReq)"] = @"Write377_ReprintDepositSlipRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintDepositResp ReprintDepositSlipRequest(PwkApi.com.conlog.val.phb.ReprintDepositReq):InHeaders"] = @"Write378_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintEndBatchResp ReprintEndBatchRequest(PwkApi.com.conlog.val.phb.ReprintEndBatchReq)"] = @"Write379_ReprintEndBatchRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintEndBatchResp ReprintEndBatchRequest(PwkApi.com.conlog.val.phb.ReprintEndBatchReq):InHeaders"] = @"Write380_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.NonMeterSpecificEngResp NonMeterSpecificEngRequest(PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq)"] = @"Write381_NonMeterSpecificEngRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.NonMeterSpecificEngResp NonMeterSpecificEngRequest(PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq):InHeaders"] = @"Write382_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterSpecificEngResp MeterSpecificEngRequest(PwkApi.com.conlog.val.phb.MeterSpecificEngReq)"] = @"Write383_MeterSpecificEngRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterSpecificEngResp MeterSpecificEngRequest(PwkApi.com.conlog.val.phb.MeterSpecificEngReq):InHeaders"] = @"Write384_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.AdviceResp AdviceRequest(PwkApi.com.conlog.val.phb.AdviceReq)"] = @"Write385_AdviceRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.AdviceResp AdviceRequest(PwkApi.com.conlog.val.phb.AdviceReq):InHeaders"] = @"Write386_AdviceRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.StartBatchResp StartBatchRequest(PwkApi.com.conlog.val.phb.StartBatchReq)"] = @"Write387_StartBatchRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.StartBatchResp StartBatchRequest(PwkApi.com.conlog.val.phb.StartBatchReq):InHeaders"] = @"Write388_StartBatchRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.EndBatchResp EndBatchRequest(PwkApi.com.conlog.val.phb.EndBatchReq)"] = @"Write389_EndBatchRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.EndBatchResp EndBatchRequest(PwkApi.com.conlog.val.phb.EndBatchReq):InHeaders"] = @"Write390_EndBatchRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TotalBatchResp TotalBatchRequest(PwkApi.com.conlog.val.phb.TotalBatchReq)"] = @"Write391_TotalBatchRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TotalBatchResp TotalBatchRequest(PwkApi.com.conlog.val.phb.TotalBatchReq):InHeaders"] = @"Write392_TotalBatchRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.GetVendingServerStateResp GetVendingServerStateRequest(PwkApi.com.conlog.val.phb.GetVendingServerStateReq)"] = @"Write393_GetVendingServerStateRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.GetVendingServerStateResp GetVendingServerStateRequest(PwkApi.com.conlog.val.phb.GetVendingServerStateReq):InHeaders"] = @"Write394_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MakeMerchantDepositResp MakeMerchantDeposit(PwkApi.com.conlog.val.phb.MakeMerchantDepositReq)"] = @"Write395_MakeMerchantDeposit";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MakeMerchantDepositResp MakeMerchantDeposit(PwkApi.com.conlog.val.phb.MakeMerchantDepositReq):InHeaders"] = @"Write396_MakeMerchantDepositInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp ReverseMerchantDeposit(PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq)"] = @"Write397_ReverseMerchantDeposit";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp ReverseMerchantDeposit(PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq):InHeaders"] = @"Write398_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmMeterResp ConfirmMeterRequest(PwkApi.com.conlog.val.phb.ConfirmMeterReq)"] = @"Write399_ConfirmMeterRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmMeterResp ConfirmMeterRequest(PwkApi.com.conlog.val.phb.ConfirmMeterReq):InHeaders"] = @"Write400_ConfirmMeterRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CreditVendResp CreditVendRequest(PwkApi.com.conlog.val.phb.CreditVendReq)"] = @"Write401_CreditVendRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CreditVendResp CreditVendRequest(PwkApi.com.conlog.val.phb.CreditVendReq):InHeaders"] = @"Write402_CreditVendRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FBEResp FBERequest(PwkApi.com.conlog.val.phb.FBEReq)"] = @"Write403_FBERequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FBEResp FBERequest(PwkApi.com.conlog.val.phb.FBEReq):InHeaders"] = @"Write404_FBERequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TrialCreditVendResp TrialCreditVendRequest(PwkApi.com.conlog.val.phb.TrialCreditVendReq)"] = @"Write405_TrialCreditVendRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TrialCreditVendResp TrialCreditVendRequest(PwkApi.com.conlog.val.phb.TrialCreditVendReq):InHeaders"] = @"Write406_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterCreditTransferResp MeterCreditTransferRequest(PwkApi.com.conlog.val.phb.MeterCreditTransferReq)"] = @"Write407_MeterCreditTransferRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterCreditTransferResp MeterCreditTransferRequest(PwkApi.com.conlog.val.phb.MeterCreditTransferReq):InHeaders"] = @"Write408_Item";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FreeIssueResp FreeIssueRequest(PwkApi.com.conlog.val.phb.FreeIssueReq)"] = @"Write409_FreeIssueRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FreeIssueResp FreeIssueRequest(PwkApi.com.conlog.val.phb.FreeIssueReq):InHeaders"] = @"Write410_FreeIssueRequestInHeaders";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelPendingResp CancelPendingRequest(PwkApi.com.conlog.val.phb.CancelPendingReq)"] = @"Write411_CancelPendingRequest";
                    _tmp[@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelPendingResp CancelPendingRequest(PwkApi.com.conlog.val.phb.CancelPendingReq):InHeaders"] = @"Write412_CancelPendingRequestInHeaders";
                    if (writeMethods == null) writeMethods = _tmp;
                }
                return writeMethods;
            }
        }
        System.Collections.Hashtable typedSerializers = null;
        public override System.Collections.Hashtable TypedSerializers {
            get {
                if (typedSerializers == null) {
                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TrialCreditVendResp TrialCreditVendRequest(PwkApi.com.conlog.val.phb.TrialCreditVendReq):InHeaders", new ArrayOfObjectSerializer94());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FBEResp FBERequest(PwkApi.com.conlog.val.phb.FBEReq):OutHeaders", new ArrayOfObjectSerializer91());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintEndBatchResp ReprintEndBatchRequest(PwkApi.com.conlog.val.phb.ReprintEndBatchReq)", new ArrayOfObjectSerializer40());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.PayAccResp PayAccountRequest(PwkApi.com.conlog.val.phb.PayAccReq):OutHeaders", new ArrayOfObjectSerializer19());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmCustomerResp ConfirmCustomerRequest(PwkApi.com.conlog.val.phb.ConfirmCustomerReq):Response", new ArrayOfObjectSerializer1());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.UpdateMeterKeyResp UpdateMeterKeyRequest(PwkApi.com.conlog.val.phb.UpdateMeterKeyReq):OutHeaders", new ArrayOfObjectSerializer27());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CustReportFaultResp CustReportFaultRequest(PwkApi.com.conlog.val.phb.CustReportFaultReq):InHeaders", new ArrayOfObjectSerializer22());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FBEResp FBERequest(PwkApi.com.conlog.val.phb.FBEReq):Response", new ArrayOfObjectSerializer89());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.StartBatchResp StartBatchRequest(PwkApi.com.conlog.val.phb.StartBatchReq):OutHeaders", new ArrayOfObjectSerializer59());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintResp ReprintRequest(PwkApi.com.conlog.val.phb.ReprintReq):Response", new ArrayOfObjectSerializer5());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterSpecificEngResp MeterSpecificEngRequest(PwkApi.com.conlog.val.phb.MeterSpecificEngReq)", new ArrayOfObjectSerializer48());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FreeIssueResp FreeIssueRequest(PwkApi.com.conlog.val.phb.FreeIssueReq):OutHeaders", new ArrayOfObjectSerializer103());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TotalBatchResp TotalBatchRequest(PwkApi.com.conlog.val.phb.TotalBatchReq)", new ArrayOfObjectSerializer64());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TrialCreditVendResp TrialCreditVendRequest(PwkApi.com.conlog.val.phb.TrialCreditVendReq):Response", new ArrayOfObjectSerializer93());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CreditVendResp CreditVendRequest(PwkApi.com.conlog.val.phb.CreditVendReq):Response", new ArrayOfObjectSerializer85());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.EndBatchResp EndBatchRequest(PwkApi.com.conlog.val.phb.EndBatchReq):Response", new ArrayOfObjectSerializer61());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VendorStatementResp VendorStatementRequest(PwkApi.com.conlog.val.phb.VendorStatementReq):InHeaders", new ArrayOfObjectSerializer30());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.StartBatchResp StartBatchRequest(PwkApi.com.conlog.val.phb.StartBatchReq):Response", new ArrayOfObjectSerializer57());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.GetVendingServerStateResp GetVendingServerStateRequest(PwkApi.com.conlog.val.phb.GetVendingServerStateReq):InHeaders", new ArrayOfObjectSerializer70());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintDepositResp ReprintDepositSlipRequest(PwkApi.com.conlog.val.phb.ReprintDepositReq)", new ArrayOfObjectSerializer36());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.UpdateMeterKeyResp UpdateMeterKeyRequest(PwkApi.com.conlog.val.phb.UpdateMeterKeyReq):InHeaders", new ArrayOfObjectSerializer26());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintEndBatchResp ReprintEndBatchRequest(PwkApi.com.conlog.val.phb.ReprintEndBatchReq):InHeaders", new ArrayOfObjectSerializer42());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.EndBatchResp EndBatchRequest(PwkApi.com.conlog.val.phb.EndBatchReq):InHeaders", new ArrayOfObjectSerializer62());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp ReverseMerchantDeposit(PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq)", new ArrayOfObjectSerializer76());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.DepositResp DepositSlipRequest(PwkApi.com.conlog.val.phb.DepositReq):Response", new ArrayOfObjectSerializer33());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintEndBatchResp ReprintEndBatchRequest(PwkApi.com.conlog.val.phb.ReprintEndBatchReq):OutHeaders", new ArrayOfObjectSerializer43());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelVendResp CancelVendRequest(PwkApi.com.conlog.val.phb.CancelVendReq):Response", new ArrayOfObjectSerializer9());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.EndBatchResp EndBatchRequest(PwkApi.com.conlog.val.phb.EndBatchReq)", new ArrayOfObjectSerializer60());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CustReportFaultResp CustReportFaultRequest(PwkApi.com.conlog.val.phb.CustReportFaultReq):Response", new ArrayOfObjectSerializer21());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CustReportFaultResp CustReportFaultRequest(PwkApi.com.conlog.val.phb.CustReportFaultReq):OutHeaders", new ArrayOfObjectSerializer23());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintResp ReprintRequest(PwkApi.com.conlog.val.phb.ReprintReq):InHeaders", new ArrayOfObjectSerializer6());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.DepositResp DepositSlipRequest(PwkApi.com.conlog.val.phb.DepositReq):InHeaders", new ArrayOfObjectSerializer34());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterSpecificEngResp MeterSpecificEngRequest(PwkApi.com.conlog.val.phb.MeterSpecificEngReq):InHeaders", new ArrayOfObjectSerializer50());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelVendResp CancelVendRequest(PwkApi.com.conlog.val.phb.CancelVendReq):OutHeaders", new ArrayOfObjectSerializer11());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.NonMeterSpecificEngResp NonMeterSpecificEngRequest(PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq):Response", new ArrayOfObjectSerializer45());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VendorStatementResp VendorStatementRequest(PwkApi.com.conlog.val.phb.VendorStatementReq)", new ArrayOfObjectSerializer28());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.PayAccResp PayAccountRequest(PwkApi.com.conlog.val.phb.PayAccReq):InHeaders", new ArrayOfObjectSerializer18());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmMeterResp ConfirmMeterRequest(PwkApi.com.conlog.val.phb.ConfirmMeterReq)", new ArrayOfObjectSerializer80());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintDepositResp ReprintDepositSlipRequest(PwkApi.com.conlog.val.phb.ReprintDepositReq):InHeaders", new ArrayOfObjectSerializer38());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterCreditTransferResp MeterCreditTransferRequest(PwkApi.com.conlog.val.phb.MeterCreditTransferReq):OutHeaders", new ArrayOfObjectSerializer99());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VerifyResp VerifyRequest(PwkApi.com.conlog.val.phb.VerifyReq):Response", new ArrayOfObjectSerializer13());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CreditVendResp CreditVendRequest(PwkApi.com.conlog.val.phb.CreditVendReq):OutHeaders", new ArrayOfObjectSerializer87());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmMeterResp ConfirmMeterRequest(PwkApi.com.conlog.val.phb.ConfirmMeterReq):OutHeaders", new ArrayOfObjectSerializer83());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.NonMeterSpecificEngResp NonMeterSpecificEngRequest(PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq)", new ArrayOfObjectSerializer44());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.StartBatchResp StartBatchRequest(PwkApi.com.conlog.val.phb.StartBatchReq)", new ArrayOfObjectSerializer56());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.AdviceResp AdviceRequest(PwkApi.com.conlog.val.phb.AdviceReq):InHeaders", new ArrayOfObjectSerializer54());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelPendingResp CancelPendingRequest(PwkApi.com.conlog.val.phb.CancelPendingReq):OutHeaders", new ArrayOfObjectSerializer107());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FBEResp FBERequest(PwkApi.com.conlog.val.phb.FBEReq)", new ArrayOfObjectSerializer88());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelVendResp CancelVendRequest(PwkApi.com.conlog.val.phb.CancelVendReq):InHeaders", new ArrayOfObjectSerializer10());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TotalBatchResp TotalBatchRequest(PwkApi.com.conlog.val.phb.TotalBatchReq):Response", new ArrayOfObjectSerializer65());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.UpdateMeterKeyResp UpdateMeterKeyRequest(PwkApi.com.conlog.val.phb.UpdateMeterKeyReq)", new ArrayOfObjectSerializer24());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.GetVendingServerStateResp GetVendingServerStateRequest(PwkApi.com.conlog.val.phb.GetVendingServerStateReq):OutHeaders", new ArrayOfObjectSerializer71());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.NonMeterSpecificEngResp NonMeterSpecificEngRequest(PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq):OutHeaders", new ArrayOfObjectSerializer47());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.AdviceResp AdviceRequest(PwkApi.com.conlog.val.phb.AdviceReq):Response", new ArrayOfObjectSerializer53());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.GetVendingServerStateResp GetVendingServerStateRequest(PwkApi.com.conlog.val.phb.GetVendingServerStateReq):Response", new ArrayOfObjectSerializer69());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmMeterResp ConfirmMeterRequest(PwkApi.com.conlog.val.phb.ConfirmMeterReq):InHeaders", new ArrayOfObjectSerializer82());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmCustomerResp ConfirmCustomerRequest(PwkApi.com.conlog.val.phb.ConfirmCustomerReq):OutHeaders", new ArrayOfObjectSerializer3());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.PayAccResp PayAccountRequest(PwkApi.com.conlog.val.phb.PayAccReq)", new ArrayOfObjectSerializer16());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelPendingResp CancelPendingRequest(PwkApi.com.conlog.val.phb.CancelPendingReq):InHeaders", new ArrayOfObjectSerializer106());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp ReverseMerchantDeposit(PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq):Response", new ArrayOfObjectSerializer77());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintEndBatchResp ReprintEndBatchRequest(PwkApi.com.conlog.val.phb.ReprintEndBatchReq):Response", new ArrayOfObjectSerializer41());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VerifyResp VerifyRequest(PwkApi.com.conlog.val.phb.VerifyReq)", new ArrayOfObjectSerializer12());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterSpecificEngResp MeterSpecificEngRequest(PwkApi.com.conlog.val.phb.MeterSpecificEngReq):OutHeaders", new ArrayOfObjectSerializer51());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CreditVendResp CreditVendRequest(PwkApi.com.conlog.val.phb.CreditVendReq)", new ArrayOfObjectSerializer84());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CreditVendResp CreditVendRequest(PwkApi.com.conlog.val.phb.CreditVendReq):InHeaders", new ArrayOfObjectSerializer86());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelVendResp CancelVendRequest(PwkApi.com.conlog.val.phb.CancelVendReq)", new ArrayOfObjectSerializer8());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterCreditTransferResp MeterCreditTransferRequest(PwkApi.com.conlog.val.phb.MeterCreditTransferReq):InHeaders", new ArrayOfObjectSerializer98());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VerifyResp VerifyRequest(PwkApi.com.conlog.val.phb.VerifyReq):OutHeaders", new ArrayOfObjectSerializer15());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TrialCreditVendResp TrialCreditVendRequest(PwkApi.com.conlog.val.phb.TrialCreditVendReq)", new ArrayOfObjectSerializer92());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CustReportFaultResp CustReportFaultRequest(PwkApi.com.conlog.val.phb.CustReportFaultReq)", new ArrayOfObjectSerializer20());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelPendingResp CancelPendingRequest(PwkApi.com.conlog.val.phb.CancelPendingReq)", new ArrayOfObjectSerializer104());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MakeMerchantDepositResp MakeMerchantDeposit(PwkApi.com.conlog.val.phb.MakeMerchantDepositReq):InHeaders", new ArrayOfObjectSerializer74());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.AdviceResp AdviceRequest(PwkApi.com.conlog.val.phb.AdviceReq):OutHeaders", new ArrayOfObjectSerializer55());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TrialCreditVendResp TrialCreditVendRequest(PwkApi.com.conlog.val.phb.TrialCreditVendReq):OutHeaders", new ArrayOfObjectSerializer95());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MakeMerchantDepositResp MakeMerchantDeposit(PwkApi.com.conlog.val.phb.MakeMerchantDepositReq):Response", new ArrayOfObjectSerializer73());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FreeIssueResp FreeIssueRequest(PwkApi.com.conlog.val.phb.FreeIssueReq):InHeaders", new ArrayOfObjectSerializer102());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp ReverseMerchantDeposit(PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq):InHeaders", new ArrayOfObjectSerializer78());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.EndBatchResp EndBatchRequest(PwkApi.com.conlog.val.phb.EndBatchReq):OutHeaders", new ArrayOfObjectSerializer63());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintResp ReprintRequest(PwkApi.com.conlog.val.phb.ReprintReq)", new ArrayOfObjectSerializer4());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TotalBatchResp TotalBatchRequest(PwkApi.com.conlog.val.phb.TotalBatchReq):InHeaders", new ArrayOfObjectSerializer66());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterCreditTransferResp MeterCreditTransferRequest(PwkApi.com.conlog.val.phb.MeterCreditTransferReq)", new ArrayOfObjectSerializer96());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.CancelPendingResp CancelPendingRequest(PwkApi.com.conlog.val.phb.CancelPendingReq):Response", new ArrayOfObjectSerializer105());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.PayAccResp PayAccountRequest(PwkApi.com.conlog.val.phb.PayAccReq):Response", new ArrayOfObjectSerializer17());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmCustomerResp ConfirmCustomerRequest(PwkApi.com.conlog.val.phb.ConfirmCustomerReq)", new ArrayOfObjectSerializer());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintDepositResp ReprintDepositSlipRequest(PwkApi.com.conlog.val.phb.ReprintDepositReq):Response", new ArrayOfObjectSerializer37());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FBEResp FBERequest(PwkApi.com.conlog.val.phb.FBEReq):InHeaders", new ArrayOfObjectSerializer90());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterCreditTransferResp MeterCreditTransferRequest(PwkApi.com.conlog.val.phb.MeterCreditTransferReq):Response", new ArrayOfObjectSerializer97());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmCustomerResp ConfirmCustomerRequest(PwkApi.com.conlog.val.phb.ConfirmCustomerReq):InHeaders", new ArrayOfObjectSerializer2());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.DepositResp DepositSlipRequest(PwkApi.com.conlog.val.phb.DepositReq):OutHeaders", new ArrayOfObjectSerializer35());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FreeIssueResp FreeIssueRequest(PwkApi.com.conlog.val.phb.FreeIssueReq)", new ArrayOfObjectSerializer100());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.StartBatchResp StartBatchRequest(PwkApi.com.conlog.val.phb.StartBatchReq):InHeaders", new ArrayOfObjectSerializer58());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReverseMerchantDepositResp ReverseMerchantDeposit(PwkApi.com.conlog.val.phb.ReverseMerchantDepositReq):OutHeaders", new ArrayOfObjectSerializer79());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintResp ReprintRequest(PwkApi.com.conlog.val.phb.ReprintReq):OutHeaders", new ArrayOfObjectSerializer7());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.DepositResp DepositSlipRequest(PwkApi.com.conlog.val.phb.DepositReq)", new ArrayOfObjectSerializer32());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MakeMerchantDepositResp MakeMerchantDeposit(PwkApi.com.conlog.val.phb.MakeMerchantDepositReq):OutHeaders", new ArrayOfObjectSerializer75());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.GetVendingServerStateResp GetVendingServerStateRequest(PwkApi.com.conlog.val.phb.GetVendingServerStateReq)", new ArrayOfObjectSerializer68());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VendorStatementResp VendorStatementRequest(PwkApi.com.conlog.val.phb.VendorStatementReq):Response", new ArrayOfObjectSerializer29());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.FreeIssueResp FreeIssueRequest(PwkApi.com.conlog.val.phb.FreeIssueReq):Response", new ArrayOfObjectSerializer101());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.TotalBatchResp TotalBatchRequest(PwkApi.com.conlog.val.phb.TotalBatchReq):OutHeaders", new ArrayOfObjectSerializer67());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.UpdateMeterKeyResp UpdateMeterKeyRequest(PwkApi.com.conlog.val.phb.UpdateMeterKeyReq):Response", new ArrayOfObjectSerializer25());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.NonMeterSpecificEngResp NonMeterSpecificEngRequest(PwkApi.com.conlog.val.phb.NonMeterSpecificEngReq):InHeaders", new ArrayOfObjectSerializer46());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VerifyResp VerifyRequest(PwkApi.com.conlog.val.phb.VerifyReq):InHeaders", new ArrayOfObjectSerializer14());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MeterSpecificEngResp MeterSpecificEngRequest(PwkApi.com.conlog.val.phb.MeterSpecificEngReq):Response", new ArrayOfObjectSerializer49());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ReprintDepositResp ReprintDepositSlipRequest(PwkApi.com.conlog.val.phb.ReprintDepositReq):OutHeaders", new ArrayOfObjectSerializer39());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.AdviceResp AdviceRequest(PwkApi.com.conlog.val.phb.AdviceReq)", new ArrayOfObjectSerializer52());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.MakeMerchantDepositResp MakeMerchantDeposit(PwkApi.com.conlog.val.phb.MakeMerchantDepositReq)", new ArrayOfObjectSerializer72());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.VendorStatementResp VendorStatementRequest(PwkApi.com.conlog.val.phb.VendorStatementReq):OutHeaders", new ArrayOfObjectSerializer31());
                    _tmp.Add(@"PwkApi.com.conlog.val.phb.XMLVendService:PwkApi.com.conlog.val.phb.ConfirmMeterResp ConfirmMeterRequest(PwkApi.com.conlog.val.phb.ConfirmMeterReq):Response", new ArrayOfObjectSerializer81());
                    if (typedSerializers == null) typedSerializers = _tmp;
                }
                return typedSerializers;
            }
        }
        public override System.Boolean CanSerialize(System.Type type) {
            if (type == typeof(global::PwkApi.com.conlog.val.phb.XMLVendService)) return true;
            return false;
        }
        public override System.Xml.Serialization.XmlSerializer GetSerializer(System.Type type) {
            return null;
        }
    }
}
